
fftest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003db8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00003db8  00003e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000061f  0080018a  0080018a  00003f76  2**0
                  ALLOC
  3 .stab         00001344  00000000  00000000  00003f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000f8  00000000  00000000  000052bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  000053b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000077d  00000000  00000000  00005634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003a4c  00000000  00000000  00005db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001acf  00000000  00000000  000097fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002ba0  00000000  00000000  0000b2cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000660  00000000  00000000  0000de6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000900  00000000  00000000  0000e4cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000edcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f73a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
       4:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__vector_1>
       8:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__vector_2>
       c:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__vector_3>
      10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
      14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
      18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
      1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
      20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
      24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
      28:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <__vector_10>
      2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
      30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
      34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
      38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
      3c:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_15>
      40:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <__vector_16>
      44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
      48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
      4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
      50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

00000054 <FlashConst>:
      54:	03 00                                               ..

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d8 e0       	ldi	r29, 0x08	; 8
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	11 e0       	ldi	r17, 0x01	; 1
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	e8 eb       	ldi	r30, 0xB8	; 184
      6a:	fd e3       	ldi	r31, 0x3D	; 61
      6c:	02 c0       	rjmp	.+4      	; 0x72 <.do_copy_data_start>

0000006e <.do_copy_data_loop>:
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0

00000072 <.do_copy_data_start>:
      72:	aa 38       	cpi	r26, 0x8A	; 138
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <.do_copy_data_loop>

00000078 <__do_clear_bss>:
      78:	17 e0       	ldi	r17, 0x07	; 7
      7a:	aa e8       	ldi	r26, 0x8A	; 138
      7c:	b1 e0       	ldi	r27, 0x01	; 1
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	a9 3a       	cpi	r26, 0xA9	; 169
      84:	b1 07       	cpc	r27, r17
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>
      88:	0e 94 de 08 	call	0x11bc	; 0x11bc <main>
      8c:	0c 94 da 1e 	jmp	0x3db4	; 0x3db4 <_exit>

00000090 <__bad_interrupt>:
      90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <init_USART_baud>:




void init_USART_baud(unsigned long num )//USART 初始化
{
      94:	0f 93       	push	r16
      96:	1f 93       	push	r17
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	00 d0       	rcall	.+0      	; 0x9e <init_USART_baud+0xa>
      9e:	00 d0       	rcall	.+0      	; 0xa0 <init_USART_baud+0xc>
      a0:	cd b7       	in	r28, 0x3d	; 61
      a2:	de b7       	in	r29, 0x3e	; 62
      a4:	69 83       	std	Y+1, r22	; 0x01
      a6:	7a 83       	std	Y+2, r23	; 0x02
      a8:	8b 83       	std	Y+3, r24	; 0x03
      aa:	9c 83       	std	Y+4, r25	; 0x04
    //USART 38400 8, n,1  PC上位机软件(超级终端等)也要设成同样的设置才能通讯
    UCSRC = (1<<URSEL) | 0x06;    //异步，8位数据，无奇偶校验，一个停止位，无倍速    
      ac:	e0 e4       	ldi	r30, 0x40	; 64
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	86 e8       	ldi	r24, 0x86	; 134
      b2:	80 83       	st	Z, r24
    UBRRL=(F_CPU/num/16-1)%256;
      b4:	09 e2       	ldi	r16, 0x29	; 41
      b6:	10 e0       	ldi	r17, 0x00	; 0
      b8:	80 e0       	ldi	r24, 0x00	; 0
      ba:	90 ed       	ldi	r25, 0xD0	; 208
      bc:	a7 e0       	ldi	r26, 0x07	; 7
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	29 81       	ldd	r18, Y+1	; 0x01
      c2:	3a 81       	ldd	r19, Y+2	; 0x02
      c4:	4b 81       	ldd	r20, Y+3	; 0x03
      c6:	5c 81       	ldd	r21, Y+4	; 0x04
      c8:	bc 01       	movw	r22, r24
      ca:	cd 01       	movw	r24, r26
      cc:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <__udivmodsi4>
      d0:	da 01       	movw	r26, r20
      d2:	c9 01       	movw	r24, r18
      d4:	81 50       	subi	r24, 0x01	; 1
      d6:	f8 01       	movw	r30, r16
      d8:	80 83       	st	Z, r24
    UBRRH= (F_CPU/num/16-1)/256;
      da:	00 e4       	ldi	r16, 0x40	; 64
      dc:	10 e0       	ldi	r17, 0x00	; 0
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	90 ed       	ldi	r25, 0xD0	; 208
      e2:	a7 e0       	ldi	r26, 0x07	; 7
      e4:	b0 e0       	ldi	r27, 0x00	; 0
      e6:	29 81       	ldd	r18, Y+1	; 0x01
      e8:	3a 81       	ldd	r19, Y+2	; 0x02
      ea:	4b 81       	ldd	r20, Y+3	; 0x03
      ec:	5c 81       	ldd	r21, Y+4	; 0x04
      ee:	bc 01       	movw	r22, r24
      f0:	cd 01       	movw	r24, r26
      f2:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <__udivmodsi4>
      f6:	da 01       	movw	r26, r20
      f8:	c9 01       	movw	r24, r18
      fa:	01 97       	sbiw	r24, 0x01	; 1
      fc:	a1 09       	sbc	r26, r1
      fe:	b1 09       	sbc	r27, r1
     100:	89 2f       	mov	r24, r25
     102:	9a 2f       	mov	r25, r26
     104:	ab 2f       	mov	r26, r27
     106:	bb 27       	eor	r27, r27
     108:	f8 01       	movw	r30, r16
     10a:	80 83       	st	Z, r24
    UCSRA = 0x00;
     10c:	eb e2       	ldi	r30, 0x2B	; 43
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	10 82       	st	Z, r1
    UCSRB |=  (1<<TXEN); //使能接收中断，使能接收，使能发送
     112:	aa e2       	ldi	r26, 0x2A	; 42
     114:	b0 e0       	ldi	r27, 0x00	; 0
     116:	ea e2       	ldi	r30, 0x2A	; 42
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	80 81       	ld	r24, Z
     11c:	88 60       	ori	r24, 0x08	; 8
     11e:	8c 93       	st	X, r24
     
    //UCSRB = (1<<TXEN);    // 使能发送
} 
     120:	0f 90       	pop	r0
     122:	0f 90       	pop	r0
     124:	0f 90       	pop	r0
     126:	0f 90       	pop	r0
     128:	cf 91       	pop	r28
     12a:	df 91       	pop	r29
     12c:	1f 91       	pop	r17
     12e:	0f 91       	pop	r16
     130:	08 95       	ret

00000132 <usart_interrupt_en>:

	usart_interrupt_en()
	
	{
     132:	df 93       	push	r29
     134:	cf 93       	push	r28
     136:	00 d0       	rcall	.+0      	; 0x138 <usart_interrupt_en+0x6>
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
	 
	UCSRB|=(1<<TXCIE) ; //使能接收中断，使能接收，使能发送
     13c:	aa e2       	ldi	r26, 0x2A	; 42
     13e:	b0 e0       	ldi	r27, 0x00	; 0
     140:	ea e2       	ldi	r30, 0x2A	; 42
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	80 81       	ld	r24, Z
     146:	80 64       	ori	r24, 0x40	; 64
     148:	8c 93       	st	X, r24
	}
     14a:	0f 90       	pop	r0
     14c:	0f 90       	pop	r0
     14e:	cf 91       	pop	r28
     150:	df 91       	pop	r29
     152:	08 95       	ret

00000154 <send_c>:
       void send_c(  char schar) //发送采用查询方式
{
     154:	df 93       	push	r29
     156:	cf 93       	push	r28
     158:	0f 92       	push	r0
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	89 83       	std	Y+1, r24	; 0x01
    while( !(UCSRA & (1<<UDRE)) );
     160:	eb e2       	ldi	r30, 0x2B	; 43
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	88 2f       	mov	r24, r24
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	80 72       	andi	r24, 0x20	; 32
     16c:	90 70       	andi	r25, 0x00	; 0
     16e:	00 97       	sbiw	r24, 0x00	; 0
     170:	b9 f3       	breq	.-18     	; 0x160 <send_c+0xc>
    UDR=schar;
     172:	ec e2       	ldi	r30, 0x2C	; 44
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	89 81       	ldd	r24, Y+1	; 0x01
     178:	80 83       	st	Z, r24
}
     17a:	0f 90       	pop	r0
     17c:	cf 91       	pop	r28
     17e:	df 91       	pop	r29
     180:	08 95       	ret

00000182 <usart_write>:

   int usart_write( unsigned char* buf  , int num)
          { int i;
     182:	df 93       	push	r29
     184:	cf 93       	push	r28
     186:	00 d0       	rcall	.+0      	; 0x188 <usart_write+0x6>
     188:	00 d0       	rcall	.+0      	; 0x18a <usart_write+0x8>
     18a:	00 d0       	rcall	.+0      	; 0x18c <usart_write+0xa>
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
     190:	9c 83       	std	Y+4, r25	; 0x04
     192:	8b 83       	std	Y+3, r24	; 0x03
     194:	7e 83       	std	Y+6, r23	; 0x06
     196:	6d 83       	std	Y+5, r22	; 0x05
           for(i=0;i<num;i++)
     198:	1a 82       	std	Y+2, r1	; 0x02
     19a:	19 82       	std	Y+1, r1	; 0x01
     19c:	11 c0       	rjmp	.+34     	; 0x1c0 <usart_write+0x3e>
               
               {
               send_c(* buf++) ;
     19e:	eb 81       	ldd	r30, Y+3	; 0x03
     1a0:	fc 81       	ldd	r31, Y+4	; 0x04
     1a2:	80 81       	ld	r24, Z
     1a4:	28 2f       	mov	r18, r24
     1a6:	8b 81       	ldd	r24, Y+3	; 0x03
     1a8:	9c 81       	ldd	r25, Y+4	; 0x04
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	9c 83       	std	Y+4, r25	; 0x04
     1ae:	8b 83       	std	Y+3, r24	; 0x03
     1b0:	82 2f       	mov	r24, r18
     1b2:	0e 94 aa 00 	call	0x154	; 0x154 <send_c>
    UDR=schar;
}

   int usart_write( unsigned char* buf  , int num)
          { int i;
           for(i=0;i<num;i++)
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	9a 83       	std	Y+2, r25	; 0x02
     1be:	89 83       	std	Y+1, r24	; 0x01
     1c0:	29 81       	ldd	r18, Y+1	; 0x01
     1c2:	3a 81       	ldd	r19, Y+2	; 0x02
     1c4:	8d 81       	ldd	r24, Y+5	; 0x05
     1c6:	9e 81       	ldd	r25, Y+6	; 0x06
     1c8:	28 17       	cp	r18, r24
     1ca:	39 07       	cpc	r19, r25
     1cc:	44 f3       	brlt	.-48     	; 0x19e <usart_write+0x1c>
               
               {
               send_c(* buf++) ;
               }
               
           return   num;  
     1ce:	8d 81       	ldd	r24, Y+5	; 0x05
     1d0:	9e 81       	ldd	r25, Y+6	; 0x06
          
          
          
          }
     1d2:	26 96       	adiw	r28, 0x06	; 6
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	f8 94       	cli
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	cd bf       	out	0x3d, r28	; 61
     1de:	cf 91       	pop	r28
     1e0:	df 91       	pop	r29
     1e2:	08 95       	ret

000001e4 <capture_wave>:
   



void capture_wave (int16_t *buffer, uint16_t count)
{
     1e4:	df 93       	push	r29
     1e6:	cf 93       	push	r28
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <capture_wave+0x6>
     1ea:	00 d0       	rcall	.+0      	; 0x1ec <capture_wave+0x8>
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	9a 83       	std	Y+2, r25	; 0x02
     1f2:	89 83       	std	Y+1, r24	; 0x01
     1f4:	7c 83       	std	Y+4, r23	; 0x04
     1f6:	6b 83       	std	Y+3, r22	; 0x03
	ADMUX = _BV(REFS0)|_BV(ADLAR)|_BV(MUX2)|_BV(MUX1)|_BV(MUX0);	// channel
     1f8:	e7 e2       	ldi	r30, 0x27	; 39
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	87 e6       	ldi	r24, 0x67	; 103
     1fe:	80 83       	st	Z, r24

	do {
		ADCSRA = _BV(ADEN)|_BV(ADSC)|_BV(ADFR)|_BV(ADIF)|_BV(ADPS2)|_BV(ADPS1);
     200:	e6 e2       	ldi	r30, 0x26	; 38
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	86 ef       	ldi	r24, 0xF6	; 246
     206:	80 83       	st	Z, r24
		while(bit_is_clear(ADCSRA, ADIF));
     208:	e6 e2       	ldi	r30, 0x26	; 38
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	88 2f       	mov	r24, r24
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	80 71       	andi	r24, 0x10	; 16
     214:	90 70       	andi	r25, 0x00	; 0
     216:	00 97       	sbiw	r24, 0x00	; 0
     218:	b9 f3       	breq	.-18     	; 0x208 <capture_wave+0x24>
		*buffer++ = ADC - 32768;
     21a:	e4 e2       	ldi	r30, 0x24	; 36
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	91 81       	ldd	r25, Z+1	; 0x01
     222:	80 50       	subi	r24, 0x00	; 0
     224:	90 48       	sbci	r25, 0x80	; 128
     226:	e9 81       	ldd	r30, Y+1	; 0x01
     228:	fa 81       	ldd	r31, Y+2	; 0x02
     22a:	91 83       	std	Z+1, r25	; 0x01
     22c:	80 83       	st	Z, r24
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	9a 81       	ldd	r25, Y+2	; 0x02
     232:	02 96       	adiw	r24, 0x02	; 2
     234:	9a 83       	std	Y+2, r25	; 0x02
     236:	89 83       	std	Y+1, r24	; 0x01
	} while(--count);
     238:	8b 81       	ldd	r24, Y+3	; 0x03
     23a:	9c 81       	ldd	r25, Y+4	; 0x04
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	9c 83       	std	Y+4, r25	; 0x04
     240:	8b 83       	std	Y+3, r24	; 0x03
     242:	8b 81       	ldd	r24, Y+3	; 0x03
     244:	9c 81       	ldd	r25, Y+4	; 0x04
     246:	00 97       	sbiw	r24, 0x00	; 0
     248:	d9 f6       	brne	.-74     	; 0x200 <capture_wave+0x1c>

	ADCSRA = 0;
     24a:	e6 e2       	ldi	r30, 0x26	; 38
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	10 82       	st	Z, r1
}
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
     258:	cf 91       	pop	r28
     25a:	df 91       	pop	r29
     25c:	08 95       	ret

0000025e <SUM_SPECTRUM>:
/*------------------------------------------------*/
/* Online Monitor via an ISP cable                */

unsigned long int SUM_SPECTRUM(uint16_t * spectrum,unsigned char num)

{ unsigned char i;
     25e:	df 93       	push	r29
     260:	cf 93       	push	r28
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
     266:	28 97       	sbiw	r28, 0x08	; 8
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	f8 94       	cli
     26c:	de bf       	out	0x3e, r29	; 62
     26e:	0f be       	out	0x3f, r0	; 63
     270:	cd bf       	out	0x3d, r28	; 61
     272:	9f 83       	std	Y+7, r25	; 0x07
     274:	8e 83       	std	Y+6, r24	; 0x06
     276:	68 87       	std	Y+8, r22	; 0x08
unsigned long int sum=0;
     278:	19 82       	std	Y+1, r1	; 0x01
     27a:	1a 82       	std	Y+2, r1	; 0x02
     27c:	1b 82       	std	Y+3, r1	; 0x03
     27e:	1c 82       	std	Y+4, r1	; 0x04
for(i=0;i<num;i++)
     280:	1d 82       	std	Y+5, r1	; 0x05
     282:	1b c0       	rjmp	.+54     	; 0x2ba <SUM_SPECTRUM+0x5c>
{
sum+=*spectrum++;
     284:	ee 81       	ldd	r30, Y+6	; 0x06
     286:	ff 81       	ldd	r31, Y+7	; 0x07
     288:	80 81       	ld	r24, Z
     28a:	91 81       	ldd	r25, Z+1	; 0x01
     28c:	9c 01       	movw	r18, r24
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	9a 81       	ldd	r25, Y+2	; 0x02
     296:	ab 81       	ldd	r26, Y+3	; 0x03
     298:	bc 81       	ldd	r27, Y+4	; 0x04
     29a:	82 0f       	add	r24, r18
     29c:	93 1f       	adc	r25, r19
     29e:	a4 1f       	adc	r26, r20
     2a0:	b5 1f       	adc	r27, r21
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	9a 83       	std	Y+2, r25	; 0x02
     2a6:	ab 83       	std	Y+3, r26	; 0x03
     2a8:	bc 83       	std	Y+4, r27	; 0x04
     2aa:	8e 81       	ldd	r24, Y+6	; 0x06
     2ac:	9f 81       	ldd	r25, Y+7	; 0x07
     2ae:	02 96       	adiw	r24, 0x02	; 2
     2b0:	9f 83       	std	Y+7, r25	; 0x07
     2b2:	8e 83       	std	Y+6, r24	; 0x06

unsigned long int SUM_SPECTRUM(uint16_t * spectrum,unsigned char num)

{ unsigned char i;
unsigned long int sum=0;
for(i=0;i<num;i++)
     2b4:	8d 81       	ldd	r24, Y+5	; 0x05
     2b6:	8f 5f       	subi	r24, 0xFF	; 255
     2b8:	8d 83       	std	Y+5, r24	; 0x05
     2ba:	9d 81       	ldd	r25, Y+5	; 0x05
     2bc:	88 85       	ldd	r24, Y+8	; 0x08
     2be:	98 17       	cp	r25, r24
     2c0:	08 f3       	brcs	.-62     	; 0x284 <SUM_SPECTRUM+0x26>
{
sum+=*spectrum++;
}
return  sum ;
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	9a 81       	ldd	r25, Y+2	; 0x02
     2c6:	ab 81       	ldd	r26, Y+3	; 0x03
     2c8:	bc 81       	ldd	r27, Y+4	; 0x04
}
     2ca:	bc 01       	movw	r22, r24
     2cc:	cd 01       	movw	r24, r26
     2ce:	28 96       	adiw	r28, 0x08	; 8
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	cf 91       	pop	r28
     2dc:	df 91       	pop	r29
     2de:	08 95       	ret

000002e0 <peak>:

unsigned int peak(uint16_t * spectrum_in,unsigned int  num)

{  unsigned char i,index;
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	28 97       	sbiw	r28, 0x08	; 8
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	9e 83       	std	Y+6, r25	; 0x06
     2f6:	8d 83       	std	Y+5, r24	; 0x05
     2f8:	78 87       	std	Y+8, r23	; 0x08
     2fa:	6f 83       	std	Y+7, r22	; 0x07
   unsigned int max=0;
     2fc:	1a 82       	std	Y+2, r1	; 0x02
     2fe:	19 82       	std	Y+1, r1	; 0x01
   spectrum_in+=3;
     300:	8d 81       	ldd	r24, Y+5	; 0x05
     302:	9e 81       	ldd	r25, Y+6	; 0x06
     304:	06 96       	adiw	r24, 0x06	; 6
     306:	9e 83       	std	Y+6, r25	; 0x06
     308:	8d 83       	std	Y+5, r24	; 0x05
   for(i=3;i<num;i++)
     30a:	83 e0       	ldi	r24, 0x03	; 3
     30c:	8c 83       	std	Y+4, r24	; 0x04
     30e:	19 c0       	rjmp	.+50     	; 0x342 <peak+0x62>
   {
    if (*spectrum_in>max)
     310:	ed 81       	ldd	r30, Y+5	; 0x05
     312:	fe 81       	ldd	r31, Y+6	; 0x06
     314:	20 81       	ld	r18, Z
     316:	31 81       	ldd	r19, Z+1	; 0x01
     318:	89 81       	ldd	r24, Y+1	; 0x01
     31a:	9a 81       	ldd	r25, Y+2	; 0x02
     31c:	82 17       	cp	r24, r18
     31e:	93 07       	cpc	r25, r19
     320:	40 f4       	brcc	.+16     	; 0x332 <peak+0x52>
    {
     max=*spectrum_in ;
     322:	ed 81       	ldd	r30, Y+5	; 0x05
     324:	fe 81       	ldd	r31, Y+6	; 0x06
     326:	80 81       	ld	r24, Z
     328:	91 81       	ldd	r25, Z+1	; 0x01
     32a:	9a 83       	std	Y+2, r25	; 0x02
     32c:	89 83       	std	Y+1, r24	; 0x01
	 index=i;
     32e:	8c 81       	ldd	r24, Y+4	; 0x04
     330:	8b 83       	std	Y+3, r24	; 0x03
	 }
	 spectrum_in++;
     332:	8d 81       	ldd	r24, Y+5	; 0x05
     334:	9e 81       	ldd	r25, Y+6	; 0x06
     336:	02 96       	adiw	r24, 0x02	; 2
     338:	9e 83       	std	Y+6, r25	; 0x06
     33a:	8d 83       	std	Y+5, r24	; 0x05
unsigned int peak(uint16_t * spectrum_in,unsigned int  num)

{  unsigned char i,index;
   unsigned int max=0;
   spectrum_in+=3;
   for(i=3;i<num;i++)
     33c:	8c 81       	ldd	r24, Y+4	; 0x04
     33e:	8f 5f       	subi	r24, 0xFF	; 255
     340:	8c 83       	std	Y+4, r24	; 0x04
     342:	8c 81       	ldd	r24, Y+4	; 0x04
     344:	28 2f       	mov	r18, r24
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	8f 81       	ldd	r24, Y+7	; 0x07
     34a:	98 85       	ldd	r25, Y+8	; 0x08
     34c:	28 17       	cp	r18, r24
     34e:	39 07       	cpc	r19, r25
     350:	f8 f2       	brcs	.-66     	; 0x310 <peak+0x30>
     max=*spectrum_in ;
	 index=i;
	 }
	 spectrum_in++;
   }
   return  index;
     352:	8b 81       	ldd	r24, Y+3	; 0x03
     354:	88 2f       	mov	r24, r24
     356:	90 e0       	ldi	r25, 0x00	; 0
}
     358:	28 96       	adiw	r28, 0x08	; 8
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
     364:	cf 91       	pop	r28
     366:	df 91       	pop	r29
     368:	08 95       	ret

0000036a <find_bias>:
*  Output:         null
*  Return:         int 
*  Others:         无 调整后需要对最值复位。
****************************************************************/
unsigned  int  find_bias(int * data,int num)
{ int i=0 ;
     36a:	df 93       	push	r29
     36c:	cf 93       	push	r28
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	2a 97       	sbiw	r28, 0x0a	; 10
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	98 87       	std	Y+8, r25	; 0x08
     380:	8f 83       	std	Y+7, r24	; 0x07
     382:	7a 87       	std	Y+10, r23	; 0x0a
     384:	69 87       	std	Y+9, r22	; 0x09
     386:	1e 82       	std	Y+6, r1	; 0x06
     388:	1d 82       	std	Y+5, r1	; 0x05
   long int sum=0;
     38a:	19 82       	std	Y+1, r1	; 0x01
     38c:	1a 82       	std	Y+2, r1	; 0x02
     38e:	1b 82       	std	Y+3, r1	; 0x03
     390:	1c 82       	std	Y+4, r1	; 0x04
   for (i=0;i<num;i++)
     392:	1e 82       	std	Y+6, r1	; 0x06
     394:	1d 82       	std	Y+5, r1	; 0x05
     396:	1f c0       	rjmp	.+62     	; 0x3d6 <find_bias+0x6c>
   
   {
    
   
   sum+=  *data++ ;
     398:	ef 81       	ldd	r30, Y+7	; 0x07
     39a:	f8 85       	ldd	r31, Y+8	; 0x08
     39c:	80 81       	ld	r24, Z
     39e:	91 81       	ldd	r25, Z+1	; 0x01
     3a0:	9c 01       	movw	r18, r24
     3a2:	44 27       	eor	r20, r20
     3a4:	37 fd       	sbrc	r19, 7
     3a6:	40 95       	com	r20
     3a8:	54 2f       	mov	r21, r20
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	ab 81       	ldd	r26, Y+3	; 0x03
     3b0:	bc 81       	ldd	r27, Y+4	; 0x04
     3b2:	82 0f       	add	r24, r18
     3b4:	93 1f       	adc	r25, r19
     3b6:	a4 1f       	adc	r26, r20
     3b8:	b5 1f       	adc	r27, r21
     3ba:	89 83       	std	Y+1, r24	; 0x01
     3bc:	9a 83       	std	Y+2, r25	; 0x02
     3be:	ab 83       	std	Y+3, r26	; 0x03
     3c0:	bc 83       	std	Y+4, r27	; 0x04
     3c2:	8f 81       	ldd	r24, Y+7	; 0x07
     3c4:	98 85       	ldd	r25, Y+8	; 0x08
     3c6:	02 96       	adiw	r24, 0x02	; 2
     3c8:	98 87       	std	Y+8, r25	; 0x08
     3ca:	8f 83       	std	Y+7, r24	; 0x07
*  Others:         无 调整后需要对最值复位。
****************************************************************/
unsigned  int  find_bias(int * data,int num)
{ int i=0 ;
   long int sum=0;
   for (i=0;i<num;i++)
     3cc:	8d 81       	ldd	r24, Y+5	; 0x05
     3ce:	9e 81       	ldd	r25, Y+6	; 0x06
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	9e 83       	std	Y+6, r25	; 0x06
     3d4:	8d 83       	std	Y+5, r24	; 0x05
     3d6:	2d 81       	ldd	r18, Y+5	; 0x05
     3d8:	3e 81       	ldd	r19, Y+6	; 0x06
     3da:	89 85       	ldd	r24, Y+9	; 0x09
     3dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     3de:	28 17       	cp	r18, r24
     3e0:	39 07       	cpc	r19, r25
     3e2:	d4 f2       	brlt	.-76     	; 0x398 <find_bias+0x2e>
   
   sum+=  *data++ ;
     }

   
     return sum/num;
     3e4:	89 85       	ldd	r24, Y+9	; 0x09
     3e6:	9a 85       	ldd	r25, Y+10	; 0x0a
     3e8:	9c 01       	movw	r18, r24
     3ea:	44 27       	eor	r20, r20
     3ec:	37 fd       	sbrc	r19, 7
     3ee:	40 95       	com	r20
     3f0:	54 2f       	mov	r21, r20
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	9a 81       	ldd	r25, Y+2	; 0x02
     3f6:	ab 81       	ldd	r26, Y+3	; 0x03
     3f8:	bc 81       	ldd	r27, Y+4	; 0x04
     3fa:	bc 01       	movw	r22, r24
     3fc:	cd 01       	movw	r24, r26
     3fe:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <__divmodsi4>
     402:	da 01       	movw	r26, r20
     404:	c9 01       	movw	r24, r18
}
     406:	2a 96       	adiw	r28, 0x0a	; 10
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd bf       	out	0x3d, r28	; 61
     412:	cf 91       	pop	r28
     414:	df 91       	pop	r29
     416:	08 95       	ret

00000418 <off_bias>:




unsigned  char  off_bias(int * data,int num)
{ int i=0 ;
     418:	df 93       	push	r29
     41a:	cf 93       	push	r28
     41c:	00 d0       	rcall	.+0      	; 0x41e <off_bias+0x6>
     41e:	00 d0       	rcall	.+0      	; 0x420 <off_bias+0x8>
     420:	00 d0       	rcall	.+0      	; 0x422 <off_bias+0xa>
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
     426:	9c 83       	std	Y+4, r25	; 0x04
     428:	8b 83       	std	Y+3, r24	; 0x03
     42a:	7e 83       	std	Y+6, r23	; 0x06
     42c:	6d 83       	std	Y+5, r22	; 0x05
     42e:	1a 82       	std	Y+2, r1	; 0x02
     430:	19 82       	std	Y+1, r1	; 0x01
   for (i=0;i<num;i++)
     432:	1a 82       	std	Y+2, r1	; 0x02
     434:	19 82       	std	Y+1, r1	; 0x01
     436:	43 c0       	rjmp	.+134    	; 0x4be <off_bias+0xa6>
   
   {
   if(*data>max )
     438:	eb 81       	ldd	r30, Y+3	; 0x03
     43a:	fc 81       	ldd	r31, Y+4	; 0x04
     43c:	80 81       	ld	r24, Z
     43e:	91 81       	ldd	r25, Z+1	; 0x01
     440:	9c 01       	movw	r18, r24
     442:	80 91 79 00 	lds	r24, 0x0079
     446:	90 91 7a 00 	lds	r25, 0x007A
     44a:	82 17       	cp	r24, r18
     44c:	93 07       	cpc	r25, r19
     44e:	40 f4       	brcc	.+16     	; 0x460 <off_bias+0x48>
   max=*data;
     450:	eb 81       	ldd	r30, Y+3	; 0x03
     452:	fc 81       	ldd	r31, Y+4	; 0x04
     454:	80 81       	ld	r24, Z
     456:	91 81       	ldd	r25, Z+1	; 0x01
     458:	90 93 7a 00 	sts	0x007A, r25
     45c:	80 93 79 00 	sts	0x0079, r24
   if (*data<min)
     460:	eb 81       	ldd	r30, Y+3	; 0x03
     462:	fc 81       	ldd	r31, Y+4	; 0x04
     464:	80 81       	ld	r24, Z
     466:	91 81       	ldd	r25, Z+1	; 0x01
     468:	9c 01       	movw	r18, r24
     46a:	80 91 7b 00 	lds	r24, 0x007B
     46e:	90 91 7c 00 	lds	r25, 0x007C
     472:	28 17       	cp	r18, r24
     474:	39 07       	cpc	r19, r25
     476:	40 f4       	brcc	.+16     	; 0x488 <off_bias+0x70>
   min=*data;
     478:	eb 81       	ldd	r30, Y+3	; 0x03
     47a:	fc 81       	ldd	r31, Y+4	; 0x04
     47c:	80 81       	ld	r24, Z
     47e:	91 81       	ldd	r25, Z+1	; 0x01
     480:	90 93 7c 00 	sts	0x007C, r25
     484:	80 93 7b 00 	sts	0x007B, r24
   
   
   
  
    *data++ =*data-bias;
     488:	eb 81       	ldd	r30, Y+3	; 0x03
     48a:	fc 81       	ldd	r31, Y+4	; 0x04
     48c:	80 81       	ld	r24, Z
     48e:	91 81       	ldd	r25, Z+1	; 0x01
     490:	9c 01       	movw	r18, r24
     492:	80 91 7d 00 	lds	r24, 0x007D
     496:	90 91 7e 00 	lds	r25, 0x007E
     49a:	a9 01       	movw	r20, r18
     49c:	48 1b       	sub	r20, r24
     49e:	59 0b       	sbc	r21, r25
     4a0:	ca 01       	movw	r24, r20
     4a2:	eb 81       	ldd	r30, Y+3	; 0x03
     4a4:	fc 81       	ldd	r31, Y+4	; 0x04
     4a6:	91 83       	std	Z+1, r25	; 0x01
     4a8:	80 83       	st	Z, r24
     4aa:	8b 81       	ldd	r24, Y+3	; 0x03
     4ac:	9c 81       	ldd	r25, Y+4	; 0x04
     4ae:	02 96       	adiw	r24, 0x02	; 2
     4b0:	9c 83       	std	Y+4, r25	; 0x04
     4b2:	8b 83       	std	Y+3, r24	; 0x03



unsigned  char  off_bias(int * data,int num)
{ int i=0 ;
   for (i=0;i<num;i++)
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	01 96       	adiw	r24, 0x01	; 1
     4ba:	9a 83       	std	Y+2, r25	; 0x02
     4bc:	89 83       	std	Y+1, r24	; 0x01
     4be:	29 81       	ldd	r18, Y+1	; 0x01
     4c0:	3a 81       	ldd	r19, Y+2	; 0x02
     4c2:	8d 81       	ldd	r24, Y+5	; 0x05
     4c4:	9e 81       	ldd	r25, Y+6	; 0x06
     4c6:	28 17       	cp	r18, r24
     4c8:	39 07       	cpc	r19, r25
     4ca:	0c f4       	brge	.+2      	; 0x4ce <off_bias+0xb6>
     4cc:	b5 cf       	rjmp	.-150    	; 0x438 <off_bias+0x20>
  
    *data++ =*data-bias;
     }

   
     return 1;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
}
     4d0:	26 96       	adiw	r28, 0x06	; 6
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	f8 94       	cli
     4d6:	de bf       	out	0x3e, r29	; 62
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	cd bf       	out	0x3d, r28	; 61
     4dc:	cf 91       	pop	r28
     4de:	df 91       	pop	r29
     4e0:	08 95       	ret

000004e2 <multy_16>:




void multy_16(int * sampl ,int num)
{ int i  ;
     4e2:	df 93       	push	r29
     4e4:	cf 93       	push	r28
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <multy_16+0x6>
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <multy_16+0x8>
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <multy_16+0xa>
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	8b 83       	std	Y+3, r24	; 0x03
     4f4:	7e 83       	std	Y+6, r23	; 0x06
     4f6:	6d 83       	std	Y+5, r22	; 0x05
   for (i=0;i<num;i++)
     4f8:	1a 82       	std	Y+2, r1	; 0x02
     4fa:	19 82       	std	Y+1, r1	; 0x01
     4fc:	18 c0       	rjmp	.+48     	; 0x52e <multy_16+0x4c>
   
   {
        *sampl ++ =(*sampl )*16; 
     4fe:	eb 81       	ldd	r30, Y+3	; 0x03
     500:	fc 81       	ldd	r31, Y+4	; 0x04
     502:	80 81       	ld	r24, Z
     504:	91 81       	ldd	r25, Z+1	; 0x01
     506:	82 95       	swap	r24
     508:	92 95       	swap	r25
     50a:	90 7f       	andi	r25, 0xF0	; 240
     50c:	98 27       	eor	r25, r24
     50e:	80 7f       	andi	r24, 0xF0	; 240
     510:	98 27       	eor	r25, r24
     512:	eb 81       	ldd	r30, Y+3	; 0x03
     514:	fc 81       	ldd	r31, Y+4	; 0x04
     516:	91 83       	std	Z+1, r25	; 0x01
     518:	80 83       	st	Z, r24
     51a:	8b 81       	ldd	r24, Y+3	; 0x03
     51c:	9c 81       	ldd	r25, Y+4	; 0x04
     51e:	02 96       	adiw	r24, 0x02	; 2
     520:	9c 83       	std	Y+4, r25	; 0x04
     522:	8b 83       	std	Y+3, r24	; 0x03



void multy_16(int * sampl ,int num)
{ int i  ;
   for (i=0;i<num;i++)
     524:	89 81       	ldd	r24, Y+1	; 0x01
     526:	9a 81       	ldd	r25, Y+2	; 0x02
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	9a 83       	std	Y+2, r25	; 0x02
     52c:	89 83       	std	Y+1, r24	; 0x01
     52e:	29 81       	ldd	r18, Y+1	; 0x01
     530:	3a 81       	ldd	r19, Y+2	; 0x02
     532:	8d 81       	ldd	r24, Y+5	; 0x05
     534:	9e 81       	ldd	r25, Y+6	; 0x06
     536:	28 17       	cp	r18, r24
     538:	39 07       	cpc	r19, r25
     53a:	0c f3       	brlt	.-62     	; 0x4fe <multy_16+0x1c>
   {
        *sampl ++ =(*sampl )*16; 
    
   
   }
}
     53c:	26 96       	adiw	r28, 0x06	; 6
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
     548:	cf 91       	pop	r28
     54a:	df 91       	pop	r29
     54c:	08 95       	ret

0000054e <cross_zero>:
//   direct calc 
int  cross_zero (int * sampl,int num)

{
     54e:	df 93       	push	r29
     550:	cf 93       	push	r28
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	2b 97       	sbiw	r28, 0x0b	; 11
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
     562:	99 87       	std	Y+9, r25	; 0x09
     564:	88 87       	std	Y+8, r24	; 0x08
     566:	7b 87       	std	Y+11, r23	; 0x0b
     568:	6a 87       	std	Y+10, r22	; 0x0a
int sam,i ;
  char   present;
static int temp_sample=1;

 unsigned int sum=0;
     56a:	1a 82       	std	Y+2, r1	; 0x02
     56c:	19 82       	std	Y+1, r1	; 0x01
for (i=0;i<num;i++)
     56e:	1d 82       	std	Y+5, r1	; 0x05
     570:	1c 82       	std	Y+4, r1	; 0x04
     572:	37 c0       	rjmp	.+110    	; 0x5e2 <cross_zero+0x94>
    *if( temp_sample!=present)
    *sum++;
    *temp_sample=present;
    *}
    */
 {     sam=* sampl++;
     574:	e8 85       	ldd	r30, Y+8	; 0x08
     576:	f9 85       	ldd	r31, Y+9	; 0x09
     578:	80 81       	ld	r24, Z
     57a:	91 81       	ldd	r25, Z+1	; 0x01
     57c:	9f 83       	std	Y+7, r25	; 0x07
     57e:	8e 83       	std	Y+6, r24	; 0x06
     580:	88 85       	ldd	r24, Y+8	; 0x08
     582:	99 85       	ldd	r25, Y+9	; 0x09
     584:	02 96       	adiw	r24, 0x02	; 2
     586:	99 87       	std	Y+9, r25	; 0x09
     588:	88 87       	std	Y+8, r24	; 0x08
	if ( sam>CROSS_GAP)
     58a:	8e 81       	ldd	r24, Y+6	; 0x06
     58c:	9f 81       	ldd	r25, Y+7	; 0x07
     58e:	18 16       	cp	r1, r24
     590:	19 06       	cpc	r1, r25
     592:	1c f4       	brge	.+6      	; 0x59a <cross_zero+0x4c>
      present=1;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	8b 83       	std	Y+3, r24	; 0x03
     598:	06 c0       	rjmp	.+12     	; 0x5a6 <cross_zero+0x58>
   else
      {
	  if ( sam<-CROSS_GAP)
     59a:	8e 81       	ldd	r24, Y+6	; 0x06
     59c:	9f 81       	ldd	r25, Y+7	; 0x07
     59e:	99 23       	and	r25, r25
     5a0:	dc f4       	brge	.+54     	; 0x5d8 <cross_zero+0x8a>
        present =-1;
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	8b 83       	std	Y+3, r24	; 0x03
	else  continue;    //上下不靠直接返回下一次循环，本次不判断了。
// goto end ;
	   }
       
      
   if( temp_sample!=present)
     5a6:	8b 81       	ldd	r24, Y+3	; 0x03
     5a8:	28 2f       	mov	r18, r24
     5aa:	33 27       	eor	r19, r19
     5ac:	27 fd       	sbrc	r18, 7
     5ae:	30 95       	com	r19
     5b0:	80 91 7f 00 	lds	r24, 0x007F
     5b4:	90 91 80 00 	lds	r25, 0x0080
     5b8:	28 17       	cp	r18, r24
     5ba:	39 07       	cpc	r19, r25
     5bc:	29 f0       	breq	.+10     	; 0x5c8 <cross_zero+0x7a>
   sum++;
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	9a 81       	ldd	r25, Y+2	; 0x02
     5c2:	01 96       	adiw	r24, 0x01	; 1
     5c4:	9a 83       	std	Y+2, r25	; 0x02
     5c6:	89 83       	std	Y+1, r24	; 0x01
   temp_sample=present;
     5c8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ca:	99 27       	eor	r25, r25
     5cc:	87 fd       	sbrc	r24, 7
     5ce:	90 95       	com	r25
     5d0:	90 93 80 00 	sts	0x0080, r25
     5d4:	80 93 7f 00 	sts	0x007F, r24
int sam,i ;
  char   present;
static int temp_sample=1;

 unsigned int sum=0;
for (i=0;i<num;i++)
     5d8:	8c 81       	ldd	r24, Y+4	; 0x04
     5da:	9d 81       	ldd	r25, Y+5	; 0x05
     5dc:	01 96       	adiw	r24, 0x01	; 1
     5de:	9d 83       	std	Y+5, r25	; 0x05
     5e0:	8c 83       	std	Y+4, r24	; 0x04
     5e2:	2c 81       	ldd	r18, Y+4	; 0x04
     5e4:	3d 81       	ldd	r19, Y+5	; 0x05
     5e6:	8a 85       	ldd	r24, Y+10	; 0x0a
     5e8:	9b 85       	ldd	r25, Y+11	; 0x0b
     5ea:	28 17       	cp	r18, r24
     5ec:	39 07       	cpc	r19, r25
     5ee:	14 f2       	brlt	.-124    	; 0x574 <cross_zero+0x26>
   temp_sample=present;
   
	//end:  ;
  }	

   return sum ;
     5f0:	89 81       	ldd	r24, Y+1	; 0x01
     5f2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     5f4:	2b 96       	adiw	r28, 0x0b	; 11
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	cf 91       	pop	r28
     602:	df 91       	pop	r29
     604:	08 95       	ret

00000606 <energy_do>:
 long unsigned int energy_do(int * sample,int num)
{  int i=0;long unsigned int energy=0;
     606:	df 93       	push	r29
     608:	cf 93       	push	r28
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	2a 97       	sbiw	r28, 0x0a	; 10
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	98 87       	std	Y+8, r25	; 0x08
     61c:	8f 83       	std	Y+7, r24	; 0x07
     61e:	7a 87       	std	Y+10, r23	; 0x0a
     620:	69 87       	std	Y+9, r22	; 0x09
     622:	1e 82       	std	Y+6, r1	; 0x06
     624:	1d 82       	std	Y+5, r1	; 0x05
     626:	19 82       	std	Y+1, r1	; 0x01
     628:	1a 82       	std	Y+2, r1	; 0x02
     62a:	1b 82       	std	Y+3, r1	; 0x03
     62c:	1c 82       	std	Y+4, r1	; 0x04
    
  for (i=0;i<num;i++)
     62e:	1e 82       	std	Y+6, r1	; 0x06
     630:	1d 82       	std	Y+5, r1	; 0x05
     632:	2b c0       	rjmp	.+86     	; 0x68a <energy_do+0x84>
   
   { 
   
   
   energy+=  (* sample)*(* sample++);
     634:	ef 81       	ldd	r30, Y+7	; 0x07
     636:	f8 85       	ldd	r31, Y+8	; 0x08
     638:	20 81       	ld	r18, Z
     63a:	31 81       	ldd	r19, Z+1	; 0x01
     63c:	ef 81       	ldd	r30, Y+7	; 0x07
     63e:	f8 85       	ldd	r31, Y+8	; 0x08
     640:	80 81       	ld	r24, Z
     642:	91 81       	ldd	r25, Z+1	; 0x01
     644:	ac 01       	movw	r20, r24
     646:	24 9f       	mul	r18, r20
     648:	c0 01       	movw	r24, r0
     64a:	25 9f       	mul	r18, r21
     64c:	90 0d       	add	r25, r0
     64e:	34 9f       	mul	r19, r20
     650:	90 0d       	add	r25, r0
     652:	11 24       	eor	r1, r1
     654:	9c 01       	movw	r18, r24
     656:	44 27       	eor	r20, r20
     658:	37 fd       	sbrc	r19, 7
     65a:	40 95       	com	r20
     65c:	54 2f       	mov	r21, r20
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	ab 81       	ldd	r26, Y+3	; 0x03
     664:	bc 81       	ldd	r27, Y+4	; 0x04
     666:	82 0f       	add	r24, r18
     668:	93 1f       	adc	r25, r19
     66a:	a4 1f       	adc	r26, r20
     66c:	b5 1f       	adc	r27, r21
     66e:	89 83       	std	Y+1, r24	; 0x01
     670:	9a 83       	std	Y+2, r25	; 0x02
     672:	ab 83       	std	Y+3, r26	; 0x03
     674:	bc 83       	std	Y+4, r27	; 0x04
     676:	8f 81       	ldd	r24, Y+7	; 0x07
     678:	98 85       	ldd	r25, Y+8	; 0x08
     67a:	02 96       	adiw	r24, 0x02	; 2
     67c:	98 87       	std	Y+8, r25	; 0x08
     67e:	8f 83       	std	Y+7, r24	; 0x07
   return sum ;
}
 long unsigned int energy_do(int * sample,int num)
{  int i=0;long unsigned int energy=0;
    
  for (i=0;i<num;i++)
     680:	8d 81       	ldd	r24, Y+5	; 0x05
     682:	9e 81       	ldd	r25, Y+6	; 0x06
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	9e 83       	std	Y+6, r25	; 0x06
     688:	8d 83       	std	Y+5, r24	; 0x05
     68a:	2d 81       	ldd	r18, Y+5	; 0x05
     68c:	3e 81       	ldd	r19, Y+6	; 0x06
     68e:	89 85       	ldd	r24, Y+9	; 0x09
     690:	9a 85       	ldd	r25, Y+10	; 0x0a
     692:	28 17       	cp	r18, r24
     694:	39 07       	cpc	r19, r25
     696:	74 f2       	brlt	.-100    	; 0x634 <energy_do+0x2e>
   { 
   
   
   energy+=  (* sample)*(* sample++);
   }
  return energy;
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	9a 81       	ldd	r25, Y+2	; 0x02
     69c:	ab 81       	ldd	r26, Y+3	; 0x03
     69e:	bc 81       	ldd	r27, Y+4	; 0x04
}
     6a0:	bc 01       	movw	r22, r24
     6a2:	cd 01       	movw	r24, r26
     6a4:	2a 96       	adiw	r28, 0x0a	; 10
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	cd bf       	out	0x3d, r28	; 61
     6b0:	cf 91       	pop	r28
     6b2:	df 91       	pop	r29
     6b4:	08 95       	ret

000006b6 <fft_input_no_window>:

void fft_input_no_window(int * sample,complex_t *dest,int num)


{
     6b6:	df 93       	push	r29
     6b8:	cf 93       	push	r28
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
     6be:	28 97       	sbiw	r28, 0x08	; 8
     6c0:	0f b6       	in	r0, 0x3f	; 63
     6c2:	f8 94       	cli
     6c4:	de bf       	out	0x3e, r29	; 62
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	cd bf       	out	0x3d, r28	; 61
     6ca:	9c 83       	std	Y+4, r25	; 0x04
     6cc:	8b 83       	std	Y+3, r24	; 0x03
     6ce:	7e 83       	std	Y+6, r23	; 0x06
     6d0:	6d 83       	std	Y+5, r22	; 0x05
     6d2:	58 87       	std	Y+8, r21	; 0x08
     6d4:	4f 83       	std	Y+7, r20	; 0x07


 int i=0;
     6d6:	1a 82       	std	Y+2, r1	; 0x02
     6d8:	19 82       	std	Y+1, r1	; 0x01

  for (i=0;i<num;i++)
     6da:	1a 82       	std	Y+2, r1	; 0x02
     6dc:	19 82       	std	Y+1, r1	; 0x01
     6de:	1f c0       	rjmp	.+62     	; 0x71e <fft_input_no_window+0x68>
   
   { 
   
    dest->r = * sample  ;
     6e0:	eb 81       	ldd	r30, Y+3	; 0x03
     6e2:	fc 81       	ldd	r31, Y+4	; 0x04
     6e4:	80 81       	ld	r24, Z
     6e6:	91 81       	ldd	r25, Z+1	; 0x01
     6e8:	ed 81       	ldd	r30, Y+5	; 0x05
     6ea:	fe 81       	ldd	r31, Y+6	; 0x06
     6ec:	91 83       	std	Z+1, r25	; 0x01
     6ee:	80 83       	st	Z, r24
     dest->i = * sample++ ;
     6f0:	eb 81       	ldd	r30, Y+3	; 0x03
     6f2:	fc 81       	ldd	r31, Y+4	; 0x04
     6f4:	80 81       	ld	r24, Z
     6f6:	91 81       	ldd	r25, Z+1	; 0x01
     6f8:	ed 81       	ldd	r30, Y+5	; 0x05
     6fa:	fe 81       	ldd	r31, Y+6	; 0x06
     6fc:	93 83       	std	Z+3, r25	; 0x03
     6fe:	82 83       	std	Z+2, r24	; 0x02
     700:	8b 81       	ldd	r24, Y+3	; 0x03
     702:	9c 81       	ldd	r25, Y+4	; 0x04
     704:	02 96       	adiw	r24, 0x02	; 2
     706:	9c 83       	std	Y+4, r25	; 0x04
     708:	8b 83       	std	Y+3, r24	; 0x03
   dest++;
     70a:	8d 81       	ldd	r24, Y+5	; 0x05
     70c:	9e 81       	ldd	r25, Y+6	; 0x06
     70e:	04 96       	adiw	r24, 0x04	; 4
     710:	9e 83       	std	Y+6, r25	; 0x06
     712:	8d 83       	std	Y+5, r24	; 0x05
{


 int i=0;

  for (i=0;i<num;i++)
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	9a 81       	ldd	r25, Y+2	; 0x02
     718:	01 96       	adiw	r24, 0x01	; 1
     71a:	9a 83       	std	Y+2, r25	; 0x02
     71c:	89 83       	std	Y+1, r24	; 0x01
     71e:	29 81       	ldd	r18, Y+1	; 0x01
     720:	3a 81       	ldd	r19, Y+2	; 0x02
     722:	8f 81       	ldd	r24, Y+7	; 0x07
     724:	98 85       	ldd	r25, Y+8	; 0x08
     726:	28 17       	cp	r18, r24
     728:	39 07       	cpc	r19, r25
     72a:	d4 f2       	brlt	.-76     	; 0x6e0 <fft_input_no_window+0x2a>
     dest->i = * sample++ ;
   dest++;
   }


}
     72c:	28 96       	adiw	r28, 0x08	; 8
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
     738:	cf 91       	pop	r28
     73a:	df 91       	pop	r29
     73c:	08 95       	ret

0000073e <copy_buff>:

copy_buff(int * source,int * dest ,int num)



{
     73e:	df 93       	push	r29
     740:	cf 93       	push	r28
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	2a 97       	sbiw	r28, 0x0a	; 10
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
     752:	9c 83       	std	Y+4, r25	; 0x04
     754:	8b 83       	std	Y+3, r24	; 0x03
     756:	7e 83       	std	Y+6, r23	; 0x06
     758:	6d 83       	std	Y+5, r22	; 0x05
     75a:	58 87       	std	Y+8, r21	; 0x08
     75c:	4f 83       	std	Y+7, r20	; 0x07


 int i=0;
     75e:	1a 82       	std	Y+2, r1	; 0x02
     760:	19 82       	std	Y+1, r1	; 0x01

  for (i=0;i<num;i++)
     762:	1a 82       	std	Y+2, r1	; 0x02
     764:	19 82       	std	Y+1, r1	; 0x01
     766:	17 c0       	rjmp	.+46     	; 0x796 <copy_buff+0x58>
   
   { 
   
    *dest++ = * source++ ;
     768:	eb 81       	ldd	r30, Y+3	; 0x03
     76a:	fc 81       	ldd	r31, Y+4	; 0x04
     76c:	80 81       	ld	r24, Z
     76e:	91 81       	ldd	r25, Z+1	; 0x01
     770:	ed 81       	ldd	r30, Y+5	; 0x05
     772:	fe 81       	ldd	r31, Y+6	; 0x06
     774:	91 83       	std	Z+1, r25	; 0x01
     776:	80 83       	st	Z, r24
     778:	8d 81       	ldd	r24, Y+5	; 0x05
     77a:	9e 81       	ldd	r25, Y+6	; 0x06
     77c:	02 96       	adiw	r24, 0x02	; 2
     77e:	9e 83       	std	Y+6, r25	; 0x06
     780:	8d 83       	std	Y+5, r24	; 0x05
     782:	8b 81       	ldd	r24, Y+3	; 0x03
     784:	9c 81       	ldd	r25, Y+4	; 0x04
     786:	02 96       	adiw	r24, 0x02	; 2
     788:	9c 83       	std	Y+4, r25	; 0x04
     78a:	8b 83       	std	Y+3, r24	; 0x03
{


 int i=0;

  for (i=0;i<num;i++)
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	9a 81       	ldd	r25, Y+2	; 0x02
     790:	01 96       	adiw	r24, 0x01	; 1
     792:	9a 83       	std	Y+2, r25	; 0x02
     794:	89 83       	std	Y+1, r24	; 0x01
     796:	29 81       	ldd	r18, Y+1	; 0x01
     798:	3a 81       	ldd	r19, Y+2	; 0x02
     79a:	8f 81       	ldd	r24, Y+7	; 0x07
     79c:	98 85       	ldd	r25, Y+8	; 0x08
     79e:	28 17       	cp	r18, r24
     7a0:	39 07       	cpc	r19, r25
     7a2:	14 f3       	brlt	.-60     	; 0x768 <copy_buff+0x2a>
    
   
   }


}
     7a4:	2a 96       	adiw	r28, 0x0a	; 10
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	cf 91       	pop	r28
     7b2:	df 91       	pop	r29
     7b4:	08 95       	ret

000007b6 <judge>:


 

unsigned char  judge( uint16_t * spectrum)
{
     7b6:	df 93       	push	r29
     7b8:	cf 93       	push	r28
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	2d 97       	sbiw	r28, 0x0d	; 13
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
     7ca:	9a 87       	std	Y+10, r25	; 0x0a
     7cc:	89 87       	std	Y+9, r24	; 0x09
unsigned long int middle ;

float whole;
//float scale,devia,deviation;

whole=SUM_SPECTRUM(spectrum+1,FFT_N/2-1);
     7ce:	89 85       	ldd	r24, Y+9	; 0x09
     7d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7d2:	02 96       	adiw	r24, 0x02	; 2
     7d4:	6f e3       	ldi	r22, 0x3F	; 63
     7d6:	0e 94 2f 01 	call	0x25e	; 0x25e <SUM_SPECTRUM>
     7da:	dc 01       	movw	r26, r24
     7dc:	cb 01       	movw	r24, r22
     7de:	bc 01       	movw	r22, r24
     7e0:	cd 01       	movw	r24, r26
     7e2:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__floatunsisf>
     7e6:	dc 01       	movw	r26, r24
     7e8:	cb 01       	movw	r24, r22
     7ea:	89 83       	std	Y+1, r24	; 0x01
     7ec:	9a 83       	std	Y+2, r25	; 0x02
     7ee:	ab 83       	std	Y+3, r26	; 0x03
     7f0:	bc 83       	std	Y+4, r27	; 0x04
//low=mean(spectrum+1,18);
scale=SUM_SPECTRUM(spectrum+4,21);//4---25//  780Hz 
     7f2:	89 85       	ldd	r24, Y+9	; 0x09
     7f4:	9a 85       	ldd	r25, Y+10	; 0x0a
     7f6:	08 96       	adiw	r24, 0x08	; 8
     7f8:	65 e1       	ldi	r22, 0x15	; 21
     7fa:	0e 94 2f 01 	call	0x25e	; 0x25e <SUM_SPECTRUM>
     7fe:	dc 01       	movw	r26, r24
     800:	cb 01       	movw	r24, r22
     802:	bc 01       	movw	r22, r24
     804:	cd 01       	movw	r24, r26
     806:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__floatunsisf>
     80a:	dc 01       	movw	r26, r24
     80c:	cb 01       	movw	r24, r22
     80e:	80 93 a4 05 	sts	0x05A4, r24
     812:	90 93 a5 05 	sts	0x05A5, r25
     816:	a0 93 a6 05 	sts	0x05A6, r26
     81a:	b0 93 a7 05 	sts	0x05A7, r27
//high=mean(spectrum+50,10);//50---60

//scale=middle/low;
 scale=scale/whole;
     81e:	80 91 a4 05 	lds	r24, 0x05A4
     822:	90 91 a5 05 	lds	r25, 0x05A5
     826:	a0 91 a6 05 	lds	r26, 0x05A6
     82a:	b0 91 a7 05 	lds	r27, 0x05A7
     82e:	bc 01       	movw	r22, r24
     830:	cd 01       	movw	r24, r26
     832:	29 81       	ldd	r18, Y+1	; 0x01
     834:	3a 81       	ldd	r19, Y+2	; 0x02
     836:	4b 81       	ldd	r20, Y+3	; 0x03
     838:	5c 81       	ldd	r21, Y+4	; 0x04
     83a:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
     83e:	dc 01       	movw	r26, r24
     840:	cb 01       	movw	r24, r22
     842:	80 93 a4 05 	sts	0x05A4, r24
     846:	90 93 a5 05 	sts	0x05A5, r25
     84a:	a0 93 a6 05 	sts	0x05A6, r26
     84e:	b0 93 a7 05 	sts	0x05A7, r27
//devia=max/high;
//if (scale >1.5&&devia<2.5&&deviation<3)
     // usart_write(snore,10);	
	 if (scale>0.3&&scale<0.55)
     852:	80 91 a4 05 	lds	r24, 0x05A4
     856:	90 91 a5 05 	lds	r25, 0x05A5
     85a:	a0 91 a6 05 	lds	r26, 0x05A6
     85e:	b0 91 a7 05 	lds	r27, 0x05A7
     862:	1d 86       	std	Y+13, r1	; 0x0d
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	2a e9       	ldi	r18, 0x9A	; 154
     86a:	39 e9       	ldi	r19, 0x99	; 153
     86c:	49 e9       	ldi	r20, 0x99	; 153
     86e:	5e e3       	ldi	r21, 0x3E	; 62
     870:	0e 94 ed 1a 	call	0x35da	; 0x35da <__gtsf2>
     874:	18 16       	cp	r1, r24
     876:	14 f4       	brge	.+4      	; 0x87c <__stack+0x1d>
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	8d 87       	std	Y+13, r24	; 0x0d
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	9d 85       	ldd	r25, Y+13	; 0x0d
     880:	89 27       	eor	r24, r25
     882:	88 23       	and	r24, r24
     884:	e9 f4       	brne	.+58     	; 0x8c0 <__stack+0x61>
     886:	80 91 a4 05 	lds	r24, 0x05A4
     88a:	90 91 a5 05 	lds	r25, 0x05A5
     88e:	a0 91 a6 05 	lds	r26, 0x05A6
     892:	b0 91 a7 05 	lds	r27, 0x05A7
     896:	1c 86       	std	Y+12, r1	; 0x0c
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	2d ec       	ldi	r18, 0xCD	; 205
     89e:	3c ec       	ldi	r19, 0xCC	; 204
     8a0:	4c e0       	ldi	r20, 0x0C	; 12
     8a2:	5f e3       	ldi	r21, 0x3F	; 63
     8a4:	0e 94 4d 1b 	call	0x369a	; 0x369a <__ltsf2>
     8a8:	88 23       	and	r24, r24
     8aa:	14 f4       	brge	.+4      	; 0x8b0 <__stack+0x51>
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	8c 87       	std	Y+12, r24	; 0x0c
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	9c 85       	ldd	r25, Y+12	; 0x0c
     8b4:	89 27       	eor	r24, r25
     8b6:	88 23       	and	r24, r24
     8b8:	19 f4       	brne	.+6      	; 0x8c0 <__stack+0x61>
   return 1;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	8b 87       	std	Y+11, r24	; 0x0b
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <__stack+0x63>
   else return 0;
     8c0:	1b 86       	std	Y+11, r1	; 0x0b
     8c2:	8b 85       	ldd	r24, Y+11	; 0x0b

}
     8c4:	2d 96       	adiw	r28, 0x0d	; 13
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	cf 91       	pop	r28
     8d2:	df 91       	pop	r29
     8d4:	08 95       	ret

000008d6 <write>:
	  void    write( unsigned char turn) 
{
     8d6:	df 93       	push	r29
     8d8:	cf 93       	push	r28
     8da:	0f 92       	push	r0
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
     8e0:	89 83       	std	Y+1, r24	; 0x01

  sendpang=turn;
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	80 93 94 01 	sts	0x0194, r24
  
  send_c(*(sample[0]) );
     8e8:	80 91 a8 05 	lds	r24, 0x05A8
     8ec:	90 91 a9 05 	lds	r25, 0x05A9
     8f0:	0e 94 aa 00 	call	0x154	; 0x154 <send_c>
  posi_uart=1;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	90 93 93 01 	sts	0x0193, r25
     8fc:	80 93 92 01 	sts	0x0192, r24
   
}
     900:	0f 90       	pop	r0
     902:	cf 91       	pop	r28
     904:	df 91       	pop	r29
     906:	08 95       	ret

00000908 <correction>:

  

 void correction( int * dest,int * source,int num )
 {
     908:	df 93       	push	r29
     90a:	cf 93       	push	r28
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	28 97       	sbiw	r28, 0x08	; 8
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	8b 83       	std	Y+3, r24	; 0x03
     920:	7e 83       	std	Y+6, r23	; 0x06
     922:	6d 83       	std	Y+5, r22	; 0x05
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	4f 83       	std	Y+7, r20	; 0x07
 int i=0;
     928:	1a 82       	std	Y+2, r1	; 0x02
     92a:	19 82       	std	Y+1, r1	; 0x01

  for (i=0;i<num;i++)
     92c:	1a 82       	std	Y+2, r1	; 0x02
     92e:	19 82       	std	Y+1, r1	; 0x01
     930:	23 c0       	rjmp	.+70     	; 0x978 <correction+0x70>
   
   { 
   
    (*dest)  = (  * dest++)*(* source++) ;
     932:	eb 81       	ldd	r30, Y+3	; 0x03
     934:	fc 81       	ldd	r31, Y+4	; 0x04
     936:	20 81       	ld	r18, Z
     938:	31 81       	ldd	r19, Z+1	; 0x01
     93a:	ed 81       	ldd	r30, Y+5	; 0x05
     93c:	fe 81       	ldd	r31, Y+6	; 0x06
     93e:	80 81       	ld	r24, Z
     940:	91 81       	ldd	r25, Z+1	; 0x01
     942:	ac 01       	movw	r20, r24
     944:	24 9f       	mul	r18, r20
     946:	c0 01       	movw	r24, r0
     948:	25 9f       	mul	r18, r21
     94a:	90 0d       	add	r25, r0
     94c:	34 9f       	mul	r19, r20
     94e:	90 0d       	add	r25, r0
     950:	11 24       	eor	r1, r1
     952:	eb 81       	ldd	r30, Y+3	; 0x03
     954:	fc 81       	ldd	r31, Y+4	; 0x04
     956:	91 83       	std	Z+1, r25	; 0x01
     958:	80 83       	st	Z, r24
     95a:	8b 81       	ldd	r24, Y+3	; 0x03
     95c:	9c 81       	ldd	r25, Y+4	; 0x04
     95e:	02 96       	adiw	r24, 0x02	; 2
     960:	9c 83       	std	Y+4, r25	; 0x04
     962:	8b 83       	std	Y+3, r24	; 0x03
     964:	8d 81       	ldd	r24, Y+5	; 0x05
     966:	9e 81       	ldd	r25, Y+6	; 0x06
     968:	02 96       	adiw	r24, 0x02	; 2
     96a:	9e 83       	std	Y+6, r25	; 0x06
     96c:	8d 83       	std	Y+5, r24	; 0x05

 void correction( int * dest,int * source,int num )
 {
 int i=0;

  for (i=0;i<num;i++)
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	9a 81       	ldd	r25, Y+2	; 0x02
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	9a 83       	std	Y+2, r25	; 0x02
     976:	89 83       	std	Y+1, r24	; 0x01
     978:	29 81       	ldd	r18, Y+1	; 0x01
     97a:	3a 81       	ldd	r19, Y+2	; 0x02
     97c:	8f 81       	ldd	r24, Y+7	; 0x07
     97e:	98 85       	ldd	r25, Y+8	; 0x08
     980:	28 17       	cp	r18, r24
     982:	39 07       	cpc	r19, r25
     984:	b4 f2       	brlt	.-84     	; 0x932 <correction+0x2a>
    (*dest)  = (  * dest++)*(* source++) ;
    
   
   }
 
 }
     986:	28 96       	adiw	r28, 0x08	; 8
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
     992:	cf 91       	pop	r28
     994:	df 91       	pop	r29
     996:	08 95       	ret

00000998 <correlation>:
 
 
 void correlation( int * dest,int * source,int num )
 {
     998:	df 93       	push	r29
     99a:	cf 93       	push	r28
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
     9a0:	28 97       	sbiw	r28, 0x08	; 8
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	9c 83       	std	Y+4, r25	; 0x04
     9ae:	8b 83       	std	Y+3, r24	; 0x03
     9b0:	7e 83       	std	Y+6, r23	; 0x06
     9b2:	6d 83       	std	Y+5, r22	; 0x05
     9b4:	58 87       	std	Y+8, r21	; 0x08
     9b6:	4f 83       	std	Y+7, r20	; 0x07
 int i=0;
     9b8:	1a 82       	std	Y+2, r1	; 0x02
     9ba:	19 82       	std	Y+1, r1	; 0x01

  for (i=3;i<num;i++)
     9bc:	83 e0       	ldi	r24, 0x03	; 3
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	9a 83       	std	Y+2, r25	; 0x02
     9c2:	89 83       	std	Y+1, r24	; 0x01
     9c4:	1d c0       	rjmp	.+58     	; 0xa00 <correlation+0x68>
   
   { 
   
    (*dest)  = (  * dest++)+(* source++) ;
     9c6:	eb 81       	ldd	r30, Y+3	; 0x03
     9c8:	fc 81       	ldd	r31, Y+4	; 0x04
     9ca:	20 81       	ld	r18, Z
     9cc:	31 81       	ldd	r19, Z+1	; 0x01
     9ce:	ed 81       	ldd	r30, Y+5	; 0x05
     9d0:	fe 81       	ldd	r31, Y+6	; 0x06
     9d2:	80 81       	ld	r24, Z
     9d4:	91 81       	ldd	r25, Z+1	; 0x01
     9d6:	82 0f       	add	r24, r18
     9d8:	93 1f       	adc	r25, r19
     9da:	eb 81       	ldd	r30, Y+3	; 0x03
     9dc:	fc 81       	ldd	r31, Y+4	; 0x04
     9de:	91 83       	std	Z+1, r25	; 0x01
     9e0:	80 83       	st	Z, r24
     9e2:	8b 81       	ldd	r24, Y+3	; 0x03
     9e4:	9c 81       	ldd	r25, Y+4	; 0x04
     9e6:	02 96       	adiw	r24, 0x02	; 2
     9e8:	9c 83       	std	Y+4, r25	; 0x04
     9ea:	8b 83       	std	Y+3, r24	; 0x03
     9ec:	8d 81       	ldd	r24, Y+5	; 0x05
     9ee:	9e 81       	ldd	r25, Y+6	; 0x06
     9f0:	02 96       	adiw	r24, 0x02	; 2
     9f2:	9e 83       	std	Y+6, r25	; 0x06
     9f4:	8d 83       	std	Y+5, r24	; 0x05
 
 void correlation( int * dest,int * source,int num )
 {
 int i=0;

  for (i=3;i<num;i++)
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	9a 81       	ldd	r25, Y+2	; 0x02
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	9a 83       	std	Y+2, r25	; 0x02
     9fe:	89 83       	std	Y+1, r24	; 0x01
     a00:	29 81       	ldd	r18, Y+1	; 0x01
     a02:	3a 81       	ldd	r19, Y+2	; 0x02
     a04:	8f 81       	ldd	r24, Y+7	; 0x07
     a06:	98 85       	ldd	r25, Y+8	; 0x08
     a08:	28 17       	cp	r18, r24
     a0a:	39 07       	cpc	r19, r25
     a0c:	e4 f2       	brlt	.-72     	; 0x9c6 <correlation+0x2e>
    (*dest)  = (  * dest++)+(* source++) ;
    
   
   }
 
 }
     a0e:	28 96       	adiw	r28, 0x08	; 8
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	de bf       	out	0x3e, r29	; 62
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	cd bf       	out	0x3d, r28	; 61
     a1a:	cf 91       	pop	r28
     a1c:	df 91       	pop	r29
     a1e:	08 95       	ret

00000a20 <adjust>:
void  adjust(  judge_content * cont_po)
 
 {
     a20:	df 93       	push	r29
     a22:	cf 93       	push	r28
     a24:	00 d0       	rcall	.+0      	; 0xa26 <adjust+0x6>
     a26:	00 d0       	rcall	.+0      	; 0xa28 <adjust+0x8>
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	9c 83       	std	Y+4, r25	; 0x04
     a2e:	8b 83       	std	Y+3, r24	; 0x03
     unsigned char i,temp=0;
     a30:	19 82       	std	Y+1, r1	; 0x01
	 //peak_index[3] 当前帧；peak_index[0]>  前第三帧
         if ( (cont_po->peak_index[3]>=4) &&(cont_po->peak_index[3]<=30)&&judge(spektrum) &&cont_po->energy<ENERGYover)//&& (judge(spektrum)>=30))// 156Hz < frequncy  < 20/32*1000Hz =667Hz 
     a32:	eb 81       	ldd	r30, Y+3	; 0x03
     a34:	fc 81       	ldd	r31, Y+4	; 0x04
     a36:	87 81       	ldd	r24, Z+7	; 0x07
     a38:	84 30       	cpi	r24, 0x04	; 4
     a3a:	08 f4       	brcc	.+2      	; 0xa3e <adjust+0x1e>
     a3c:	70 c0       	rjmp	.+224    	; 0xb1e <adjust+0xfe>
     a3e:	eb 81       	ldd	r30, Y+3	; 0x03
     a40:	fc 81       	ldd	r31, Y+4	; 0x04
     a42:	87 81       	ldd	r24, Z+7	; 0x07
     a44:	8f 31       	cpi	r24, 0x1F	; 31
     a46:	08 f0       	brcs	.+2      	; 0xa4a <adjust+0x2a>
     a48:	6a c0       	rjmp	.+212    	; 0xb1e <adjust+0xfe>
     a4a:	84 e2       	ldi	r24, 0x24	; 36
     a4c:	95 e0       	ldi	r25, 0x05	; 5
     a4e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <judge>
     a52:	88 23       	and	r24, r24
     a54:	09 f4       	brne	.+2      	; 0xa58 <adjust+0x38>
     a56:	63 c0       	rjmp	.+198    	; 0xb1e <adjust+0xfe>
     a58:	eb 81       	ldd	r30, Y+3	; 0x03
     a5a:	fc 81       	ldd	r31, Y+4	; 0x04
     a5c:	80 85       	ldd	r24, Z+8	; 0x08
     a5e:	91 85       	ldd	r25, Z+9	; 0x09
     a60:	a2 85       	ldd	r26, Z+10	; 0x0a
     a62:	b3 85       	ldd	r27, Z+11	; 0x0b
     a64:	80 30       	cpi	r24, 0x00	; 0
     a66:	2d e2       	ldi	r18, 0x2D	; 45
     a68:	92 07       	cpc	r25, r18
     a6a:	21 e3       	ldi	r18, 0x31	; 49
     a6c:	a2 07       	cpc	r26, r18
     a6e:	21 e0       	ldi	r18, 0x01	; 1
     a70:	b2 07       	cpc	r27, r18
     a72:	08 f0       	brcs	.+2      	; 0xa76 <adjust+0x56>
     a74:	54 c0       	rjmp	.+168    	; 0xb1e <adjust+0xfe>
		 
			{
					     cont_po->flg.pre_flag3=1;//当前帧合格
     a76:	eb 81       	ldd	r30, Y+3	; 0x03
     a78:	fc 81       	ldd	r31, Y+4	; 0x04
     a7a:	80 81       	ld	r24, Z
     a7c:	88 60       	ori	r24, 0x08	; 8
     a7e:	80 83       	st	Z, r24
						 
						     						   
						 temp=cont_po->flg.pre_flag3+cont_po->flg.pre_flag2+cont_po->flg.pre_flag1+cont_po->flg.pre_flag0;//连续4帧鼾声标标志的和。
     a80:	eb 81       	ldd	r30, Y+3	; 0x03
     a82:	fc 81       	ldd	r31, Y+4	; 0x04
     a84:	80 81       	ld	r24, Z
     a86:	86 95       	lsr	r24
     a88:	86 95       	lsr	r24
     a8a:	86 95       	lsr	r24
     a8c:	81 70       	andi	r24, 0x01	; 1
     a8e:	98 2f       	mov	r25, r24
     a90:	eb 81       	ldd	r30, Y+3	; 0x03
     a92:	fc 81       	ldd	r31, Y+4	; 0x04
     a94:	80 81       	ld	r24, Z
     a96:	86 95       	lsr	r24
     a98:	86 95       	lsr	r24
     a9a:	81 70       	andi	r24, 0x01	; 1
     a9c:	98 0f       	add	r25, r24
     a9e:	eb 81       	ldd	r30, Y+3	; 0x03
     aa0:	fc 81       	ldd	r31, Y+4	; 0x04
     aa2:	80 81       	ld	r24, Z
     aa4:	86 95       	lsr	r24
     aa6:	81 70       	andi	r24, 0x01	; 1
     aa8:	98 0f       	add	r25, r24
     aaa:	eb 81       	ldd	r30, Y+3	; 0x03
     aac:	fc 81       	ldd	r31, Y+4	; 0x04
     aae:	80 81       	ld	r24, Z
     ab0:	81 70       	andi	r24, 0x01	; 1
     ab2:	89 0f       	add	r24, r25
     ab4:	89 83       	std	Y+1, r24	; 0x01
					     if ( temp>=3)
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	83 30       	cpi	r24, 0x03	; 3
     aba:	08 f4       	brcc	.+2      	; 0xabe <adjust+0x9e>
     abc:	41 c0       	rjmp	.+130    	; 0xb40 <adjust+0x120>
					      {
						    cont_po->flg.snore_flag=1;//
     abe:	eb 81       	ldd	r30, Y+3	; 0x03
     ac0:	fc 81       	ldd	r31, Y+4	; 0x04
     ac2:	80 81       	ld	r24, Z
     ac4:	80 62       	ori	r24, 0x20	; 32
     ac6:	80 83       	st	Z, r24
							cont_po->flg.pitch_flg=0;
     ac8:	eb 81       	ldd	r30, Y+3	; 0x03
     aca:	fc 81       	ldd	r31, Y+4	; 0x04
     acc:	80 81       	ld	r24, Z
     ace:	8f 7e       	andi	r24, 0xEF	; 239
     ad0:	80 83       	st	Z, r24
							cont_po->count_pitch=0;
     ad2:	eb 81       	ldd	r30, Y+3	; 0x03
     ad4:	fc 81       	ldd	r31, Y+4	; 0x04
     ad6:	12 82       	std	Z+2, r1	; 0x02
							cont_po->flg.pre_flag0=0;
     ad8:	eb 81       	ldd	r30, Y+3	; 0x03
     ada:	fc 81       	ldd	r31, Y+4	; 0x04
     adc:	80 81       	ld	r24, Z
     ade:	8e 7f       	andi	r24, 0xFE	; 254
     ae0:	80 83       	st	Z, r24
							cont_po->flg.pre_flag1=0;
     ae2:	eb 81       	ldd	r30, Y+3	; 0x03
     ae4:	fc 81       	ldd	r31, Y+4	; 0x04
     ae6:	80 81       	ld	r24, Z
     ae8:	8d 7f       	andi	r24, 0xFD	; 253
     aea:	80 83       	st	Z, r24
							cont_po->flg.pre_flag2=0;
     aec:	eb 81       	ldd	r30, Y+3	; 0x03
     aee:	fc 81       	ldd	r31, Y+4	; 0x04
     af0:	80 81       	ld	r24, Z
     af2:	8b 7f       	andi	r24, 0xFB	; 251
     af4:	80 83       	st	Z, r24
							cont_po->flg.pre_flag3=0;
     af6:	eb 81       	ldd	r30, Y+3	; 0x03
     af8:	fc 81       	ldd	r31, Y+4	; 0x04
     afa:	80 81       	ld	r24, Z
     afc:	87 7f       	andi	r24, 0xF7	; 247
     afe:	80 83       	st	Z, r24
							cont_po->peak_index[0]=0;
     b00:	eb 81       	ldd	r30, Y+3	; 0x03
     b02:	fc 81       	ldd	r31, Y+4	; 0x04
     b04:	14 82       	std	Z+4, r1	; 0x04
							cont_po->peak_index[1]=0;
     b06:	eb 81       	ldd	r30, Y+3	; 0x03
     b08:	fc 81       	ldd	r31, Y+4	; 0x04
     b0a:	15 82       	std	Z+5, r1	; 0x05
							cont_po->peak_index[2]=0;
     b0c:	eb 81       	ldd	r30, Y+3	; 0x03
     b0e:	fc 81       	ldd	r31, Y+4	; 0x04
     b10:	16 82       	std	Z+6, r1	; 0x06
							cont_po->peak_index[3]=0;
     b12:	eb 81       	ldd	r30, Y+3	; 0x03
     b14:	fc 81       	ldd	r31, Y+4	; 0x04
     b16:	17 82       	std	Z+7, r1	; 0x07
							// usart_write(snore,10);	
							
							  wake();//位置改变才停止
     b18:	0e 94 db 10 	call	0x21b6	; 0x21b6 <wake>
     b1c:	11 c0       	rjmp	.+34     	; 0xb40 <adjust+0x120>
			}
	  else 
		//本次判断失败，				  
		 {
  
          cont_po->flg.pre_flag3=0;
     b1e:	eb 81       	ldd	r30, Y+3	; 0x03
     b20:	fc 81       	ldd	r31, Y+4	; 0x04
     b22:	80 81       	ld	r24, Z
     b24:	87 7f       	andi	r24, 0xF7	; 247
     b26:	80 83       	st	Z, r24
		cont_po->peak_index[0]=0;
     b28:	eb 81       	ldd	r30, Y+3	; 0x03
     b2a:	fc 81       	ldd	r31, Y+4	; 0x04
     b2c:	14 82       	std	Z+4, r1	; 0x04
		cont_po->peak_index[1]=0;
     b2e:	eb 81       	ldd	r30, Y+3	; 0x03
     b30:	fc 81       	ldd	r31, Y+4	; 0x04
     b32:	15 82       	std	Z+5, r1	; 0x05
		cont_po->peak_index[2]=0;
     b34:	eb 81       	ldd	r30, Y+3	; 0x03
     b36:	fc 81       	ldd	r31, Y+4	; 0x04
     b38:	16 82       	std	Z+6, r1	; 0x06
		cont_po->peak_index[3]=0;
     b3a:	eb 81       	ldd	r30, Y+3	; 0x03
     b3c:	fc 81       	ldd	r31, Y+4	; 0x04
     b3e:	17 82       	std	Z+7, r1	; 0x07
						 
         }    
		cont_po->flg.pre_flag0=cont_po->flg.pre_flag1;
     b40:	eb 81       	ldd	r30, Y+3	; 0x03
     b42:	fc 81       	ldd	r31, Y+4	; 0x04
     b44:	80 81       	ld	r24, Z
     b46:	86 95       	lsr	r24
     b48:	81 70       	andi	r24, 0x01	; 1
     b4a:	eb 81       	ldd	r30, Y+3	; 0x03
     b4c:	fc 81       	ldd	r31, Y+4	; 0x04
     b4e:	98 2f       	mov	r25, r24
     b50:	91 70       	andi	r25, 0x01	; 1
     b52:	80 81       	ld	r24, Z
     b54:	8e 7f       	andi	r24, 0xFE	; 254
     b56:	89 2b       	or	r24, r25
     b58:	80 83       	st	Z, r24
		cont_po->flg.pre_flag1=cont_po->flg.pre_flag2;
     b5a:	eb 81       	ldd	r30, Y+3	; 0x03
     b5c:	fc 81       	ldd	r31, Y+4	; 0x04
     b5e:	80 81       	ld	r24, Z
     b60:	86 95       	lsr	r24
     b62:	86 95       	lsr	r24
     b64:	81 70       	andi	r24, 0x01	; 1
     b66:	eb 81       	ldd	r30, Y+3	; 0x03
     b68:	fc 81       	ldd	r31, Y+4	; 0x04
     b6a:	81 70       	andi	r24, 0x01	; 1
     b6c:	98 2f       	mov	r25, r24
     b6e:	99 0f       	add	r25, r25
     b70:	80 81       	ld	r24, Z
     b72:	8d 7f       	andi	r24, 0xFD	; 253
     b74:	89 2b       	or	r24, r25
     b76:	80 83       	st	Z, r24
		cont_po->flg.pre_flag2=cont_po->flg.pre_flag3;
     b78:	eb 81       	ldd	r30, Y+3	; 0x03
     b7a:	fc 81       	ldd	r31, Y+4	; 0x04
     b7c:	80 81       	ld	r24, Z
     b7e:	86 95       	lsr	r24
     b80:	86 95       	lsr	r24
     b82:	86 95       	lsr	r24
     b84:	81 70       	andi	r24, 0x01	; 1
     b86:	eb 81       	ldd	r30, Y+3	; 0x03
     b88:	fc 81       	ldd	r31, Y+4	; 0x04
     b8a:	81 70       	andi	r24, 0x01	; 1
     b8c:	98 2f       	mov	r25, r24
     b8e:	99 0f       	add	r25, r25
     b90:	99 0f       	add	r25, r25
     b92:	80 81       	ld	r24, Z
     b94:	8b 7f       	andi	r24, 0xFB	; 251
     b96:	89 2b       	or	r24, r25
     b98:	80 83       	st	Z, r24
						 
							
		cont_po->peak_index[0]=cont_po->peak_index[1];
     b9a:	eb 81       	ldd	r30, Y+3	; 0x03
     b9c:	fc 81       	ldd	r31, Y+4	; 0x04
     b9e:	85 81       	ldd	r24, Z+5	; 0x05
     ba0:	eb 81       	ldd	r30, Y+3	; 0x03
     ba2:	fc 81       	ldd	r31, Y+4	; 0x04
     ba4:	84 83       	std	Z+4, r24	; 0x04
		cont_po->peak_index[1]=cont_po->peak_index[2];
     ba6:	eb 81       	ldd	r30, Y+3	; 0x03
     ba8:	fc 81       	ldd	r31, Y+4	; 0x04
     baa:	86 81       	ldd	r24, Z+6	; 0x06
     bac:	eb 81       	ldd	r30, Y+3	; 0x03
     bae:	fc 81       	ldd	r31, Y+4	; 0x04
     bb0:	85 83       	std	Z+5, r24	; 0x05
		cont_po->peak_index[2]=cont_po->peak_index[3];
     bb2:	eb 81       	ldd	r30, Y+3	; 0x03
     bb4:	fc 81       	ldd	r31, Y+4	; 0x04
     bb6:	87 81       	ldd	r24, Z+7	; 0x07
     bb8:	eb 81       	ldd	r30, Y+3	; 0x03
     bba:	fc 81       	ldd	r31, Y+4	; 0x04
     bbc:	86 83       	std	Z+6, r24	; 0x06
							 
				
 }
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <judge_active>:
 
 
 
 void judge_active( judge_content * cont_po,unsigned  char pipang)
 
 {               cont_po->nosignal_count=0;//lifeng 改 20130815
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <judge_active+0x6>
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	9a 83       	std	Y+2, r25	; 0x02
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	6b 83       	std	Y+3, r22	; 0x03
     bde:	e9 81       	ldd	r30, Y+1	; 0x01
     be0:	fa 81       	ldd	r31, Y+2	; 0x02
     be2:	13 82       	std	Z+3, r1	; 0x03
            if (cont_po->flg.pitch_flg==1)// 
     be4:	e9 81       	ldd	r30, Y+1	; 0x01
     be6:	fa 81       	ldd	r31, Y+2	; 0x02
     be8:	80 81       	ld	r24, Z
     bea:	80 71       	andi	r24, 0x10	; 16
     bec:	88 23       	and	r24, r24
     bee:	09 f4       	brne	.+2      	; 0xbf2 <judge_active+0x26>
     bf0:	41 c0       	rjmp	.+130    	; 0xc74 <judge_active+0xa8>
                 {
                        
                         cont_po->count_pitch++;	//  有潜在信号 
     bf2:	e9 81       	ldd	r30, Y+1	; 0x01
     bf4:	fa 81       	ldd	r31, Y+2	; 0x02
     bf6:	82 81       	ldd	r24, Z+2	; 0x02
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	e9 81       	ldd	r30, Y+1	; 0x01
     bfc:	fa 81       	ldd	r31, Y+2	; 0x02
     bfe:	82 83       	std	Z+2, r24	; 0x02
 		            	//multy_16(sample[pipang],FFT_N);//*16
			          fft_input_no_window(sample[pipang], bfly_buff,FFT_N);
     c00:	28 ea       	ldi	r18, 0xA8	; 168
     c02:	35 e0       	ldi	r19, 0x05	; 5
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	88 2f       	mov	r24, r24
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	98 2f       	mov	r25, r24
     c0c:	88 27       	eor	r24, r24
     c0e:	82 0f       	add	r24, r18
     c10:	93 1f       	adc	r25, r19
     c12:	27 e9       	ldi	r18, 0x97	; 151
     c14:	31 e0       	ldi	r19, 0x01	; 1
     c16:	b9 01       	movw	r22, r18
     c18:	40 e8       	ldi	r20, 0x80	; 128
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <fft_input_no_window>
		
            	      fft_execute(bfly_buff);
     c20:	87 e9       	ldi	r24, 0x97	; 151
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <fft_execute>
			 
				      fft_output(bfly_buff, spektrum); 
     c28:	87 e9       	ldi	r24, 0x97	; 151
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	24 e2       	ldi	r18, 0x24	; 36
     c2e:	35 e0       	ldi	r19, 0x05	; 5
     c30:	b9 01       	movw	r22, r18
     c32:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fft_output>
					 
                       					    
					      correlation(spektrum_sample_buff_old,spektrum,FFT_N/2 );
     c36:	84 ea       	ldi	r24, 0xA4	; 164
     c38:	94 e0       	ldi	r25, 0x04	; 4
     c3a:	24 e2       	ldi	r18, 0x24	; 36
     c3c:	35 e0       	ldi	r19, 0x05	; 5
     c3e:	b9 01       	movw	r22, r18
     c40:	40 e4       	ldi	r20, 0x40	; 64
     c42:	50 e0       	ldi	r21, 0x00	; 0
     c44:	0e 94 cc 04 	call	0x998	; 0x998 <correlation>
					  
					      cont_po->peak_index[3]=peak(spektrum_sample_buff_old,FFT_N/2 );
     c48:	84 ea       	ldi	r24, 0xA4	; 164
     c4a:	94 e0       	ldi	r25, 0x04	; 4
     c4c:	60 e4       	ldi	r22, 0x40	; 64
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	0e 94 70 01 	call	0x2e0	; 0x2e0 <peak>
     c54:	e9 81       	ldd	r30, Y+1	; 0x01
     c56:	fa 81       	ldd	r31, Y+2	; 0x02
     c58:	87 83       	std	Z+7, r24	; 0x07
					  
                          copy_buff(spektrum,spektrum_sample_buff_old, FFT_N/2 ); 
     c5a:	84 e2       	ldi	r24, 0x24	; 36
     c5c:	95 e0       	ldi	r25, 0x05	; 5
     c5e:	24 ea       	ldi	r18, 0xA4	; 164
     c60:	34 e0       	ldi	r19, 0x04	; 4
     c62:	b9 01       	movw	r22, r18
     c64:	40 e4       	ldi	r20, 0x40	; 64
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	0e 94 9f 03 	call	0x73e	; 0x73e <copy_buff>
					  
                      
                          adjust(cont_po); 
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	9a 81       	ldd	r25, Y+2	; 0x02
     c70:	0e 94 10 05 	call	0xa20	; 0xa20 <adjust>
					    
					    
					}	   
					  
 
 }
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <reset_check>:
 
 void  reset_check (judge_content * cont_po )//没有可疑的 复位

{
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	00 d0       	rcall	.+0      	; 0xc86 <reset_check+0x6>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	9a 83       	std	Y+2, r25	; 0x02
     c8c:	89 83       	std	Y+1, r24	; 0x01
      cont_po->nosignal_count=0;
     c8e:	e9 81       	ldd	r30, Y+1	; 0x01
     c90:	fa 81       	ldd	r31, Y+2	; 0x02
     c92:	13 82       	std	Z+3, r1	; 0x03
			   
			      
			          cont_po->flg.pitch_flg=0;////未 出现静止期，连怀疑都没有
     c94:	e9 81       	ldd	r30, Y+1	; 0x01
     c96:	fa 81       	ldd	r31, Y+2	; 0x02
     c98:	80 81       	ld	r24, Z
     c9a:	8f 7e       	andi	r24, 0xEF	; 239
     c9c:	80 83       	st	Z, r24
			          cont_po->count_pitch=0;		 
     c9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ca0:	fa 81       	ldd	r31, Y+2	; 0x02
     ca2:	12 82       	std	Z+2, r1	; 0x02
				 
			 
			 cont_po->flg.pre_flag0=0;
     ca4:	e9 81       	ldd	r30, Y+1	; 0x01
     ca6:	fa 81       	ldd	r31, Y+2	; 0x02
     ca8:	80 81       	ld	r24, Z
     caa:	8e 7f       	andi	r24, 0xFE	; 254
     cac:	80 83       	st	Z, r24
			 cont_po->flg.pre_flag1=0;
     cae:	e9 81       	ldd	r30, Y+1	; 0x01
     cb0:	fa 81       	ldd	r31, Y+2	; 0x02
     cb2:	80 81       	ld	r24, Z
     cb4:	8d 7f       	andi	r24, 0xFD	; 253
     cb6:	80 83       	st	Z, r24
			 cont_po->flg.pre_flag2=0;
     cb8:	e9 81       	ldd	r30, Y+1	; 0x01
     cba:	fa 81       	ldd	r31, Y+2	; 0x02
     cbc:	80 81       	ld	r24, Z
     cbe:	8b 7f       	andi	r24, 0xFB	; 251
     cc0:	80 83       	st	Z, r24
		     cont_po->flg.pre_flag3=0;
     cc2:	e9 81       	ldd	r30, Y+1	; 0x01
     cc4:	fa 81       	ldd	r31, Y+2	; 0x02
     cc6:	80 81       	ld	r24, Z
     cc8:	87 7f       	andi	r24, 0xF7	; 247
     cca:	80 83       	st	Z, r24
			 cont_po->peak_index[0]=0;
     ccc:	e9 81       	ldd	r30, Y+1	; 0x01
     cce:	fa 81       	ldd	r31, Y+2	; 0x02
     cd0:	14 82       	std	Z+4, r1	; 0x04
			 cont_po->peak_index[1]=0;
     cd2:	e9 81       	ldd	r30, Y+1	; 0x01
     cd4:	fa 81       	ldd	r31, Y+2	; 0x02
     cd6:	15 82       	std	Z+5, r1	; 0x05
			 cont_po->peak_index[2]=0;
     cd8:	e9 81       	ldd	r30, Y+1	; 0x01
     cda:	fa 81       	ldd	r31, Y+2	; 0x02
     cdc:	16 82       	std	Z+6, r1	; 0x06
			 cont_po->peak_index[3]=0;
     cde:	e9 81       	ldd	r30, Y+1	; 0x01
     ce0:	fa 81       	ldd	r31, Y+2	; 0x02
     ce2:	17 82       	std	Z+7, r1	; 0x07
} 
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <silent>:

 void silent(judge_content * cont_po )//没有可疑的 复位

{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <silent+0x6>
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	9a 83       	std	Y+2, r25	; 0x02
     cfa:	89 83       	std	Y+1, r24	; 0x01
      cont_po->nosignal_count++;
     cfc:	e9 81       	ldd	r30, Y+1	; 0x01
     cfe:	fa 81       	ldd	r31, Y+2	; 0x02
     d00:	83 81       	ldd	r24, Z+3	; 0x03
     d02:	8f 5f       	subi	r24, 0xFF	; 255
     d04:	e9 81       	ldd	r30, Y+1	; 0x01
     d06:	fa 81       	ldd	r31, Y+2	; 0x02
     d08:	83 83       	std	Z+3, r24	; 0x03
			   
			       if ( cont_po->nosignal_count>SILENT)//15帧
     d0a:	e9 81       	ldd	r30, Y+1	; 0x01
     d0c:	fa 81       	ldd	r31, Y+2	; 0x02
     d0e:	83 81       	ldd	r24, Z+3	; 0x03
     d10:	8b 30       	cpi	r24, 0x0B	; 11
     d12:	40 f0       	brcs	.+16     	; 0xd24 <silent+0x36>
			        {
			          cont_po->flg.pitch_flg=1;//出现静止期
     d14:	e9 81       	ldd	r30, Y+1	; 0x01
     d16:	fa 81       	ldd	r31, Y+2	; 0x02
     d18:	80 81       	ld	r24, Z
     d1a:	80 61       	ori	r24, 0x10	; 16
     d1c:	80 83       	st	Z, r24
			          cont_po->count_pitch=0;		 
     d1e:	e9 81       	ldd	r30, Y+1	; 0x01
     d20:	fa 81       	ldd	r31, Y+2	; 0x02
     d22:	12 82       	std	Z+2, r1	; 0x02
					}
			 
			 cont_po->flg.pre_flag0=0;
     d24:	e9 81       	ldd	r30, Y+1	; 0x01
     d26:	fa 81       	ldd	r31, Y+2	; 0x02
     d28:	80 81       	ld	r24, Z
     d2a:	8e 7f       	andi	r24, 0xFE	; 254
     d2c:	80 83       	st	Z, r24
			 cont_po->flg.pre_flag1=0;
     d2e:	e9 81       	ldd	r30, Y+1	; 0x01
     d30:	fa 81       	ldd	r31, Y+2	; 0x02
     d32:	80 81       	ld	r24, Z
     d34:	8d 7f       	andi	r24, 0xFD	; 253
     d36:	80 83       	st	Z, r24
			 cont_po->flg.pre_flag2=0;
     d38:	e9 81       	ldd	r30, Y+1	; 0x01
     d3a:	fa 81       	ldd	r31, Y+2	; 0x02
     d3c:	80 81       	ld	r24, Z
     d3e:	8b 7f       	andi	r24, 0xFB	; 251
     d40:	80 83       	st	Z, r24
		     cont_po->flg.pre_flag3=0;
     d42:	e9 81       	ldd	r30, Y+1	; 0x01
     d44:	fa 81       	ldd	r31, Y+2	; 0x02
     d46:	80 81       	ld	r24, Z
     d48:	87 7f       	andi	r24, 0xF7	; 247
     d4a:	80 83       	st	Z, r24
			 cont_po->peak_index[0]=0;
     d4c:	e9 81       	ldd	r30, Y+1	; 0x01
     d4e:	fa 81       	ldd	r31, Y+2	; 0x02
     d50:	14 82       	std	Z+4, r1	; 0x04
			 cont_po->peak_index[1]=0;
     d52:	e9 81       	ldd	r30, Y+1	; 0x01
     d54:	fa 81       	ldd	r31, Y+2	; 0x02
     d56:	15 82       	std	Z+5, r1	; 0x05
			 cont_po->peak_index[2]=0;
     d58:	e9 81       	ldd	r30, Y+1	; 0x01
     d5a:	fa 81       	ldd	r31, Y+2	; 0x02
     d5c:	16 82       	std	Z+6, r1	; 0x06
			 cont_po->peak_index[3]=0;
     d5e:	e9 81       	ldd	r30, Y+1	; 0x01
     d60:	fa 81       	ldd	r31, Y+2	; 0x02
     d62:	17 82       	std	Z+7, r1	; 0x07
} 
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <adjust_gain>:

****************************************************************/
 //
 
void  adjust_gain(unsigned char i )//没有复位动作
 {//实测不失真 最大范围是 131 --967  
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <adjust_gain+0x6>
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	8a 83       	std	Y+2, r24	; 0x02
                 //而且随着输入增大，实测的最大会下降，最低会下降
 
 //static unsigned char gain=0;

 unsigned char data=0;
     d7a:	19 82       	std	Y+1, r1	; 0x01
  
// PA7:100 pA6:200 PA5:390 PA4:330 PA3:510 PA2:1k
 
  

 if (i>=63)
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	8f 33       	cpi	r24, 0x3F	; 63
     d80:	10 f0       	brcs	.+4      	; 0xd86 <adjust_gain+0x18>
 i=63; //保护
     d82:	8f e3       	ldi	r24, 0x3F	; 63
     d84:	8a 83       	std	Y+2, r24	; 0x02
  
         //允许 0 
 
 
 
  if (gain_debug)
     d86:	80 91 78 00 	lds	r24, 0x0078
     d8a:	88 23       	and	r24, r24
     d8c:	19 f0       	breq	.+6      	; 0xd94 <adjust_gain+0x26>
   i= gain_debug;//如果开启gain_debug，则一切按照gain_debug来执行。
     d8e:	80 91 78 00 	lds	r24, 0x0078
     d92:	8a 83       	std	Y+2, r24	; 0x02
   
    gain=i;// 执行的增益
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	80 93 77 00 	sts	0x0077, r24
 
 */
 
 
 
  data=(i<<2);//对到PA7  gain=0x11110000
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	88 0f       	add	r24, r24
     d9e:	88 0f       	add	r24, r24
     da0:	89 83       	std	Y+1, r24	; 0x01
 
DDRA=data;//方向输出  PA0,PA1为0 为输入
     da2:	ea e3       	ldi	r30, 0x3A	; 58
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	80 83       	st	Z, r24

 
//DDRA|=0x04;//PB2 方向输出
PORTA=~data ;//相应的bit输出0;
     daa:	eb e3       	ldi	r30, 0x3B	; 59
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	80 95       	com	r24
     db2:	80 83       	st	Z, r24


 
 }
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <gain_ready>:
 void   gain_ready(unsigned char i )//没有复位动作
 {//实测不失真 最大范围是 131 --967  
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <gain_ready+0x6>
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	8a 83       	std	Y+2, r24	; 0x02
                 //而且随着输入增大，实测的最大会下降，最低会下降
 
 //static unsigned char gain=0;

 unsigned char data=0;
     dca:	19 82       	std	Y+1, r1	; 0x01
// PA7:100 pA6:200 PA5:390 PA4:330 PA3:510 PA2:1k
 
 
 
 
  data=(i<<2);//对到PA7  gain=0x11110000
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	88 0f       	add	r24, r24
     dd0:	88 0f       	add	r24, r24
     dd2:	89 83       	std	Y+1, r24	; 0x01
 
DDRA=data;//方向输出
     dd4:	ea e3       	ldi	r30, 0x3A	; 58
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	80 83       	st	Z, r24

 
//DDRA|=0x04;//PB2 方向输出
PORTA=~data ;//相应的bit输出0;
     ddc:	eb e3       	ldi	r30, 0x3B	; 59
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	80 95       	com	r24
     de4:	80 83       	st	Z, r24


 
 }
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <EEPROM_Write>:
 
 
 //的jtag 设置保护eeprom的值 preserve

void EEPROM_Write(unsigned int waddr,unsigned char wdata)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <EEPROM_Write+0x6>
     df6:	0f 92       	push	r0
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	89 83       	std	Y+1, r24	; 0x01
     e00:	6b 83       	std	Y+3, r22	; 0x03
        while(EECR & (1 << EEWE));
     e02:	ec e3       	ldi	r30, 0x3C	; 60
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	82 70       	andi	r24, 0x02	; 2
     e0e:	90 70       	andi	r25, 0x00	; 0
     e10:	00 97       	sbiw	r24, 0x00	; 0
     e12:	b9 f7       	brne	.-18     	; 0xe02 <EEPROM_Write+0x12>
        EEAR = waddr;
     e14:	ee e3       	ldi	r30, 0x3E	; 62
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	91 83       	std	Z+1, r25	; 0x01
     e1e:	80 83       	st	Z, r24
        EEDR = wdata;                                                                        
     e20:	ed e3       	ldi	r30, 0x3D	; 61
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	80 83       	st	Z, r24
        
        asm volatile("PUSH R16" "\n\t"                        
     e28:	0f 93       	push	r16
     e2a:	04 e0       	ldi	r16, 0x04	; 4
     e2c:	0c bb       	out	0x1c, r16	; 28
     e2e:	06 e0       	ldi	r16, 0x06	; 6
     e30:	0c bb       	out	0x1c, r16	; 28
     e32:	0f 91       	pop	r16
                  "LDI R16,0x04" "\n\t"
                  "OUT 0x1C,R16" "\n\t"                //EECR |= (1 << EEMWE);
                  "LDI R16,0x06" "\n\t"
                  "OUT 0x1C,R16" "\n\t"                //EECR |= (1 << EEWE);
                  "POP R16");
}
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <I_need_sleep>:

I_need_sleep()
{
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	00 d0       	rcall	.+0      	; 0xe46 <I_need_sleep+0x6>
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
 // LED_snore();//has waked
 
  silent_time=0;
}
#endif 
}
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <if_thieved>:
 
 
 
 
unsigned char if_thieved()
 {
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	28 97       	sbiw	r28, 0x08	; 8
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
  *{
  *EEPROM_Write(osc_address,tp); 
  */
  
  
  tp=   pgm_read_byte(&FlashConst); 
     e68:	84 e5       	ldi	r24, 0x54	; 84
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	9b 83       	std	Y+3, r25	; 0x03
     e6e:	8a 83       	std	Y+2, r24	; 0x02
     e70:	ea 81       	ldd	r30, Y+2	; 0x02
     e72:	fb 81       	ldd	r31, Y+3	; 0x03
     e74:	84 91       	lpm	r24, Z+
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	9f 83       	std	Y+7, r25	; 0x07
     e80:	8e 83       	std	Y+6, r24	; 0x06
  if (tp==3)//2621 
     e82:	8e 81       	ldd	r24, Y+6	; 0x06
     e84:	9f 81       	ldd	r25, Y+7	; 0x07
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	91 05       	cpc	r25, r1
     e8a:	69 f4       	brne	.+26     	; 0xea6 <if_thieved+0x52>
    {
     EEPROM_Write(FlashConst,OSCCAL);//eeprom  write  not  flash
     e8c:	80 91 54 00 	lds	r24, 0x0054
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	e1 e5       	ldi	r30, 0x51	; 81
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	20 81       	ld	r18, Z
     e9a:	62 2f       	mov	r22, r18
     e9c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <EEPROM_Write>
	 return 1;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	88 87       	std	Y+8, r24	; 0x08
     ea4:	0e c0       	rjmp	.+28     	; 0xec2 <if_thieved+0x6e>
	 }
	 else
  {
  if (OSCCAL== tp)
     ea6:	e1 e5       	ldi	r30, 0x51	; 81
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	8e 81       	ldd	r24, Y+6	; 0x06
     eb2:	9f 81       	ldd	r25, Y+7	; 0x07
     eb4:	28 17       	cp	r18, r24
     eb6:	39 07       	cpc	r19, r25
     eb8:	19 f4       	brne	.+6      	; 0xec0 <if_thieved+0x6c>

  return 1;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	88 87       	std	Y+8, r24	; 0x08
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <if_thieved+0x6e>
  else return 0;
     ec0:	18 86       	std	Y+8, r1	; 0x08
     ec2:	88 85       	ldd	r24, Y+8	; 0x08
  
   }
 
 
  
 }
     ec4:	28 96       	adiw	r28, 0x08	; 8
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <main1>:
其他的失眠可以由int2来唤醒，在gain=8 时，第二级1k 第二级200欧，对于本机器吹气大声说话即可唤醒。

*/

int main1(void) 
{ 
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	2e 97       	sbiw	r28, 0x0e	; 14
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
      LED_all_right();
     eea:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <LED_all_right>
    
    MCUCSR = (0<<ISC2); /* 外部INT2的下降沿激活中断 */
     eee:	e4 e5       	ldi	r30, 0x54	; 84
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	10 82       	st	Z, r1
    GICR |= (1<<INT2); /* 外部INT2中断使能 */
     ef4:	ab e5       	ldi	r26, 0x5B	; 91
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	eb e5       	ldi	r30, 0x5B	; 91
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	80 62       	ori	r24, 0x20	; 32
     f00:	8c 93       	st	X, r24
	adjust_gain(8);
     f02:	88 e0       	ldi	r24, 0x08	; 8
     f04:	0e 94 b7 06 	call	0xd6e	; 0xd6e <adjust_gain>

    sei();  /*中断使能*/
     f08:	78 94       	sei
    
    /* 进入空闲模式，等待INT2唤醒 */
    set_sleep_mode(SLEEP_MODE_IDLE);
     f0a:	a5 e5       	ldi	r26, 0x55	; 85
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e5 e5       	ldi	r30, 0x55	; 85
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	8f 78       	andi	r24, 0x8F	; 143
     f16:	8c 93       	st	X, r24
    sleep_enable();
     f18:	a5 e5       	ldi	r26, 0x55	; 85
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e5 e5       	ldi	r30, 0x55	; 85
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	80 68       	ori	r24, 0x80	; 128
     f24:	8c 93       	st	X, r24
    sleep_cpu();
     f26:	88 95       	sleep
    sleep_disable();
     f28:	a5 e5       	ldi	r26, 0x55	; 85
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e5 e5       	ldi	r30, 0x55	; 85
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8f 77       	andi	r24, 0x7F	; 127
     f34:	8c 93       	st	X, r24
    
    /* 进入ADC 噪声抑制模式，等待INT2唤醒 */
    set_sleep_mode(SLEEP_MODE_ADC);
     f36:	a5 e5       	ldi	r26, 0x55	; 85
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e5 e5       	ldi	r30, 0x55	; 85
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	8f 78       	andi	r24, 0x8F	; 143
     f42:	80 61       	ori	r24, 0x10	; 16
     f44:	8c 93       	st	X, r24
    sleep_enable();
     f46:	a5 e5       	ldi	r26, 0x55	; 85
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e5 e5       	ldi	r30, 0x55	; 85
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	80 68       	ori	r24, 0x80	; 128
     f52:	8c 93       	st	X, r24
    sleep_cpu();
     f54:	88 95       	sleep
    sleep_disable();
     f56:	a5 e5       	ldi	r26, 0x55	; 85
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e5 e5       	ldi	r30, 0x55	; 85
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	8f 77       	andi	r24, 0x7F	; 127
     f62:	8c 93       	st	X, r24

    /* 进入掉电模式，等待INT2唤醒 */
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     f64:	a5 e5       	ldi	r26, 0x55	; 85
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e5 e5       	ldi	r30, 0x55	; 85
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8f 78       	andi	r24, 0x8F	; 143
     f70:	80 62       	ori	r24, 0x20	; 32
     f72:	8c 93       	st	X, r24
    sleep_enable();
     f74:	a5 e5       	ldi	r26, 0x55	; 85
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e5 e5       	ldi	r30, 0x55	; 85
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 68       	ori	r24, 0x80	; 128
     f80:	8c 93       	st	X, r24
    sleep_cpu();
     f82:	88 95       	sleep
    sleep_disable();
     f84:	a5 e5       	ldi	r26, 0x55	; 85
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e5 e5       	ldi	r30, 0x55	; 85
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	8f 77       	andi	r24, 0x7F	; 127
     f90:	8c 93       	st	X, r24

    /* 进入省电模式，等待INT2唤醒 */
    set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     f92:	a5 e5       	ldi	r26, 0x55	; 85
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e5 e5       	ldi	r30, 0x55	; 85
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	8f 78       	andi	r24, 0x8F	; 143
     f9e:	80 63       	ori	r24, 0x30	; 48
     fa0:	8c 93       	st	X, r24
    sleep_enable();
     fa2:	a5 e5       	ldi	r26, 0x55	; 85
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e5 e5       	ldi	r30, 0x55	; 85
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	80 68       	ori	r24, 0x80	; 128
     fae:	8c 93       	st	X, r24
    sleep_cpu();
     fb0:	88 95       	sleep
    sleep_disable();
     fb2:	a5 e5       	ldi	r26, 0x55	; 85
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e5 e5       	ldi	r30, 0x55	; 85
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8f 77       	andi	r24, 0x7F	; 127
     fbe:	8c 93       	st	X, r24

    /* 进入STANDBY模式，等待INT2唤醒 */
    set_sleep_mode(SLEEP_MODE_STANDBY);
     fc0:	a5 e5       	ldi	r26, 0x55	; 85
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e5 e5       	ldi	r30, 0x55	; 85
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8f 78       	andi	r24, 0x8F	; 143
     fcc:	80 66       	ori	r24, 0x60	; 96
     fce:	8c 93       	st	X, r24
    sleep_enable();
     fd0:	a5 e5       	ldi	r26, 0x55	; 85
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e5 e5       	ldi	r30, 0x55	; 85
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	80 68       	ori	r24, 0x80	; 128
     fdc:	8c 93       	st	X, r24
    sleep_cpu();
     fde:	88 95       	sleep
    sleep_disable();
     fe0:	a5 e5       	ldi	r26, 0x55	; 85
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e5 e5       	ldi	r30, 0x55	; 85
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8f 77       	andi	r24, 0x7F	; 127
     fec:	8c 93       	st	X, r24

    /* 进入扩展STANDBY模式，等待INT2唤醒 */
    set_sleep_mode(SLEEP_MODE_EXT_STANDBY);
     fee:	a5 e5       	ldi	r26, 0x55	; 85
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e5 e5       	ldi	r30, 0x55	; 85
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	80 67       	ori	r24, 0x70	; 112
     ffa:	8c 93       	st	X, r24
    sleep_enable();
     ffc:	a5 e5       	ldi	r26, 0x55	; 85
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e5 e5       	ldi	r30, 0x55	; 85
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	80 68       	ori	r24, 0x80	; 128
    1008:	8c 93       	st	X, r24
    sleep_cpu();
    100a:	88 95       	sleep
    sleep_disable();
    100c:	a5 e5       	ldi	r26, 0x55	; 85
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e5 e5       	ldi	r30, 0x55	; 85
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	8f 77       	andi	r24, 0x7F	; 127
    1018:	8c 93       	st	X, r24
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	a8 e4       	ldi	r26, 0x48	; 72
    1020:	b3 e4       	ldi	r27, 0x43	; 67
    1022:	8b 87       	std	Y+11, r24	; 0x0b
    1024:	9c 87       	std	Y+12, r25	; 0x0c
    1026:	ad 87       	std	Y+13, r26	; 0x0d
    1028:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    102a:	6b 85       	ldd	r22, Y+11	; 0x0b
    102c:	7c 85       	ldd	r23, Y+12	; 0x0c
    102e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1030:	9e 85       	ldd	r25, Y+14	; 0x0e
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	55 e4       	ldi	r21, 0x45	; 69
    103a:	0e 94 47 19 	call	0x328e	; 0x328e <__mulsf3>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	8f 83       	std	Y+7, r24	; 0x07
    1044:	98 87       	std	Y+8, r25	; 0x08
    1046:	a9 87       	std	Y+9, r26	; 0x09
    1048:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    104a:	6f 81       	ldd	r22, Y+7	; 0x07
    104c:	78 85       	ldd	r23, Y+8	; 0x08
    104e:	89 85       	ldd	r24, Y+9	; 0x09
    1050:	9a 85       	ldd	r25, Y+10	; 0x0a
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e8       	ldi	r20, 0x80	; 128
    1058:	5f e3       	ldi	r21, 0x3F	; 63
    105a:	0e 94 4d 1b 	call	0x369a	; 0x369a <__ltsf2>
    105e:	88 23       	and	r24, r24
    1060:	2c f4       	brge	.+10     	; 0x106c <main1+0x196>
		__ticks = 1;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	9e 83       	std	Y+6, r25	; 0x06
    1068:	8d 83       	std	Y+5, r24	; 0x05
    106a:	3f c0       	rjmp	.+126    	; 0x10ea <main1+0x214>
	else if (__tmp > 65535)
    106c:	6f 81       	ldd	r22, Y+7	; 0x07
    106e:	78 85       	ldd	r23, Y+8	; 0x08
    1070:	89 85       	ldd	r24, Y+9	; 0x09
    1072:	9a 85       	ldd	r25, Y+10	; 0x0a
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	3f ef       	ldi	r19, 0xFF	; 255
    1078:	4f e7       	ldi	r20, 0x7F	; 127
    107a:	57 e4       	ldi	r21, 0x47	; 71
    107c:	0e 94 ed 1a 	call	0x35da	; 0x35da <__gtsf2>
    1080:	18 16       	cp	r1, r24
    1082:	4c f5       	brge	.+82     	; 0x10d6 <main1+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1084:	6b 85       	ldd	r22, Y+11	; 0x0b
    1086:	7c 85       	ldd	r23, Y+12	; 0x0c
    1088:	8d 85       	ldd	r24, Y+13	; 0x0d
    108a:	9e 85       	ldd	r25, Y+14	; 0x0e
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	40 e2       	ldi	r20, 0x20	; 32
    1092:	51 e4       	ldi	r21, 0x41	; 65
    1094:	0e 94 47 19 	call	0x328e	; 0x328e <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	bc 01       	movw	r22, r24
    109e:	cd 01       	movw	r24, r26
    10a0:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__fixunssfsi>
    10a4:	dc 01       	movw	r26, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	9e 83       	std	Y+6, r25	; 0x06
    10aa:	8d 83       	std	Y+5, r24	; 0x05
    10ac:	0f c0       	rjmp	.+30     	; 0x10cc <main1+0x1f6>
    10ae:	8c ec       	ldi	r24, 0xCC	; 204
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	9c 83       	std	Y+4, r25	; 0x04
    10b4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <main1+0x1e4>
    10be:	9c 83       	std	Y+4, r25	; 0x04
    10c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c2:	8d 81       	ldd	r24, Y+5	; 0x05
    10c4:	9e 81       	ldd	r25, Y+6	; 0x06
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	9e 83       	std	Y+6, r25	; 0x06
    10ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10cc:	8d 81       	ldd	r24, Y+5	; 0x05
    10ce:	9e 81       	ldd	r25, Y+6	; 0x06
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	69 f7       	brne	.-38     	; 0x10ae <main1+0x1d8>
    10d4:	14 c0       	rjmp	.+40     	; 0x10fe <main1+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d6:	6f 81       	ldd	r22, Y+7	; 0x07
    10d8:	78 85       	ldd	r23, Y+8	; 0x08
    10da:	89 85       	ldd	r24, Y+9	; 0x09
    10dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10de:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__fixunssfsi>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	9e 83       	std	Y+6, r25	; 0x06
    10e8:	8d 83       	std	Y+5, r24	; 0x05
    10ea:	8d 81       	ldd	r24, Y+5	; 0x05
    10ec:	9e 81       	ldd	r25, Y+6	; 0x06
    10ee:	9a 83       	std	Y+2, r25	; 0x02
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	9a 81       	ldd	r25, Y+2	; 0x02
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <main1+0x220>
    10fa:	9a 83       	std	Y+2, r25	; 0x02
    10fc:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(200);

    return 0;
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
}
    1102:	2e 96       	adiw	r28, 0x0e	; 14
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <AGC>:
 
 1,2,3,4,5这时的 增益控制步调是正确的 
 */
 
 void   AGC()
 {
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <AGC+0x6>
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
 
 judge_content * point;
  point= &content;
    111e:	87 e9       	ldi	r24, 0x97	; 151
    1120:	93 e0       	ldi	r25, 0x03	; 3
    1122:	9a 83       	std	Y+2, r25	; 0x02
    1124:	89 83       	std	Y+1, r24	; 0x01
  
 if (max-min >420)
    1126:	20 91 79 00 	lds	r18, 0x0079
    112a:	30 91 7a 00 	lds	r19, 0x007A
    112e:	80 91 7b 00 	lds	r24, 0x007B
    1132:	90 91 7c 00 	lds	r25, 0x007C
    1136:	a9 01       	movw	r20, r18
    1138:	48 1b       	sub	r20, r24
    113a:	59 0b       	sbc	r21, r25
    113c:	ca 01       	movw	r24, r20
    113e:	51 e0       	ldi	r21, 0x01	; 1
    1140:	85 3a       	cpi	r24, 0xA5	; 165
    1142:	95 07       	cpc	r25, r21
    1144:	70 f0       	brcs	.+28     	; 0x1162 <AGC+0x4e>
 
    {
	if(gain>1)
    1146:	80 91 77 00 	lds	r24, 0x0077
    114a:	82 30       	cpi	r24, 0x02	; 2
    114c:	00 f1       	brcs	.+64     	; 0x118e <AGC+0x7a>
	
	adjust_gain	(--gain);//不许为0 
    114e:	80 91 77 00 	lds	r24, 0x0077
    1152:	81 50       	subi	r24, 0x01	; 1
    1154:	80 93 77 00 	sts	0x0077, r24
    1158:	80 91 77 00 	lds	r24, 0x0077
    115c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <adjust_gain>
    1160:	16 c0       	rjmp	.+44     	; 0x118e <AGC+0x7a>
	 
	}
	
else if (max-min <210)
    1162:	80 91 79 00 	lds	r24, 0x0079
    1166:	90 91 7a 00 	lds	r25, 0x007A
    116a:	20 91 7b 00 	lds	r18, 0x007B
    116e:	30 91 7c 00 	lds	r19, 0x007C
    1172:	82 1b       	sub	r24, r18
    1174:	93 0b       	sbc	r25, r19
    1176:	82 3d       	cpi	r24, 0xD2	; 210
    1178:	91 05       	cpc	r25, r1
    117a:	48 f4       	brcc	.+18     	; 0x118e <AGC+0x7a>
 
    {
	
	adjust_gain	(++gain);
    117c:	80 91 77 00 	lds	r24, 0x0077
    1180:	8f 5f       	subi	r24, 0xFF	; 255
    1182:	80 93 77 00 	sts	0x0077, r24
    1186:	80 91 77 00 	lds	r24, 0x0077
    118a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <adjust_gain>
	
	}	
	
	
	max=512;
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	92 e0       	ldi	r25, 0x02	; 2
    1192:	90 93 7a 00 	sts	0x007A, r25
    1196:	80 93 79 00 	sts	0x0079, r24
	min=512;
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	92 e0       	ldi	r25, 0x02	; 2
    119e:	90 93 7c 00 	sts	0x007C, r25
    11a2:	80 93 7b 00 	sts	0x007B, r24

	
 //reset_check (point);//回到初始重新判断，不要把不正常的数据带到下一次
  
 count_sample=900;//自然产生延时
    11a6:	84 e8       	ldi	r24, 0x84	; 132
    11a8:	93 e0       	ldi	r25, 0x03	; 3
    11aa:	90 93 8b 01 	sts	0x018B, r25
    11ae:	80 93 8a 01 	sts	0x018A, r24
 }
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <main>:
 
 
 
 				
int main (void)
{ 
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <main+0x6>
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <main+0x8>
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <main+0xa>
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	 
	 
	unsigned char index=0;
    11ca:	1c 82       	std	Y+4, r1	; 0x04
	judge_content * point;
	unsigned char  i;
 if (MCUCSR&&0x04)//MCUCSR 的BORF是否为1 ，是否BOD重启
    11cc:	e4 e5       	ldi	r30, 0x54	; 84
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	88 23       	and	r24, r24
    11d4:	11 f0       	breq	.+4      	; 0x11da <main+0x1e>
 
    power_off();//just for test
    11d6:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <power_off>
    
	//xmitstr(PSTR("\r\nFFT sample program\r\n"));
   init_USART_baud(256000 ); // just for sleep
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	78 ee       	ldi	r23, 0xE8	; 232
    11de:	83 e0       	ldi	r24, 0x03	; 3
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 4a 00 	call	0x94	; 0x94 <init_USART_baud>
   // usart_write(hello ,23);
	//usart_interrupt_en();
	sample[0][0]=2;
    11e6:	82 e0       	ldi	r24, 0x02	; 2
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	90 93 a9 05 	sts	0x05A9, r25
    11ee:	80 93 a8 05 	sts	0x05A8, r24
	sample[0][1]=3;
    11f2:	83 e0       	ldi	r24, 0x03	; 3
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	90 93 ab 05 	sts	0x05AB, r25
    11fa:	80 93 aa 05 	sts	0x05AA, r24
	sample[0][2]=-4;
    11fe:	8c ef       	ldi	r24, 0xFC	; 252
    1200:	9f ef       	ldi	r25, 0xFF	; 255
    1202:	90 93 ad 05 	sts	0x05AD, r25
    1206:	80 93 ac 05 	sts	0x05AC, r24
	sample[0][4]=-3;
    120a:	8d ef       	ldi	r24, 0xFD	; 253
    120c:	9f ef       	ldi	r25, 0xFF	; 255
    120e:	90 93 b1 05 	sts	0x05B1, r25
    1212:	80 93 b0 05 	sts	0x05B0, r24
	sample[0][5]=-1;
    1216:	8f ef       	ldi	r24, 0xFF	; 255
    1218:	9f ef       	ldi	r25, 0xFF	; 255
    121a:	90 93 b3 05 	sts	0x05B3, r25
    121e:	80 93 b2 05 	sts	0x05B2, r24
	sample[0][6]=3;
    1222:	83 e0       	ldi	r24, 0x03	; 3
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	90 93 b5 05 	sts	0x05B5, r25
    122a:	80 93 b4 05 	sts	0x05B4, r24
	sample[0][7]=5;
    122e:	85 e0       	ldi	r24, 0x05	; 5
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	90 93 b7 05 	sts	0x05B7, r25
    1236:	80 93 b6 05 	sts	0x05B6, r24
	sample[0][8]=-4;
    123a:	8c ef       	ldi	r24, 0xFC	; 252
    123c:	9f ef       	ldi	r25, 0xFF	; 255
    123e:	90 93 b9 05 	sts	0x05B9, r25
    1242:	80 93 b8 05 	sts	0x05B8, r24
	sample[0][9]=-5;
    1246:	8b ef       	ldi	r24, 0xFB	; 251
    1248:	9f ef       	ldi	r25, 0xFF	; 255
    124a:	90 93 bb 05 	sts	0x05BB, r25
    124e:	80 93 ba 05 	sts	0x05BA, r24
	 
	 
	
		 point->diff =cross_zero(sample[0] ,10 );
    1252:	88 ea       	ldi	r24, 0xA8	; 168
    1254:	95 e0       	ldi	r25, 0x05	; 5
    1256:	6a e0       	ldi	r22, 0x0A	; 10
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	0e 94 a7 02 	call	0x54e	; 0x54e <cross_zero>
    125e:	ea 81       	ldd	r30, Y+2	; 0x02
    1260:	fb 81       	ldd	r31, Y+3	; 0x03
    1262:	84 87       	std	Z+12, r24	; 0x0c
		 
		 for (i=0;i<FFT_N;i++)
    1264:	19 82       	std	Y+1, r1	; 0x01
    1266:	14 c0       	rjmp	.+40     	; 0x1290 <main+0xd4>
		 
		 {
		 sample[0][i]=i+1;
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	48 2f       	mov	r20, r24
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	88 2f       	mov	r24, r24
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	9c 01       	movw	r18, r24
    1276:	2f 5f       	subi	r18, 0xFF	; 255
    1278:	3f 4f       	sbci	r19, 0xFF	; 255
    127a:	ca 01       	movw	r24, r20
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	fc 01       	movw	r30, r24
    1282:	e8 55       	subi	r30, 0x58	; 88
    1284:	fa 4f       	sbci	r31, 0xFA	; 250
    1286:	31 83       	std	Z+1, r19	; 0x01
    1288:	20 83       	st	Z, r18
	 
	 
	
		 point->diff =cross_zero(sample[0] ,10 );
		 
		 for (i=0;i<FFT_N;i++)
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	8f 5f       	subi	r24, 0xFF	; 255
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	88 23       	and	r24, r24
    1294:	4c f7       	brge	.-46     	; 0x1268 <main+0xac>
		 
		 {
		 sample[0][i]=i+1;
		 
		 }
		 fft_input_no_window(sample[0], bfly_buff,FFT_N);
    1296:	88 ea       	ldi	r24, 0xA8	; 168
    1298:	95 e0       	ldi	r25, 0x05	; 5
    129a:	27 e9       	ldi	r18, 0x97	; 151
    129c:	31 e0       	ldi	r19, 0x01	; 1
    129e:	b9 01       	movw	r22, r18
    12a0:	40 e8       	ldi	r20, 0x80	; 128
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <fft_input_no_window>
		 fft_execute(bfly_buff);
    12a8:	87 e9       	ldi	r24, 0x97	; 151
    12aa:	91 e0       	ldi	r25, 0x01	; 1
    12ac:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <fft_execute>
		 fft_output(bfly_buff, spektrum); 
    12b0:	87 e9       	ldi	r24, 0x97	; 151
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	24 e2       	ldi	r18, 0x24	; 36
    12b6:	35 e0       	ldi	r19, 0x05	; 5
    12b8:	b9 01       	movw	r22, r18
    12ba:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <fft_output>
			
	 
     usart_write( hello , 17);
    12be:	80 e6       	ldi	r24, 0x60	; 96
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	61 e1       	ldi	r22, 0x11	; 17
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	0e 94 c1 00 	call	0x182	; 0x182 <usart_write>
    
  	  
	  
	   
	    LED_all_right();
    12ca:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <LED_all_right>
	
	 
	  point= &content;
    12ce:	87 e9       	ldi	r24, 0x97	; 151
    12d0:	93 e0       	ldi	r25, 0x03	; 3
    12d2:	9b 83       	std	Y+3, r25	; 0x03
    12d4:	8a 83       	std	Y+2, r24	; 0x02
	 content.diff=0 ;
    12d6:	10 92 a3 03 	sts	0x03A3, r1
	 
	 i=if_thieved();//是否盗版
    12da:	0e 94 2a 07 	call	0xe54	; 0xe54 <if_thieved>
    12de:	89 83       	std	Y+1, r24	; 0x01
	 
	 if(i)
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	88 23       	and	r24, r24
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <main+0x12c>
    12e6:	7e c1       	rjmp	.+764    	; 0x15e4 <main+0x428>
	
	  
	   
	
	   
	   power_on();//just for test
    12e8:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <power_on>
	   
	   adjust_gain(1);//目前为PA4，PA5 为空 //000001 对应PA2接入1k欧， 
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	0e 94 b7 06 	call	0xd6e	; 0xd6e <adjust_gain>
	  
	   adjust_gain(0);//32 对应PA7接入100欧， 
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	0e 94 b7 06 	call	0xd6e	; 0xd6e <adjust_gain>
	   gain_ready(0);
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	0e 94 df 06 	call	0xdbe	; 0xdbe <gain_ready>
	   main_adc(); //sleep 
    12fe:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <main_adc>
      power_off();//just for test
    1302:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <power_off>
2.         增加（4k 128字，需要32ms。每5分钟调一次即可。对应9375次，可以考虑1万次的最大最小，如果都很小可以加倍）。
3.         记忆上次的最佳增益，要保存？

*/

 if ((pingpang_fresh ==0x01)&& (over==1 ) )//new frame createded   
    1306:	80 91 91 01 	lds	r24, 0x0191
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	09 f0       	breq	.+2      	; 0x1310 <main+0x154>
    130e:	bf c0       	rjmp	.+382    	; 0x148e <main+0x2d2>
    1310:	80 91 81 00 	lds	r24, 0x0081
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	09 f0       	breq	.+2      	; 0x131a <main+0x15e>
    1318:	ba c0       	rjmp	.+372    	; 0x148e <main+0x2d2>
				 
	    {     count_sample++;
    131a:	80 91 8a 01 	lds	r24, 0x018A
    131e:	90 91 8b 01 	lds	r25, 0x018B
    1322:	01 96       	adiw	r24, 0x01	; 1
    1324:	90 93 8b 01 	sts	0x018B, r25
    1328:	80 93 8a 01 	sts	0x018A, r24
				 																
				  // usart_write(sample[0] ,256);
				  
				  
				  if(count_sample== 200 ||count_sample==201) 
    132c:	80 91 8a 01 	lds	r24, 0x018A
    1330:	90 91 8b 01 	lds	r25, 0x018B
    1334:	88 3c       	cpi	r24, 0xC8	; 200
    1336:	91 05       	cpc	r25, r1
    1338:	39 f0       	breq	.+14     	; 0x1348 <main+0x18c>
    133a:	80 91 8a 01 	lds	r24, 0x018A
    133e:	90 91 8b 01 	lds	r25, 0x018B
    1342:	89 3c       	cpi	r24, 0xC9	; 201
    1344:	91 05       	cpc	r25, r1
    1346:	69 f4       	brne	.+26     	; 0x1362 <main+0x1a6>
				  
				  {
				  
				 bias= find_bias(sample[0] ,FFT_N );// 16秒后测便偏移。rc=（2+5k）*10u=70*10-3=
    1348:	88 ea       	ldi	r24, 0xA8	; 168
    134a:	95 e0       	ldi	r25, 0x05	; 5
    134c:	60 e8       	ldi	r22, 0x80	; 128
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	0e 94 b5 01 	call	0x36a	; 0x36a <find_bias>
    1354:	90 93 7e 00 	sts	0x007E, r25
    1358:	80 93 7d 00 	sts	0x007D, r24
				  
				  adjust_gain(32);//适当增益
    135c:	80 e2       	ldi	r24, 0x20	; 32
    135e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <adjust_gain>
				  }
				  
				  
				  
				  
				 if(count_sample>300) 
    1362:	80 91 8a 01 	lds	r24, 0x018A
    1366:	90 91 8b 01 	lds	r25, 0x018B
    136a:	21 e0       	ldi	r18, 0x01	; 1
    136c:	8d 32       	cpi	r24, 0x2D	; 45
    136e:	92 07       	cpc	r25, r18
    1370:	08 f4       	brcc	.+2      	; 0x1374 <main+0x1b8>
    1372:	88 c0       	rjmp	.+272    	; 0x1484 <main+0x2c8>
					 
					
					
                      
 
				 sendpang=0;
    1374:	10 92 94 01 	sts	0x0194, r1
				 posi_uart=0;
    1378:	10 92 93 01 	sts	0x0193, r1
    137c:	10 92 92 01 	sts	0x0192, r1
				 over=1;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	80 93 81 00 	sts	0x0081, r24
					//  usart_interrupt_en();	
					 
                 i=off_bias(sample[0] ,FFT_N );//-512
    1386:	88 ea       	ldi	r24, 0xA8	; 168
    1388:	95 e0       	ldi	r25, 0x05	; 5
    138a:	60 e8       	ldi	r22, 0x80	; 128
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	0e 94 0c 02 	call	0x418	; 0x418 <off_bias>
    1392:	89 83       	std	Y+1, r24	; 0x01
		    	// copy_buff(sample[0],spektrum_sample_buff_old, FFT_N );  //back
				
				if (i==1 )   //增益没调整
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	09 f0       	breq	.+2      	; 0x139c <main+0x1e0>
    139a:	64 c0       	rjmp	.+200    	; 0x1464 <main+0x2a8>
				  
		      {	
				  point->energy=energy_do(sample[0] ,FFT_N );
    139c:	88 ea       	ldi	r24, 0xA8	; 168
    139e:	95 e0       	ldi	r25, 0x05	; 5
    13a0:	60 e8       	ldi	r22, 0x80	; 128
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	0e 94 03 03 	call	0x606	; 0x606 <energy_do>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	ea 81       	ldd	r30, Y+2	; 0x02
    13ae:	fb 81       	ldd	r31, Y+3	; 0x03
    13b0:	80 87       	std	Z+8, r24	; 0x08
    13b2:	91 87       	std	Z+9, r25	; 0x09
    13b4:	a2 87       	std	Z+10, r26	; 0x0a
    13b6:	b3 87       	std	Z+11, r27	; 0x0b
		    	  point->diff =cross_zero(sample[0] ,FFT_N );
    13b8:	88 ea       	ldi	r24, 0xA8	; 168
    13ba:	95 e0       	ldi	r25, 0x05	; 5
    13bc:	60 e8       	ldi	r22, 0x80	; 128
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	0e 94 a7 02 	call	0x54e	; 0x54e <cross_zero>
    13c4:	ea 81       	ldd	r30, Y+2	; 0x02
    13c6:	fb 81       	ldd	r31, Y+3	; 0x03
    13c8:	84 87       	std	Z+12, r24	; 0x0c
								 
			 	
				
			        if ((point->energy>ENERGY)&&(point->diff>DIFF_LOW ))
    13ca:	ea 81       	ldd	r30, Y+2	; 0x02
    13cc:	fb 81       	ldd	r31, Y+3	; 0x03
    13ce:	80 85       	ldd	r24, Z+8	; 0x08
    13d0:	91 85       	ldd	r25, Z+9	; 0x09
    13d2:	a2 85       	ldd	r26, Z+10	; 0x0a
    13d4:	b3 85       	ldd	r27, Z+11	; 0x0b
    13d6:	81 34       	cpi	r24, 0x41	; 65
    13d8:	2c e9       	ldi	r18, 0x9C	; 156
    13da:	92 07       	cpc	r25, r18
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	a2 07       	cpc	r26, r18
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	b2 07       	cpc	r27, r18
    13e4:	58 f0       	brcs	.+22     	; 0x13fc <main+0x240>
    13e6:	ea 81       	ldd	r30, Y+2	; 0x02
    13e8:	fb 81       	ldd	r31, Y+3	; 0x03
    13ea:	84 85       	ldd	r24, Z+12	; 0x0c
    13ec:	89 32       	cpi	r24, 0x29	; 41
    13ee:	30 f0       	brcs	.+12     	; 0x13fc <main+0x240>
                        {
                           judge_active(point,0);//sample[0]
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	9b 81       	ldd	r25, Y+3	; 0x03
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <judge_active>
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <main+0x248>
                     
				         }
                     else
			   
			            {
			             silent(point);
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1400:	0e 94 77 06 	call	0xcee	; 0xcee <silent>
			             }
			      			
  			            //	correction (spektrum,spektrum_sample_buff_old,FFT_N/2 );
      		         	// index= peak(spektrum, FFT_N/2);
				
			       	if (point->count_pitch>CONTINUE_PITCH)
    1404:	ea 81       	ldd	r30, Y+2	; 0x02
    1406:	fb 81       	ldd	r31, Y+3	; 0x03
    1408:	82 81       	ldd	r24, Z+2	; 0x02
    140a:	81 3a       	cpi	r24, 0xA1	; 161
    140c:	28 f0       	brcs	.+10     	; 0x1418 <main+0x25c>
				        {
				         point->flg.pitch_flg=0;//鼾声持续过长，怀疑是假的。
    140e:	ea 81       	ldd	r30, Y+2	; 0x02
    1410:	fb 81       	ldd	r31, Y+3	; 0x03
    1412:	80 81       	ld	r24, Z
    1414:	8f 7e       	andi	r24, 0xEF	; 239
    1416:	80 83       	st	Z, r24
					
				        }
					if	(point->energy<ENERGY_low)
    1418:	ea 81       	ldd	r30, Y+2	; 0x02
    141a:	fb 81       	ldd	r31, Y+3	; 0x03
    141c:	80 85       	ldd	r24, Z+8	; 0x08
    141e:	91 85       	ldd	r25, Z+9	; 0x09
    1420:	a2 85       	ldd	r26, Z+10	; 0x0a
    1422:	b3 85       	ldd	r27, Z+11	; 0x0b
    1424:	80 37       	cpi	r24, 0x70	; 112
    1426:	27 e1       	ldi	r18, 0x17	; 23
    1428:	92 07       	cpc	r25, r18
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	a2 07       	cpc	r26, r18
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	b2 07       	cpc	r27, r18
    1432:	50 f4       	brcc	.+20     	; 0x1448 <main+0x28c>
						silent_time++;
    1434:	80 91 8c 01 	lds	r24, 0x018C
    1438:	90 91 8d 01 	lds	r25, 0x018D
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	90 93 8d 01 	sts	0x018D, r25
    1442:	80 93 8c 01 	sts	0x018C, r24
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <main+0x294>
				     else     silent_time=0;
    1448:	10 92 8d 01 	sts	0x018D, r1
    144c:	10 92 8c 01 	sts	0x018C, r1
						
					if 	(	silent_time>SILENT_TIME)//180s 既3分钟没动静就认为安静了,后改为20s
    1450:	80 91 8c 01 	lds	r24, 0x018C
    1454:	90 91 8d 01 	lds	r25, 0x018D
    1458:	22 e0       	ldi	r18, 0x02	; 2
    145a:	82 37       	cpi	r24, 0x72	; 114
    145c:	92 07       	cpc	r25, r18
    145e:	10 f0       	brcs	.+4      	; 0x1464 <main+0x2a8>
						I_need_sleep();
    1460:	0e 94 20 07 	call	0xe40	; 0xe40 <I_need_sleep>
						
					
                  }//	if (i==1 )   //增益没调整
				  
				  
				      if(count_sample>1300) // 因为两边都加，所以达到9375 为5分钟 
    1464:	80 91 8a 01 	lds	r24, 0x018A
    1468:	90 91 8b 01 	lds	r25, 0x018B
    146c:	25 e0       	ldi	r18, 0x05	; 5
    146e:	85 31       	cpi	r24, 0x15	; 21
    1470:	92 07       	cpc	r25, r18
    1472:	40 f0       	brcs	.+16     	; 0x1484 <main+0x2c8>
                    
					 {
					 
					  count_sample=210;;
    1474:	82 ed       	ldi	r24, 0xD2	; 210
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	90 93 8b 01 	sts	0x018B, r25
    147c:	80 93 8a 01 	sts	0x018A, r24
					 
					  AGC();  
    1480:	0e 94 8a 08 	call	0x1114	; 0x1114 <AGC>
				  
				  
				  
				}  // if（count_sampl>10000)  
				
		pingpang_fresh &=0xfe;// new feame free
    1484:	80 91 91 01 	lds	r24, 0x0191
    1488:	8e 7f       	andi	r24, 0xFE	; 254
    148a:	80 93 91 01 	sts	0x0191, r24
			}//if ((pingpang_fresh ==0x01)&& (over==1 ) )//new frame createded  
				
		   	if ( (pingpang_fresh ==0x02)&& (over==1) )//new frame  createded  
    148e:	80 91 91 01 	lds	r24, 0x0191
    1492:	82 30       	cpi	r24, 0x02	; 2
    1494:	09 f0       	breq	.+2      	; 0x1498 <main+0x2dc>
    1496:	37 cf       	rjmp	.-402    	; 0x1306 <main+0x14a>
    1498:	80 91 81 00 	lds	r24, 0x0081
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	09 f0       	breq	.+2      	; 0x14a2 <main+0x2e6>
    14a0:	32 cf       	rjmp	.-412    	; 0x1306 <main+0x14a>
																			 
			{ 
			 count_sample++;
    14a2:	80 91 8a 01 	lds	r24, 0x018A
    14a6:	90 91 8b 01 	lds	r25, 0x018B
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	90 93 8b 01 	sts	0x018B, r25
    14b0:	80 93 8a 01 	sts	0x018A, r24
			 
			 
				 if(count_sample>300) //10秒
    14b4:	80 91 8a 01 	lds	r24, 0x018A
    14b8:	90 91 8b 01 	lds	r25, 0x018B
    14bc:	21 e0       	ldi	r18, 0x01	; 1
    14be:	8d 32       	cpi	r24, 0x2D	; 45
    14c0:	92 07       	cpc	r25, r18
    14c2:	08 f4       	brcc	.+2      	; 0x14c6 <main+0x30a>
    14c4:	89 c0       	rjmp	.+274    	; 0x15d8 <main+0x41c>
			 
					
					
				 //usart_write(sample[1] ,256);
				  
				 sendpang=1;
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	80 93 94 01 	sts	0x0194, r24
				 posi_uart=0;
    14cc:	10 92 93 01 	sts	0x0193, r1
    14d0:	10 92 92 01 	sts	0x0192, r1
				 over=1;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	80 93 81 00 	sts	0x0081, r24
			 	 //usart_interrupt_en();
				 
				 
				 
				i=off_bias(sample[1] ,FFT_N );
    14da:	88 ea       	ldi	r24, 0xA8	; 168
    14dc:	96 e0       	ldi	r25, 0x06	; 6
    14de:	60 e8       	ldi	r22, 0x80	; 128
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	0e 94 0c 02 	call	0x418	; 0x418 <off_bias>
    14e6:	89 83       	std	Y+1, r24	; 0x01
				if (i==1 )   //增益没调整
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	81 30       	cpi	r24, 0x01	; 1
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <main+0x334>
    14ee:	64 c0       	rjmp	.+200    	; 0x15b8 <main+0x3fc>
				  
		      {
				point->energy=energy_do(sample[1] ,FFT_N );
    14f0:	88 ea       	ldi	r24, 0xA8	; 168
    14f2:	96 e0       	ldi	r25, 0x06	; 6
    14f4:	60 e8       	ldi	r22, 0x80	; 128
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	0e 94 03 03 	call	0x606	; 0x606 <energy_do>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	ea 81       	ldd	r30, Y+2	; 0x02
    1502:	fb 81       	ldd	r31, Y+3	; 0x03
    1504:	80 87       	std	Z+8, r24	; 0x08
    1506:	91 87       	std	Z+9, r25	; 0x09
    1508:	a2 87       	std	Z+10, r26	; 0x0a
    150a:	b3 87       	std	Z+11, r27	; 0x0b
				 
				point->diff =cross_zero(sample[1] ,FFT_N );
    150c:	88 ea       	ldi	r24, 0xA8	; 168
    150e:	96 e0       	ldi	r25, 0x06	; 6
    1510:	60 e8       	ldi	r22, 0x80	; 128
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	0e 94 a7 02 	call	0x54e	; 0x54e <cross_zero>
    1518:	ea 81       	ldd	r30, Y+2	; 0x02
    151a:	fb 81       	ldd	r31, Y+3	; 0x03
    151c:	84 87       	std	Z+12, r24	; 0x0c
					
					
			     	if ((point->energy>ENERGY)||(point->diff>DIFF_LOW ))
    151e:	ea 81       	ldd	r30, Y+2	; 0x02
    1520:	fb 81       	ldd	r31, Y+3	; 0x03
    1522:	80 85       	ldd	r24, Z+8	; 0x08
    1524:	91 85       	ldd	r25, Z+9	; 0x09
    1526:	a2 85       	ldd	r26, Z+10	; 0x0a
    1528:	b3 85       	ldd	r27, Z+11	; 0x0b
    152a:	81 34       	cpi	r24, 0x41	; 65
    152c:	2c e9       	ldi	r18, 0x9C	; 156
    152e:	92 07       	cpc	r25, r18
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	a2 07       	cpc	r26, r18
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	b2 07       	cpc	r27, r18
    1538:	28 f4       	brcc	.+10     	; 0x1544 <main+0x388>
    153a:	ea 81       	ldd	r30, Y+2	; 0x02
    153c:	fb 81       	ldd	r31, Y+3	; 0x03
    153e:	84 85       	ldd	r24, Z+12	; 0x0c
    1540:	89 32       	cpi	r24, 0x29	; 41
    1542:	30 f0       	brcs	.+12     	; 0x1550 <main+0x394>
                      {
                        judge_active(point,1);//sample[1]
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	9b 81       	ldd	r25, Y+3	; 0x03
    1548:	61 e0       	ldi	r22, 0x01	; 1
    154a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <judge_active>
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <main+0x39c>
						   
			    	  }
                 else
			   
			         {
			           silent(point);
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	9b 81       	ldd	r25, Y+3	; 0x03
    1554:	0e 94 77 06 	call	0xcee	; 0xcee <silent>
			         }
			   
			   //	correction (spektrum,spektrum_sample_buff_old,FFT_N/2 );
      			// index= peak(spektrum, FFT_N/2);
				
				    if (point->count_pitch>CONTINUE_PITCH)
    1558:	ea 81       	ldd	r30, Y+2	; 0x02
    155a:	fb 81       	ldd	r31, Y+3	; 0x03
    155c:	82 81       	ldd	r24, Z+2	; 0x02
    155e:	81 3a       	cpi	r24, 0xA1	; 161
    1560:	28 f0       	brcs	.+10     	; 0x156c <main+0x3b0>
				      {
				        point->flg.pitch_flg=0;//鼾声持续过长，怀疑是假的。
    1562:	ea 81       	ldd	r30, Y+2	; 0x02
    1564:	fb 81       	ldd	r31, Y+3	; 0x03
    1566:	80 81       	ld	r24, Z
    1568:	8f 7e       	andi	r24, 0xEF	; 239
    156a:	80 83       	st	Z, r24
			          }
						

                	if	(point->energy<ENERGY_low)
    156c:	ea 81       	ldd	r30, Y+2	; 0x02
    156e:	fb 81       	ldd	r31, Y+3	; 0x03
    1570:	80 85       	ldd	r24, Z+8	; 0x08
    1572:	91 85       	ldd	r25, Z+9	; 0x09
    1574:	a2 85       	ldd	r26, Z+10	; 0x0a
    1576:	b3 85       	ldd	r27, Z+11	; 0x0b
    1578:	80 37       	cpi	r24, 0x70	; 112
    157a:	27 e1       	ldi	r18, 0x17	; 23
    157c:	92 07       	cpc	r25, r18
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	a2 07       	cpc	r26, r18
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	b2 07       	cpc	r27, r18
    1586:	50 f4       	brcc	.+20     	; 0x159c <main+0x3e0>
						silent_time++;
    1588:	80 91 8c 01 	lds	r24, 0x018C
    158c:	90 91 8d 01 	lds	r25, 0x018D
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	90 93 8d 01 	sts	0x018D, r25
    1596:	80 93 8c 01 	sts	0x018C, r24
    159a:	04 c0       	rjmp	.+8      	; 0x15a4 <main+0x3e8>
					  else     silent_time=0;	
    159c:	10 92 8d 01 	sts	0x018D, r1
    15a0:	10 92 8c 01 	sts	0x018C, r1
					if 	(	silent_time>SILENT_TIME)//180s 既3分钟没动静就认为安静了，后改为20s
    15a4:	80 91 8c 01 	lds	r24, 0x018C
    15a8:	90 91 8d 01 	lds	r25, 0x018D
    15ac:	22 e0       	ldi	r18, 0x02	; 2
    15ae:	82 37       	cpi	r24, 0x72	; 114
    15b0:	92 07       	cpc	r25, r18
    15b2:	10 f0       	brcs	.+4      	; 0x15b8 <main+0x3fc>
						I_need_sleep();
    15b4:	0e 94 20 07 	call	0xe40	; 0xe40 <I_need_sleep>
					 
							 
		 /*	*/
			       }//if (i==1 )   //增益没调整
				   
				 if(count_sample>1300) // 因为两边都加，所以达到9375 为5分钟 
    15b8:	80 91 8a 01 	lds	r24, 0x018A
    15bc:	90 91 8b 01 	lds	r25, 0x018B
    15c0:	25 e0       	ldi	r18, 0x05	; 5
    15c2:	85 31       	cpi	r24, 0x15	; 21
    15c4:	92 07       	cpc	r25, r18
    15c6:	40 f0       	brcs	.+16     	; 0x15d8 <main+0x41c>
                    
					{
					count_sample=210;
    15c8:	82 ed       	ldi	r24, 0xD2	; 210
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	90 93 8b 01 	sts	0x018B, r25
    15d0:	80 93 8a 01 	sts	0x018A, r24
					 
					  AGC();     
    15d4:	0e 94 8a 08 	call	0x1114	; 0x1114 <AGC>
					}	
					
					
		    	}//	if（count_sampl>10000)			   
					   
			    pingpang_fresh &=0xfd;// new feame free				 
    15d8:	80 91 91 01 	lds	r24, 0x0191
    15dc:	8d 7f       	andi	r24, 0xFD	; 253
    15de:	80 93 91 01 	sts	0x0191, r24
    15e2:	91 ce       	rjmp	.-734    	; 0x1306 <main+0x14a>
		      }	//if ( (pingpang_fresh ==0x02)&& (over==1) )//new frame  createded  
		 	
		}//	for(;;) {
	}//if_thieved();//是否盗版
 }
    15e4:	26 96       	adiw	r28, 0x06	; 6
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <tbl_window>:
    15f6:	3d 0a       	sbc	r3, r29
    15f8:	4f 0a       	sbc	r4, r31
    15fa:	85 0a       	sbc	r8, r21
    15fc:	e0 0a       	sbc	r14, r16
    15fe:	5e 0b       	sbc	r21, r30
    1600:	01 0c       	add	r0, r1
    1602:	c6 0c       	add	r12, r6
    1604:	ae 0d       	add	r26, r14
    1606:	b8 0e       	add	r11, r24
    1608:	e4 0f       	add	r30, r20
    160a:	31 11       	cpse	r19, r1
    160c:	9d 12       	cpse	r9, r29
    160e:	29 14       	cp	r2, r9
    1610:	d3 15       	cp	r29, r3
    1612:	9a 17       	cp	r25, r26
    1614:	7d 19       	sub	r23, r13
    1616:	7c 1b       	sub	r23, r28
    1618:	93 1d       	adc	r25, r3
    161a:	c4 1f       	adc	r28, r20
    161c:	0b 22       	and	r0, r27
    161e:	68 24       	eor	r6, r8
    1620:	d9 26       	eor	r13, r25
    1622:	5c 29       	or	r21, r12
    1624:	f1 2b       	or	r31, r17
    1626:	96 2e       	mov	r9, r22
    1628:	48 31       	cpi	r20, 0x18	; 24
    162a:	06 34       	cpi	r16, 0x46	; 70
    162c:	cf 36       	cpi	r28, 0x6F	; 111
    162e:	a1 39       	cpi	r26, 0x91	; 145
    1630:	7a 3c       	cpi	r23, 0xCA	; 202
    1632:	58 3f       	cpi	r21, 0xF8	; 248
    1634:	3a 42       	sbci	r19, 0x2A	; 42
    1636:	1e 45       	sbci	r17, 0x5E	; 94
    1638:	01 48       	sbci	r16, 0x81	; 129
    163a:	e3 4a       	sbci	r30, 0xA3	; 163
    163c:	c1 4d       	sbci	r28, 0xD1	; 209
    163e:	9a 50       	subi	r25, 0x0A	; 10
    1640:	6c 53       	subi	r22, 0x3C	; 60
    1642:	35 56       	subi	r19, 0x65	; 101
    1644:	f4 58       	subi	r31, 0x84	; 132
    1646:	a6 5b       	subi	r26, 0xB6	; 182
    1648:	4a 5e       	subi	r20, 0xEA	; 234
    164a:	df 60       	ori	r29, 0x0F	; 15
    164c:	63 63       	ori	r22, 0x33	; 51
    164e:	d4 65       	ori	r29, 0x54	; 84
    1650:	31 68       	ori	r19, 0x81	; 129
    1652:	78 6a       	ori	r23, 0xA8	; 168
    1654:	a8 6c       	ori	r26, 0xC8	; 200
    1656:	c0 6e       	ori	r28, 0xE0	; 224
    1658:	be 70       	andi	r27, 0x0E	; 14
    165a:	a1 72       	andi	r26, 0x21	; 33
    165c:	68 74       	andi	r22, 0x48	; 72
    165e:	12 76       	andi	r17, 0x62	; 98
    1660:	9e 77       	andi	r25, 0x7E	; 126
    1662:	0b 79       	andi	r16, 0x9B	; 155
    1664:	57 7a       	andi	r21, 0xA7	; 167
    1666:	83 7b       	andi	r24, 0xB3	; 179
    1668:	8d 7c       	andi	r24, 0xCD	; 205
    166a:	75 7d       	andi	r23, 0xD5	; 213
    166c:	3b 7e       	andi	r19, 0xEB	; 235
    166e:	dd 7e       	andi	r29, 0xED	; 237
    1670:	5b 7f       	andi	r21, 0xFB	; 251
    1672:	b6 7f       	andi	r27, 0xF6	; 246
    1674:	ec 7f       	andi	r30, 0xFC	; 252
    1676:	fe 7f       	andi	r31, 0xFE	; 254
    1678:	ec 7f       	andi	r30, 0xFC	; 252
    167a:	b6 7f       	andi	r27, 0xF6	; 246
    167c:	5b 7f       	andi	r21, 0xFB	; 251
    167e:	dd 7e       	andi	r29, 0xED	; 237
    1680:	3b 7e       	andi	r19, 0xEB	; 235
    1682:	75 7d       	andi	r23, 0xD5	; 213
    1684:	8d 7c       	andi	r24, 0xCD	; 205
    1686:	83 7b       	andi	r24, 0xB3	; 179
    1688:	57 7a       	andi	r21, 0xA7	; 167
    168a:	0b 79       	andi	r16, 0x9B	; 155
    168c:	9e 77       	andi	r25, 0x7E	; 126
    168e:	12 76       	andi	r17, 0x62	; 98
    1690:	68 74       	andi	r22, 0x48	; 72
    1692:	a1 72       	andi	r26, 0x21	; 33
    1694:	be 70       	andi	r27, 0x0E	; 14
    1696:	c0 6e       	ori	r28, 0xE0	; 224
    1698:	a8 6c       	ori	r26, 0xC8	; 200
    169a:	78 6a       	ori	r23, 0xA8	; 168
    169c:	31 68       	ori	r19, 0x81	; 129
    169e:	d4 65       	ori	r29, 0x54	; 84
    16a0:	63 63       	ori	r22, 0x33	; 51
    16a2:	df 60       	ori	r29, 0x0F	; 15
    16a4:	4a 5e       	subi	r20, 0xEA	; 234
    16a6:	a6 5b       	subi	r26, 0xB6	; 182
    16a8:	f4 58       	subi	r31, 0x84	; 132
    16aa:	35 56       	subi	r19, 0x65	; 101
    16ac:	6c 53       	subi	r22, 0x3C	; 60
    16ae:	9a 50       	subi	r25, 0x0A	; 10
    16b0:	c1 4d       	sbci	r28, 0xD1	; 209
    16b2:	e3 4a       	sbci	r30, 0xA3	; 163
    16b4:	01 48       	sbci	r16, 0x81	; 129
    16b6:	1e 45       	sbci	r17, 0x5E	; 94
    16b8:	3a 42       	sbci	r19, 0x2A	; 42
    16ba:	58 3f       	cpi	r21, 0xF8	; 248
    16bc:	7a 3c       	cpi	r23, 0xCA	; 202
    16be:	a1 39       	cpi	r26, 0x91	; 145
    16c0:	cf 36       	cpi	r28, 0x6F	; 111
    16c2:	06 34       	cpi	r16, 0x46	; 70
    16c4:	48 31       	cpi	r20, 0x18	; 24
    16c6:	96 2e       	mov	r9, r22
    16c8:	f1 2b       	or	r31, r17
    16ca:	5c 29       	or	r21, r12
    16cc:	d9 26       	eor	r13, r25
    16ce:	68 24       	eor	r6, r8
    16d0:	0b 22       	and	r0, r27
    16d2:	c4 1f       	adc	r28, r20
    16d4:	93 1d       	adc	r25, r3
    16d6:	7c 1b       	sub	r23, r28
    16d8:	7e 19       	sub	r23, r14
    16da:	9a 17       	cp	r25, r26
    16dc:	d3 15       	cp	r29, r3
    16de:	29 14       	cp	r2, r9
    16e0:	9d 12       	cpse	r9, r29
    16e2:	31 11       	cpse	r19, r1
    16e4:	e4 0f       	add	r30, r20
    16e6:	b8 0e       	add	r11, r24
    16e8:	ae 0d       	add	r26, r14
    16ea:	c6 0c       	add	r12, r6
    16ec:	01 0c       	add	r0, r1
    16ee:	5e 0b       	sbc	r21, r30
    16f0:	e0 0a       	sbc	r14, r16
    16f2:	85 0a       	sbc	r8, r21
    16f4:	4f 0a       	sbc	r4, r31

000016f6 <tbl_cos_sin>:
    16f6:	ff 7f       	andi	r31, 0xFF	; 255
    16f8:	00 00       	nop
    16fa:	d7 7f       	andi	r29, 0xF7	; 247
    16fc:	47 06       	cpc	r4, r23
    16fe:	61 7f       	andi	r22, 0xF1	; 241
    1700:	8b 0c       	add	r8, r11
    1702:	9c 7e       	andi	r25, 0xEC	; 236
    1704:	c7 12       	cpse	r12, r23
    1706:	89 7d       	andi	r24, 0xD9	; 217
    1708:	f8 18       	sub	r15, r8
    170a:	29 7c       	andi	r18, 0xC9	; 201
    170c:	19 1f       	adc	r17, r25
    170e:	7c 7a       	andi	r23, 0xAC	; 172
    1710:	27 25       	eor	r18, r7
    1712:	83 78       	andi	r24, 0x83	; 131
    1714:	1e 2b       	or	r17, r30
    1716:	40 76       	andi	r20, 0x60	; 96
    1718:	fb 30       	cpi	r31, 0x0B	; 11
    171a:	b5 73       	andi	r27, 0x35	; 53
    171c:	b9 36       	cpi	r27, 0x69	; 105
    171e:	e1 70       	andi	r30, 0x01	; 1
    1720:	56 3c       	cpi	r21, 0xC6	; 198
    1722:	c9 6d       	ori	r28, 0xD9	; 217
    1724:	cd 41       	sbci	r28, 0x1D	; 29
    1726:	6c 6a       	ori	r22, 0xAC	; 172
    1728:	1c 47       	sbci	r17, 0x7C	; 124
    172a:	ce 66       	ori	r28, 0x6E	; 110
    172c:	3f 4c       	sbci	r19, 0xCF	; 207
    172e:	f1 62       	ori	r31, 0x21	; 33
    1730:	33 51       	subi	r19, 0x13	; 19
    1732:	d6 5e       	subi	r29, 0xE6	; 230
    1734:	f4 55       	subi	r31, 0x54	; 84
    1736:	81 5a       	subi	r24, 0xA1	; 161
    1738:	81 5a       	subi	r24, 0xA1	; 161
    173a:	f4 55       	subi	r31, 0x54	; 84
    173c:	d6 5e       	subi	r29, 0xE6	; 230
    173e:	33 51       	subi	r19, 0x13	; 19
    1740:	f1 62       	ori	r31, 0x21	; 33
    1742:	3f 4c       	sbci	r19, 0xCF	; 207
    1744:	ce 66       	ori	r28, 0x6E	; 110
    1746:	1c 47       	sbci	r17, 0x7C	; 124
    1748:	6c 6a       	ori	r22, 0xAC	; 172
    174a:	cd 41       	sbci	r28, 0x1D	; 29
    174c:	c9 6d       	ori	r28, 0xD9	; 217
    174e:	56 3c       	cpi	r21, 0xC6	; 198
    1750:	e1 70       	andi	r30, 0x01	; 1
    1752:	b9 36       	cpi	r27, 0x69	; 105
    1754:	b5 73       	andi	r27, 0x35	; 53
    1756:	fb 30       	cpi	r31, 0x0B	; 11
    1758:	40 76       	andi	r20, 0x60	; 96
    175a:	1e 2b       	or	r17, r30
    175c:	83 78       	andi	r24, 0x83	; 131
    175e:	27 25       	eor	r18, r7
    1760:	7c 7a       	andi	r23, 0xAC	; 172
    1762:	19 1f       	adc	r17, r25
    1764:	29 7c       	andi	r18, 0xC9	; 201
    1766:	f8 18       	sub	r15, r8
    1768:	89 7d       	andi	r24, 0xD9	; 217
    176a:	c7 12       	cpse	r12, r23
    176c:	9c 7e       	andi	r25, 0xEC	; 236
    176e:	8b 0c       	add	r8, r11
    1770:	61 7f       	andi	r22, 0xF1	; 241
    1772:	47 06       	cpc	r4, r23
    1774:	d7 7f       	andi	r29, 0xF7	; 247
    1776:	00 00       	nop
    1778:	fe 7f       	andi	r31, 0xFE	; 254
    177a:	b9 f9       	.word	0xf9b9	; ????
    177c:	d7 7f       	andi	r29, 0xF7	; 247
    177e:	75 f3       	brhs	.-36     	; 0x175c <tbl_cos_sin+0x66>
    1780:	61 7f       	andi	r22, 0xF1	; 241
    1782:	39 ed       	ldi	r19, 0xD9	; 217
    1784:	9c 7e       	andi	r25, 0xEC	; 236
    1786:	08 e7       	ldi	r16, 0x78	; 120
    1788:	89 7d       	andi	r24, 0xD9	; 217
    178a:	e7 e0       	ldi	r30, 0x07	; 7
    178c:	29 7c       	andi	r18, 0xC9	; 201
    178e:	d9 da       	rcall	.-2638   	; 0xd42 <silent+0x54>
    1790:	7c 7a       	andi	r23, 0xAC	; 172
    1792:	e2 d4       	rcall	.+2500   	; 0x2158 <moter+0xbe>
    1794:	83 78       	andi	r24, 0x83	; 131
    1796:	05 cf       	rjmp	.-502    	; 0x15a2 <main+0x3e6>
    1798:	40 76       	andi	r20, 0x60	; 96
    179a:	47 c9       	rjmp	.-3442   	; 0xa2a <adjust+0xa>
    179c:	b5 73       	andi	r27, 0x35	; 53
    179e:	aa c3       	rjmp	.+1876   	; 0x1ef4 <init_AD+0x1e>
    17a0:	e1 70       	andi	r30, 0x01	; 1
    17a2:	33 be       	out	0x33, r3	; 51
    17a4:	c9 6d       	ori	r28, 0xD9	; 217
    17a6:	e4 b8       	out	0x04, r14	; 4
    17a8:	6c 6a       	ori	r22, 0xAC	; 172
    17aa:	c1 b3       	in	r28, 0x11	; 17
    17ac:	ce 66       	ori	r28, 0x6E	; 110
    17ae:	cd ae       	std	Y+61, r12	; 0x3d
    17b0:	f1 62       	ori	r31, 0x21	; 33
    17b2:	0c aa       	std	Y+52, r0	; 0x34
    17b4:	d6 5e       	subi	r29, 0xE6	; 230
    17b6:	7f a5       	ldd	r23, Y+47	; 0x2f
    17b8:	81 5a       	subi	r24, 0xA1	; 161
    17ba:	2a a1       	ldd	r18, Y+34	; 0x22
    17bc:	f5 55       	subi	r31, 0x55	; 85
    17be:	0f 9d       	mul	r16, r15
    17c0:	33 51       	subi	r19, 0x13	; 19
    17c2:	32 99       	sbic	0x06, 2	; 6
    17c4:	3f 4c       	sbci	r19, 0xCF	; 207
    17c6:	94 95       	.word	0x9594	; ????
    17c8:	1c 47       	sbci	r17, 0x7C	; 124
    17ca:	37 92       	.word	0x9237	; ????
    17cc:	cd 41       	sbci	r28, 0x1D	; 29
    17ce:	1f 8f       	std	Y+31, r17	; 0x1f
    17d0:	56 3c       	cpi	r21, 0xC6	; 198
    17d2:	4c 8c       	ldd	r4, Y+28	; 0x1c
    17d4:	b9 36       	cpi	r27, 0x69	; 105
    17d6:	c0 89       	ldd	r28, Z+16	; 0x10
    17d8:	fb 30       	cpi	r31, 0x0B	; 11
    17da:	7d 87       	std	Y+13, r23	; 0x0d
    17dc:	1e 2b       	or	r17, r30
    17de:	84 85       	ldd	r24, Z+12	; 0x0c
    17e0:	27 25       	eor	r18, r7
    17e2:	d8 83       	st	Y, r29
    17e4:	19 1f       	adc	r17, r25
    17e6:	77 82       	std	Z+7, r7	; 0x07
    17e8:	f8 18       	sub	r15, r8
    17ea:	64 81       	ldd	r22, Z+4	; 0x04
    17ec:	c7 12       	cpse	r12, r23
    17ee:	9f 80       	ldd	r9, Y+7	; 0x07
    17f0:	8b 0c       	add	r8, r11
    17f2:	29 80       	ldd	r2, Y+1	; 0x01
    17f4:	47 06       	cpc	r4, r23

000017f6 <tbl_bitrev>:
    17f6:	00 00       	nop
    17f8:	00 01       	movw	r0, r0
    17fa:	80 00       	.word	0x0080	; ????
    17fc:	80 01       	movw	r16, r0
    17fe:	40 00       	.word	0x0040	; ????
    1800:	40 01       	movw	r8, r0
    1802:	c0 00       	.word	0x00c0	; ????
    1804:	c0 01       	movw	r24, r0
    1806:	20 00       	.word	0x0020	; ????
    1808:	20 01       	movw	r4, r0
    180a:	a0 00       	.word	0x00a0	; ????
    180c:	a0 01       	movw	r20, r0
    180e:	60 00       	.word	0x0060	; ????
    1810:	60 01       	movw	r12, r0
    1812:	e0 00       	.word	0x00e0	; ????
    1814:	e0 01       	movw	r28, r0
    1816:	10 00       	.word	0x0010	; ????
    1818:	10 01       	movw	r2, r0
    181a:	90 00       	.word	0x0090	; ????
    181c:	90 01       	movw	r18, r0
    181e:	50 00       	.word	0x0050	; ????
    1820:	50 01       	movw	r10, r0
    1822:	d0 00       	.word	0x00d0	; ????
    1824:	d0 01       	movw	r26, r0
    1826:	30 00       	.word	0x0030	; ????
    1828:	30 01       	movw	r6, r0
    182a:	b0 00       	.word	0x00b0	; ????
    182c:	b0 01       	movw	r22, r0
    182e:	70 00       	.word	0x0070	; ????
    1830:	70 01       	movw	r14, r0
    1832:	f0 00       	.word	0x00f0	; ????
    1834:	f0 01       	movw	r30, r0
    1836:	08 00       	.word	0x0008	; ????
    1838:	08 01       	movw	r0, r16
    183a:	88 00       	.word	0x0088	; ????
    183c:	88 01       	movw	r16, r16
    183e:	48 00       	.word	0x0048	; ????
    1840:	48 01       	movw	r8, r16
    1842:	c8 00       	.word	0x00c8	; ????
    1844:	c8 01       	movw	r24, r16
    1846:	28 00       	.word	0x0028	; ????
    1848:	28 01       	movw	r4, r16
    184a:	a8 00       	.word	0x00a8	; ????
    184c:	a8 01       	movw	r20, r16
    184e:	68 00       	.word	0x0068	; ????
    1850:	68 01       	movw	r12, r16
    1852:	e8 00       	.word	0x00e8	; ????
    1854:	e8 01       	movw	r28, r16
    1856:	18 00       	.word	0x0018	; ????
    1858:	18 01       	movw	r2, r16
    185a:	98 00       	.word	0x0098	; ????
    185c:	98 01       	movw	r18, r16
    185e:	58 00       	.word	0x0058	; ????
    1860:	58 01       	movw	r10, r16
    1862:	d8 00       	.word	0x00d8	; ????
    1864:	d8 01       	movw	r26, r16
    1866:	38 00       	.word	0x0038	; ????
    1868:	38 01       	movw	r6, r16
    186a:	b8 00       	.word	0x00b8	; ????
    186c:	b8 01       	movw	r22, r16
    186e:	78 00       	.word	0x0078	; ????
    1870:	78 01       	movw	r14, r16
    1872:	f8 00       	.word	0x00f8	; ????
    1874:	f8 01       	movw	r30, r16

00001876 <sign>:
    1876:	05 00       	.word	0x0005	; ????
    1878:	64 00       	.word	0x0064	; ????

0000187a <fft_input>:
;----------------------------------------------------------------------------;
#ifndef INPUT_NOUSE
.global fft_input
.func fft_input
fft_input:
	pushw	T2H,T2L
    187a:	3f 92       	push	r3
    187c:	2f 92       	push	r2
	pushw	AH,AL
    187e:	1f 93       	push	r17
    1880:	0f 93       	push	r16
	pushw	YH,YL
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28

	movw	XL, EL				;X = array_src;
    1886:	dc 01       	movw	r26, r24
	movw	YL, DL				;Y = array_bfly;
    1888:	eb 01       	movw	r28, r22
	clr	EH				;Zero
    188a:	99 27       	eor	r25, r25
	ldiw	ZH,ZL, tbl_window		;Z = &tbl_window[0];
    188c:	e6 ef       	ldi	r30, 0xF6	; 246
    188e:	f5 e1       	ldi	r31, 0x15	; 21
	ldiw	AH,AL, FFT_N			;A = FFT_N;
    1890:	00 e8       	ldi	r16, 0x80	; 128
    1892:	10 e0       	ldi	r17, 0x00	; 0
1:	lpmw	BH,BL, Z+			;B = *Z++; (window)
    1894:	25 91       	lpm	r18, Z+
    1896:	35 91       	lpm	r19, Z+
	ldw	CH,CL, X+			;C = *X++; (I-axis)
    1898:	4d 91       	ld	r20, X+
    189a:	5d 91       	ld	r21, X+
	FMULS16	DH,DL,T2H,T2L, BH,BL, CH,CL	;D = B * C;
    189c:	b5 03       	fmuls	r19, r21
    189e:	b0 01       	movw	r22, r0
    18a0:	2c 03       	fmul	r18, r20
    18a2:	10 01       	movw	r2, r0
    18a4:	69 1f       	adc	r22, r25
    18a6:	bc 03       	fmulsu	r19, r20
    18a8:	79 0b       	sbc	r23, r25
    18aa:	30 0c       	add	r3, r0
    18ac:	61 1d       	adc	r22, r1
    18ae:	79 1f       	adc	r23, r25
    18b0:	da 03       	fmulsu	r21, r18
    18b2:	79 0b       	sbc	r23, r25
    18b4:	30 0c       	add	r3, r0
    18b6:	61 1d       	adc	r22, r1
    18b8:	79 1f       	adc	r23, r25
	stw	Y+, DH,DL			;*Y++ = D;
    18ba:	69 93       	st	Y+, r22
    18bc:	79 93       	st	Y+, r23
#ifdef INPUT_IQ
	ldw	CH,CL, X+			;C = *X++; (Q-axis)
	FMULS16	DH,DL,T2H,T2L, BH,BL, CH,CL	;D = B * C;
#endif
	stw	Y+, DH,DL			;*Y++ = D;
    18be:	69 93       	st	Y+, r22
    18c0:	79 93       	st	Y+, r23
	subiw	AH,AL, 1			;while(--A)
    18c2:	01 50       	subi	r16, 0x01	; 1
    18c4:	10 40       	sbci	r17, 0x00	; 0
	brne	1b				;/
    18c6:	31 f7       	brne	.-52     	; 0x1894 <fft_input+0x1a>

	popw	YH,YL
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
	popw	AH,AL
    18cc:	0f 91       	pop	r16
    18ce:	1f 91       	pop	r17
	popw	T2H,T2L
    18d0:	2f 90       	pop	r2
    18d2:	3f 90       	pop	r3
	clr	r1
    18d4:	11 24       	eor	r1, r1
	ret
    18d6:	08 95       	ret

000018d8 <fft_execute>:

;----------------------------------------------------------------------------;
.global fft_execute
.func fft_execute
fft_execute:
	pushw	T2H,T2L
    18d8:	3f 92       	push	r3
    18da:	2f 92       	push	r2
	pushw	T4H,T4L
    18dc:	5f 92       	push	r5
    18de:	4f 92       	push	r4
	pushw	T6H,T6L
    18e0:	7f 92       	push	r7
    18e2:	6f 92       	push	r6
	pushw	T8H,T8L
    18e4:	9f 92       	push	r9
    18e6:	8f 92       	push	r8
	pushw	T10H,T10L
    18e8:	bf 92       	push	r11
    18ea:	af 92       	push	r10
	pushw	T12H,T12L
    18ec:	df 92       	push	r13
    18ee:	cf 92       	push	r12
	pushw	T14H,T14L
    18f0:	ff 92       	push	r15
    18f2:	ef 92       	push	r14
	pushw	AH,AL
    18f4:	1f 93       	push	r17
    18f6:	0f 93       	push	r16
	pushw	YH,YL
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28

	movw	ZL, EL				;Z = array_bfly;
    18fc:	fc 01       	movw	r30, r24
	ldiw	EH,EL, 1			;E = 1;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
	ldiw	XH,XL, FFT_N/2			;X = FFT_N/2;
    1902:	a0 e4       	ldi	r26, 0x40	; 64
    1904:	b0 e0       	ldi	r27, 0x00	; 0
1:	ldi	AL, 4	 			;T12 = E; (angular speed)
    1906:	04 e0       	ldi	r16, 0x04	; 4
	mul	EL, AL				;
    1908:	80 9f       	mul	r24, r16
	movw	T12L, T0L			;
    190a:	60 01       	movw	r12, r0
	mul	EH, AL				;
    190c:	90 9f       	mul	r25, r16
	add	T12H, T0L			;/
    190e:	d0 0c       	add	r13, r0
	movw	T14L, EL			;T14 = E;
    1910:	7c 01       	movw	r14, r24
	pushw	EH,EL
    1912:	9f 93       	push	r25
    1914:	8f 93       	push	r24
	movw	YL, ZL				;Z = &array_bfly[0];
    1916:	ef 01       	movw	r28, r30
	mul	XL, AL				;Y = &array_bfly[X];
    1918:	a0 9f       	mul	r26, r16
	addw	YH,YL, T0H,T0L			;
    191a:	c0 0d       	add	r28, r0
    191c:	d1 1d       	adc	r29, r1
	mul	XH, AL				;
    191e:	b0 9f       	mul	r27, r16
	add	YH, T0L				;/
    1920:	d0 0d       	add	r29, r0
	pushw	ZH,ZL
    1922:	ff 93       	push	r31
    1924:	ef 93       	push	r30
2:	clrw	T10H,T10L			;T10 = 0 (angle)
    1926:	bb 24       	eor	r11, r11
    1928:	aa 24       	eor	r10, r10
	clr	EH				;Zero reg.
    192a:	99 27       	eor	r25, r25
3:	lddw	AH,AL, Z+0			;A = *Z - *Y; *Z++ += *Y;
    192c:	00 81       	ld	r16, Z
    192e:	11 81       	ldd	r17, Z+1	; 0x01
	asrw	AH,AL				;
    1930:	15 95       	asr	r17
    1932:	07 95       	ror	r16
	lddw	DH,DL, Y+0			;
    1934:	68 81       	ld	r22, Y
    1936:	79 81       	ldd	r23, Y+1	; 0x01
	asrw	DH,DL				;
    1938:	75 95       	asr	r23
    193a:	67 95       	ror	r22
	movw	CL, AL				;
    193c:	a8 01       	movw	r20, r16
	subw	AH,AL, DH,DL			;
    193e:	06 1b       	sub	r16, r22
    1940:	17 0b       	sbc	r17, r23
	addw	CH,CL, DH,DL			;
    1942:	46 0f       	add	r20, r22
    1944:	57 1f       	adc	r21, r23
	stw	Z+, CH,CL			;/
    1946:	41 93       	st	Z+, r20
    1948:	51 93       	st	Z+, r21
	lddw	BH,BL, Z+0			;B = *Z - *Y; *Z++ += *Y;
    194a:	20 81       	ld	r18, Z
    194c:	31 81       	ldd	r19, Z+1	; 0x01
	asrw	BH,BL				;
    194e:	35 95       	asr	r19
    1950:	27 95       	ror	r18
	lddw	DH,DL, Y+2			;
    1952:	6a 81       	ldd	r22, Y+2	; 0x02
    1954:	7b 81       	ldd	r23, Y+3	; 0x03
	asrw	DH,DL				;
    1956:	75 95       	asr	r23
    1958:	67 95       	ror	r22
	movw	CL, BL				;
    195a:	a9 01       	movw	r20, r18
	subw	BH,BL, DH,DL			;
    195c:	26 1b       	sub	r18, r22
    195e:	37 0b       	sbc	r19, r23
	addw	CH,CL, DH,DL			;
    1960:	46 0f       	add	r20, r22
    1962:	57 1f       	adc	r21, r23
	stw	Z+, CH,CL			;/
    1964:	41 93       	st	Z+, r20
    1966:	51 93       	st	Z+, r21
	movw	T0L, ZL
    1968:	0f 01       	movw	r0, r30
	ldiw	ZH,ZL, tbl_cos_sin		;C = cos(T10); D = sin(T10);
    196a:	e6 ef       	ldi	r30, 0xF6	; 246
    196c:	f6 e1       	ldi	r31, 0x16	; 22
	addw	ZH,ZL, T10H,T10L		;
    196e:	ea 0d       	add	r30, r10
    1970:	fb 1d       	adc	r31, r11
	lpmw	CH,CL, Z+			;
    1972:	45 91       	lpm	r20, Z+
    1974:	55 91       	lpm	r21, Z+
	lpmw	DH,DL, Z+			;/
    1976:	65 91       	lpm	r22, Z+
    1978:	75 91       	lpm	r23, Z+
	movw	ZL, T0L
    197a:	f0 01       	movw	r30, r0
	FMULS16	T4H,T4L,T2H,T2L, AH,AL, CH,CL	;*Y++ = A * C + B * D;
    197c:	95 03       	fmuls	r17, r21
    197e:	20 01       	movw	r4, r0
    1980:	0c 03       	fmul	r16, r20
    1982:	10 01       	movw	r2, r0
    1984:	49 1e       	adc	r4, r25
    1986:	9c 03       	fmulsu	r17, r20
    1988:	59 0a       	sbc	r5, r25
    198a:	30 0c       	add	r3, r0
    198c:	41 1c       	adc	r4, r1
    198e:	59 1e       	adc	r5, r25
    1990:	d8 03       	fmulsu	r21, r16
    1992:	59 0a       	sbc	r5, r25
    1994:	30 0c       	add	r3, r0
    1996:	41 1c       	adc	r4, r1
    1998:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, BH,BL, DH,DL	;
    199a:	b7 03       	fmuls	r19, r23
    199c:	40 01       	movw	r8, r0
    199e:	2e 03       	fmul	r18, r22
    19a0:	30 01       	movw	r6, r0
    19a2:	89 1e       	adc	r8, r25
    19a4:	be 03       	fmulsu	r19, r22
    19a6:	99 0a       	sbc	r9, r25
    19a8:	70 0c       	add	r7, r0
    19aa:	81 1c       	adc	r8, r1
    19ac:	99 1e       	adc	r9, r25
    19ae:	fa 03       	fmulsu	r23, r18
    19b0:	99 0a       	sbc	r9, r25
    19b2:	70 0c       	add	r7, r0
    19b4:	81 1c       	adc	r8, r1
    19b6:	99 1e       	adc	r9, r25
	addd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;
    19b8:	26 0c       	add	r2, r6
    19ba:	37 1c       	adc	r3, r7
    19bc:	48 1c       	adc	r4, r8
    19be:	59 1c       	adc	r5, r9
	stw	Y+, T4H,T4L			;/
    19c0:	49 92       	st	Y+, r4
    19c2:	59 92       	st	Y+, r5
	FMULS16	T4H,T4L,T2H,T2L, BH,BL, CH,CL 	;*Y++ = B * C - A * D;
    19c4:	b5 03       	fmuls	r19, r21
    19c6:	20 01       	movw	r4, r0
    19c8:	2c 03       	fmul	r18, r20
    19ca:	10 01       	movw	r2, r0
    19cc:	49 1e       	adc	r4, r25
    19ce:	bc 03       	fmulsu	r19, r20
    19d0:	59 0a       	sbc	r5, r25
    19d2:	30 0c       	add	r3, r0
    19d4:	41 1c       	adc	r4, r1
    19d6:	59 1e       	adc	r5, r25
    19d8:	da 03       	fmulsu	r21, r18
    19da:	59 0a       	sbc	r5, r25
    19dc:	30 0c       	add	r3, r0
    19de:	41 1c       	adc	r4, r1
    19e0:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, AH,AL, DH,DL 	;
    19e2:	97 03       	fmuls	r17, r23
    19e4:	40 01       	movw	r8, r0
    19e6:	0e 03       	fmul	r16, r22
    19e8:	30 01       	movw	r6, r0
    19ea:	89 1e       	adc	r8, r25
    19ec:	9e 03       	fmulsu	r17, r22
    19ee:	99 0a       	sbc	r9, r25
    19f0:	70 0c       	add	r7, r0
    19f2:	81 1c       	adc	r8, r1
    19f4:	99 1e       	adc	r9, r25
    19f6:	f8 03       	fmulsu	r23, r16
    19f8:	99 0a       	sbc	r9, r25
    19fa:	70 0c       	add	r7, r0
    19fc:	81 1c       	adc	r8, r1
    19fe:	99 1e       	adc	r9, r25
	subd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;
    1a00:	26 18       	sub	r2, r6
    1a02:	37 08       	sbc	r3, r7
    1a04:	48 08       	sbc	r4, r8
    1a06:	59 08       	sbc	r5, r9
	stw	Y+, T4H,T4L			;/
    1a08:	49 92       	st	Y+, r4
    1a0a:	59 92       	st	Y+, r5
	addw	T10H,T10L, T12H,T12L		;T10 += T12; (next angle)
    1a0c:	ac 0c       	add	r10, r12
    1a0e:	bd 1c       	adc	r11, r13
#if FFT_N >= 128
	sbrs	T10H, FFT_B - 7			;while(T10 < pi)
    1a10:	b0 fe       	sbrs	r11, 0
#else
	sbrs	T10L, FFT_B + 1
#endif
	rjmp	3b				;/
    1a12:	8c cf       	rjmp	.-232    	; 0x192c <fft_execute+0x54>
	ldi	AL, 4				;Y += X; Z += X; (skip split segment)
    1a14:	04 e0       	ldi	r16, 0x04	; 4
	mul	XL, AL
    1a16:	a0 9f       	mul	r26, r16
	addw	YH,YL, T0H,T0L			;
    1a18:	c0 0d       	add	r28, r0
    1a1a:	d1 1d       	adc	r29, r1
	addw	ZH,ZL, T0H,T0L			;
    1a1c:	e0 0d       	add	r30, r0
    1a1e:	f1 1d       	adc	r31, r1
	mul	XH, AL				;
    1a20:	b0 9f       	mul	r27, r16
	add	YH, T0L				;
    1a22:	d0 0d       	add	r29, r0
	add	ZH, T0L				;/
    1a24:	f0 0d       	add	r31, r0
	ldi	EL, 1				;while(--T14)
    1a26:	81 e0       	ldi	r24, 0x01	; 1
	subw	T14H,T14L, EH,EL		;
    1a28:	e8 1a       	sub	r14, r24
    1a2a:	f9 0a       	sbc	r15, r25
	rjne	2b				;/
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <fft_execute+0x158>
    1a2e:	7b cf       	rjmp	.-266    	; 0x1926 <fft_execute+0x4e>
	popw	ZH,ZL
    1a30:	ef 91       	pop	r30
    1a32:	ff 91       	pop	r31
	popw	EH,EL
    1a34:	8f 91       	pop	r24
    1a36:	9f 91       	pop	r25
	lslw	EH,EL				;E *= 2;
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
	lsrw	XH,XL				;while(X /= 2)
    1a3c:	b6 95       	lsr	r27
    1a3e:	a7 95       	ror	r26
	adiw	XL, 0				;
    1a40:	10 96       	adiw	r26, 0x00	; 0
	rjne	1b				;/
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <fft_execute+0x16e>
    1a44:	60 cf       	rjmp	.-320    	; 0x1906 <fft_execute+0x2e>

	popw	YH,YL
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
	popw	AH,AL
    1a4a:	0f 91       	pop	r16
    1a4c:	1f 91       	pop	r17
	popw	T14H,T14L
    1a4e:	ef 90       	pop	r14
    1a50:	ff 90       	pop	r15
	popw	T12H,T12L
    1a52:	cf 90       	pop	r12
    1a54:	df 90       	pop	r13
	popw	T10H,T10L
    1a56:	af 90       	pop	r10
    1a58:	bf 90       	pop	r11
	popw	T8H,T8L
    1a5a:	8f 90       	pop	r8
    1a5c:	9f 90       	pop	r9
	popw	T6H,T6L
    1a5e:	6f 90       	pop	r6
    1a60:	7f 90       	pop	r7
	popw	T4H,T4L
    1a62:	4f 90       	pop	r4
    1a64:	5f 90       	pop	r5
	popw	T2H,T2L
    1a66:	2f 90       	pop	r2
    1a68:	3f 90       	pop	r3
;	clr	r1
	ret
    1a6a:	08 95       	ret

00001a6c <fft_output>:

;----------------------------------------------------------------------------;
.global fft_output
.func fft_output
fft_output:
	pushw	T2H,T2L
    1a6c:	3f 92       	push	r3
    1a6e:	2f 92       	push	r2
	pushw	T4H,T4L
    1a70:	5f 92       	push	r5
    1a72:	4f 92       	push	r4
	pushw	T6H,T6L
    1a74:	7f 92       	push	r7
    1a76:	6f 92       	push	r6
	pushw	T8H,T8L
    1a78:	9f 92       	push	r9
    1a7a:	8f 92       	push	r8
	pushw	T10H,T10L
    1a7c:	bf 92       	push	r11
    1a7e:	af 92       	push	r10
	pushw	AH,AL
    1a80:	1f 93       	push	r17
    1a82:	0f 93       	push	r16
	pushw	YH,YL
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28

	movw	T10L, EL			;T10 = array_bfly;
    1a88:	5c 01       	movw	r10, r24
	movw	YL, DL				;Y = array_output;
    1a8a:	eb 01       	movw	r28, r22
	ldiw	ZH,ZL, tbl_bitrev		;Z = tbl_bitrev;
    1a8c:	e6 ef       	ldi	r30, 0xF6	; 246
    1a8e:	f7 e1       	ldi	r31, 0x17	; 23
	clr	EH				;Zero
    1a90:	99 27       	eor	r25, r25
#ifdef INPUT_IQ
	ldiw	AH,AL, FFT_N			;A = FFT_N; (plus/minus)
#else
	ldiw	AH,AL, FFT_N / 2		;A = FFT_N / 2; (plus only)
    1a92:	00 e4       	ldi	r16, 0x40	; 64
    1a94:	10 e0       	ldi	r17, 0x00	; 0
#endif
1:	lpmw	XH,XL, Z+			;X = *Z++;
    1a96:	a5 91       	lpm	r26, Z+
    1a98:	b5 91       	lpm	r27, Z+
	addw	XH,XL, T10H,T10L		;X += array_bfly;
    1a9a:	aa 0d       	add	r26, r10
    1a9c:	bb 1d       	adc	r27, r11
	ldw	BH,BL, X+			;B = *X++;
    1a9e:	2d 91       	ld	r18, X+
    1aa0:	3d 91       	ld	r19, X+
	ldw	CH,CL, X+			;C = *X++;
    1aa2:	4d 91       	ld	r20, X+
    1aa4:	5d 91       	ld	r21, X+
	FMULS16	T4H,T4L,T2H,T2L, BH,BL, BH,BL	;T4:T2 = B * B;
    1aa6:	b3 03       	fmuls	r19, r19
    1aa8:	20 01       	movw	r4, r0
    1aaa:	2a 03       	fmul	r18, r18
    1aac:	10 01       	movw	r2, r0
    1aae:	49 1e       	adc	r4, r25
    1ab0:	ba 03       	fmulsu	r19, r18
    1ab2:	59 0a       	sbc	r5, r25
    1ab4:	30 0c       	add	r3, r0
    1ab6:	41 1c       	adc	r4, r1
    1ab8:	59 1e       	adc	r5, r25
    1aba:	ba 03       	fmulsu	r19, r18
    1abc:	59 0a       	sbc	r5, r25
    1abe:	30 0c       	add	r3, r0
    1ac0:	41 1c       	adc	r4, r1
    1ac2:	59 1e       	adc	r5, r25
	FMULS16	T8H,T8L,T6H,T6L, CH,CL, CH,CL	;T8:T6 = C * C;
    1ac4:	d5 03       	fmuls	r21, r21
    1ac6:	40 01       	movw	r8, r0
    1ac8:	4c 03       	fmul	r20, r20
    1aca:	30 01       	movw	r6, r0
    1acc:	89 1e       	adc	r8, r25
    1ace:	dc 03       	fmulsu	r21, r20
    1ad0:	99 0a       	sbc	r9, r25
    1ad2:	70 0c       	add	r7, r0
    1ad4:	81 1c       	adc	r8, r1
    1ad6:	99 1e       	adc	r9, r25
    1ad8:	dc 03       	fmulsu	r21, r20
    1ada:	99 0a       	sbc	r9, r25
    1adc:	70 0c       	add	r7, r0
    1ade:	81 1c       	adc	r8, r1
    1ae0:	99 1e       	adc	r9, r25
	addd	T4H,T4L,T2H,T2L, T8H,T8L,T6H,T6L;T4:T2 += T8:T6;
    1ae2:	26 0c       	add	r2, r6
    1ae4:	37 1c       	adc	r3, r7
    1ae6:	48 1c       	adc	r4, r8
    1ae8:	59 1c       	adc	r5, r9
	SQRT32					;B = sqrt(T4:T2);
    1aea:	66 24       	eor	r6, r6
    1aec:	77 24       	eor	r7, r7
    1aee:	88 24       	eor	r8, r8
    1af0:	99 24       	eor	r9, r9
    1af2:	21 e0       	ldi	r18, 0x01	; 1
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	44 27       	eor	r20, r20
    1af8:	55 27       	eor	r21, r21
    1afa:	70 e1       	ldi	r23, 0x10	; 16
    1afc:	22 0c       	add	r2, r2
    1afe:	33 1c       	adc	r3, r3
    1b00:	44 1c       	adc	r4, r4
    1b02:	55 1c       	adc	r5, r5
    1b04:	66 1c       	adc	r6, r6
    1b06:	77 1c       	adc	r7, r7
    1b08:	88 1c       	adc	r8, r8
    1b0a:	99 1c       	adc	r9, r9
    1b0c:	22 0c       	add	r2, r2
    1b0e:	33 1c       	adc	r3, r3
    1b10:	44 1c       	adc	r4, r4
    1b12:	55 1c       	adc	r5, r5
    1b14:	66 1c       	adc	r6, r6
    1b16:	77 1c       	adc	r7, r7
    1b18:	88 1c       	adc	r8, r8
    1b1a:	99 1c       	adc	r9, r9
    1b1c:	2a f4       	brpl	.+10     	; 0x1b28 <fft_output+0xbc>
    1b1e:	62 0e       	add	r6, r18
    1b20:	73 1e       	adc	r7, r19
    1b22:	84 1e       	adc	r8, r20
    1b24:	95 1e       	adc	r9, r21
    1b26:	04 c0       	rjmp	.+8      	; 0x1b30 <fft_output+0xc4>
    1b28:	62 1a       	sub	r6, r18
    1b2a:	73 0a       	sbc	r7, r19
    1b2c:	84 0a       	sbc	r8, r20
    1b2e:	95 0a       	sbc	r9, r21
    1b30:	22 0f       	add	r18, r18
    1b32:	33 1f       	adc	r19, r19
    1b34:	44 1f       	adc	r20, r20
    1b36:	28 7f       	andi	r18, 0xF8	; 248
    1b38:	25 60       	ori	r18, 0x05	; 5
    1b3a:	97 fc       	sbrc	r9, 7
    1b3c:	22 50       	subi	r18, 0x02	; 2
    1b3e:	7a 95       	dec	r23
    1b40:	e9 f6       	brne	.-70     	; 0x1afc <fft_output+0x90>
    1b42:	46 95       	lsr	r20
    1b44:	37 95       	ror	r19
    1b46:	27 95       	ror	r18
    1b48:	46 95       	lsr	r20
    1b4a:	37 95       	ror	r19
    1b4c:	27 95       	ror	r18
	stw	Y+, BH,BL			;*Y++ = B;
    1b4e:	29 93       	st	Y+, r18
    1b50:	39 93       	st	Y+, r19
	subiw	AH,AL, 1			;while(--A)
    1b52:	01 50       	subi	r16, 0x01	; 1
    1b54:	10 40       	sbci	r17, 0x00	; 0
	rjne	1b				;/
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <fft_output+0xee>
    1b58:	9e cf       	rjmp	.-196    	; 0x1a96 <fft_output+0x2a>

	popw	YH,YL
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
	popw	AH,AL
    1b5e:	0f 91       	pop	r16
    1b60:	1f 91       	pop	r17
	popw	T10H,T10L
    1b62:	af 90       	pop	r10
    1b64:	bf 90       	pop	r11
	popw	T8H,T8L
    1b66:	8f 90       	pop	r8
    1b68:	9f 90       	pop	r9
	popw	T6H,T6L
    1b6a:	6f 90       	pop	r6
    1b6c:	7f 90       	pop	r7
	popw	T4H,T4L
    1b6e:	4f 90       	pop	r4
    1b70:	5f 90       	pop	r5
	popw	T2H,T2L
    1b72:	2f 90       	pop	r2
    1b74:	3f 90       	pop	r3
	clr	r1
    1b76:	11 24       	eor	r1, r1
	ret
    1b78:	08 95       	ret

00001b7a <fmuls_f>:

;----------------------------------------------------------------------------;
.global fmuls_f
.func fmuls_f
fmuls_f:
	movw	CL, EL				;C = E;
    1b7a:	ac 01       	movw	r20, r24
	clr	EH	;Zero
    1b7c:	99 27       	eor	r25, r25
	FMULS16	ZH,ZL,XH,XL, CH,CL, DH,DL	;Z:X = C * D;
    1b7e:	d7 03       	fmuls	r21, r23
    1b80:	f0 01       	movw	r30, r0
    1b82:	4e 03       	fmul	r20, r22
    1b84:	d0 01       	movw	r26, r0
    1b86:	e9 1f       	adc	r30, r25
    1b88:	de 03       	fmulsu	r21, r22
    1b8a:	f9 0b       	sbc	r31, r25
    1b8c:	b0 0d       	add	r27, r0
    1b8e:	e1 1d       	adc	r30, r1
    1b90:	f9 1f       	adc	r31, r25
    1b92:	fc 03       	fmulsu	r23, r20
    1b94:	f9 0b       	sbc	r31, r25
    1b96:	b0 0d       	add	r27, r0
    1b98:	e1 1d       	adc	r30, r1
    1b9a:	f9 1f       	adc	r31, r25
	movw	EL, ZL
    1b9c:	cf 01       	movw	r24, r30
	clr	r1
    1b9e:	11 24       	eor	r1, r1
	ret
    1ba0:	08 95       	ret

00001ba2 <xmit>:
;Size: 16 words

.global xmit
.func xmit
xmit:
	in	r0, _SFR_IO_ADDR(SREG)	;Save flags
    1ba2:	0f b6       	in	r0, 0x3f	; 63

	com	r24		;C = start bit
    1ba4:	80 95       	com	r24
	ldi	r25, 10		;Bit counter
    1ba6:	9a e0       	ldi	r25, 0x0A	; 10
	cli			;Start critical section
    1ba8:	f8 94       	cli

1:	ldi	r23, BPS-1	;----- Bit transferring loop 
    1baa:	79 e8       	ldi	r23, 0x89	; 137
2:	dec	r23     	;Wait for a bit time
    1bac:	7a 95       	dec	r23
	brne	2b		;/
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <xmit+0xa>
	brcs	3f		;MISO = bit to be sent
    1bb0:	08 f0       	brcs	.+2      	; 0x1bb4 <xmit+0x12>
	cbi	TXREG, TXBIT	;
    1bb2:	c6 98       	cbi	0x18, 6	; 24
3:	brcc	4f		;
    1bb4:	08 f4       	brcc	.+2      	; 0x1bb8 <xmit+0x16>
	sbi	TXREG, TXBIT	;/
    1bb6:	c6 9a       	sbi	0x18, 6	; 24
4:	lsr	r24     	;Get next bit into C
    1bb8:	86 95       	lsr	r24
	dec	r25     	;All bits sent?
    1bba:	9a 95       	dec	r25
	brne	1b	     	;  no, coutinue
    1bbc:	b1 f7       	brne	.-20     	; 0x1baa <xmit+0x8>

	out	_SFR_IO_ADDR(SREG), r0	;End of critical section
    1bbe:	0f be       	out	0x3f, r0	; 63
	ret
    1bc0:	08 95       	ret

00001bc2 <xmitstr>:
;Size: 10/7 words

.global xmitstr
.func xmitstr
xmitstr:
	_MOVW	ZH,ZL, r25,r24	;Pointer to ASCIZ string
    1bc2:	fc 01       	movw	r30, r24
1:	_LPMI	r24		;Get a character
    1bc4:	85 91       	lpm	r24, Z+
	tst	r24      	;Exit if end of string
    1bc6:	88 23       	and	r24, r24
	breq	2f		;/
    1bc8:	11 f0       	breq	.+4      	; 0x1bce <xmitstr+0xc>
	rcall	xmit		;Transmit it
    1bca:	eb df       	rcall	.-42     	; 0x1ba2 <xmit>
	rjmp	1b	     	;Continue
    1bcc:	fb cf       	rjmp	.-10     	; 0x1bc4 <xmitstr+0x2>
2:	ret
    1bce:	08 95       	ret

00001bd0 <xmitval>:
; 65535   -10       1   "-1"

.global xmitval
.func xmitval
xmitval:			;r25:r24:value, r22:base, r20:digits
	clr	r19      	;r19:stack level
    1bd0:	33 27       	eor	r19, r19
	ldi	r30, ' '	;r30:sign
    1bd2:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r31, ' '	;r31:filler
    1bd4:	f0 e2       	ldi	r31, 0x20	; 32
	sbrs	r22, 7		;When base indicates signd format and the value
    1bd6:	67 ff       	sbrs	r22, 7
	rjmp	0f		;is minus, add a '-'.
    1bd8:	08 c0       	rjmp	.+16     	; 0x1bea <xmitval+0x1a>
	neg	r22		;
    1bda:	61 95       	neg	r22
	sbrs	r25, 7		;
    1bdc:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    1bde:	05 c0       	rjmp	.+10     	; 0x1bea <xmitval+0x1a>
	ldi	r30, '-'	;
    1be0:	ed e2       	ldi	r30, 0x2D	; 45
	com	r24		;
    1be2:	80 95       	com	r24
	com	r25		;
    1be4:	90 95       	com	r25
	adc	r24, r1		;
    1be6:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    1be8:	91 1d       	adc	r25, r1
0:	sbrs	r20, 7		;When digits indicates zero filled,
    1bea:	47 ff       	sbrs	r20, 7
	rjmp	1f		;filler is '0'.
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <xmitval+0x22>
	neg	r20		;
    1bee:	41 95       	neg	r20
	ldi	r31, '0'	;/
    1bf0:	f0 e3       	ldi	r31, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 16		;r23 = r25:r24 \ r22
    1bf2:	50 e1       	ldi	r21, 0x10	; 16
	clr	r23		;r25:r24 /= r22
    1bf4:	77 27       	eor	r23, r23
2:	lsl	r24		;
    1bf6:	88 0f       	add	r24, r24
	rol	r25		;
    1bf8:	99 1f       	adc	r25, r25
	rol	r23		;
    1bfa:	77 1f       	adc	r23, r23
	cp	r23, r22	;
    1bfc:	76 17       	cp	r23, r22
	brcs	3f		;
    1bfe:	10 f0       	brcs	.+4      	; 0x1c04 <xmitval+0x34>
	sub	r23, r22	;
    1c00:	76 1b       	sub	r23, r22
	inc	r24		;
    1c02:	83 95       	inc	r24
3:	dec	r21		;
    1c04:	5a 95       	dec	r21
	brne	2b		;/
    1c06:	b9 f7       	brne	.-18     	; 0x1bf6 <xmitval+0x26>
	cpi	r23, 10		;r23 is a numerical digit '0'-'F'
    1c08:	7a 30       	cpi	r23, 0x0A	; 10
	brcs	4f		;
    1c0a:	08 f0       	brcs	.+2      	; 0x1c0e <xmitval+0x3e>
	subi	r23, -7		;
    1c0c:	79 5f       	subi	r23, 0xF9	; 249
4:	subi	r23, -'0'	;/
    1c0e:	70 5d       	subi	r23, 0xD0	; 208
	push	r23		;Stack it
    1c10:	7f 93       	push	r23
	inc	r19		;/
    1c12:	33 95       	inc	r19
	cp	r24, r21	;Repeat until r25:r25 gets zero
    1c14:	85 17       	cp	r24, r21
	cpc	r25, r21	;
    1c16:	95 07       	cpc	r25, r21
	brne	1b		;/
    1c18:	61 f7       	brne	.-40     	; 0x1bf2 <xmitval+0x22>

	cpi	r30, '-'	;Stack a minus sign if needed
    1c1a:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    1c1c:	11 f4       	brne	.+4      	; 0x1c22 <xmitval+0x52>
	push	r30		;
    1c1e:	ef 93       	push	r30
	inc	r19		;/
    1c20:	33 95       	inc	r19
5:	cp	r19, r20	;Stack filler
    1c22:	34 17       	cp	r19, r20
	brcc	6f		;
    1c24:	18 f4       	brcc	.+6      	; 0x1c2c <xmitval+0x5c>
	push	r31		;
    1c26:	ff 93       	push	r31
	inc	r19		;
    1c28:	33 95       	inc	r19
	rjmp	5b		;/
    1c2a:	fb cf       	rjmp	.-10     	; 0x1c22 <xmitval+0x52>

6:	pop	r24		;Output stacked digits and exit
    1c2c:	8f 91       	pop	r24
	rcall	xmit		;
    1c2e:	b9 df       	rcall	.-142    	; 0x1ba2 <xmit>
	dec	r19		;
    1c30:	3a 95       	dec	r19
	brne	6b		;
    1c32:	e1 f7       	brne	.-8      	; 0x1c2c <xmitval+0x5c>
	ret			;/
    1c34:	08 95       	ret

00001c36 <xmitf>:
;Size: 70/64 words

.global xmitf
.func xmitf
xmitf:
	in	XL, _SFR_IO_ADDR(SPL)
    1c36:	ad b7       	in	r26, 0x3d	; 61
#ifdef SPH
	in	XH, _SFR_IO_ADDR(SPH)
    1c38:	be b7       	in	r27, 0x3e	; 62
#else
	clr	XH
#endif
	adiw	XL, 3		;X = pointer to arguments
    1c3a:	13 96       	adiw	r26, 0x03	; 3
	ld	ZL, X+		;Z = pointer to format string
    1c3c:	ed 91       	ld	r30, X+
	ld	ZH, X+		;/
    1c3e:	fd 91       	ld	r31, X+

00:	_LPMI	r24		;Get a format char
    1c40:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    1c42:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    1c44:	21 f0       	breq	.+8      	; 0x1c4e <xmitf+0x18>
	cpi	r24, '%'	;Is format?
    1c46:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    1c48:	19 f0       	breq	.+6      	; 0x1c50 <xmitf+0x1a>
01:	rcall	xmit		;Put a normal character
    1c4a:	ab df       	rcall	.-170    	; 0x1ba2 <xmit>
	rjmp	00b		;/
    1c4c:	f9 cf       	rjmp	.-14     	; 0x1c40 <xmitf+0xa>
90:	ret
    1c4e:	08 95       	ret

20:	ldi	r20, 0		;r20: digits
    1c50:	40 e0       	ldi	r20, 0x00	; 0
	clt			;T: filler
    1c52:	e8 94       	clt
21:	_LPMI	r24		;Get flags
    1c54:	85 91       	lpm	r24, Z+
	cpi	r24, '%'	;Is '%'?
    1c56:	85 32       	cpi	r24, 0x25	; 37
	breq	01b		;/
    1c58:	c1 f3       	breq	.-16     	; 0x1c4a <xmitf+0x14>
	cpi	r24, '0'	;Zero filled?
    1c5a:	80 33       	cpi	r24, 0x30	; 48
	brne	23f		;
    1c5c:	11 f4       	brne	.+4      	; 0x1c62 <xmitf+0x2c>
	set			;/
    1c5e:	68 94       	set
22:	_LPMI	r24		;Get width
    1c60:	85 91       	lpm	r24, Z+
23:	cpi	r24, '9'+1	;
    1c62:	8a 33       	cpi	r24, 0x3A	; 58
	brcc	24f		;
    1c64:	48 f4       	brcc	.+18     	; 0x1c78 <xmitf+0x42>
	subi	r24, '0'	;
    1c66:	80 53       	subi	r24, 0x30	; 48
	brcs	90b		;
    1c68:	90 f3       	brcs	.-28     	; 0x1c4e <xmitf+0x18>
	lsl	r20		;
    1c6a:	44 0f       	add	r20, r20
	mov	r0, r20		;
    1c6c:	04 2e       	mov	r0, r20
	lsl	r20		;
    1c6e:	44 0f       	add	r20, r20
	lsl	r20		;
    1c70:	44 0f       	add	r20, r20
	add	r20, r0		;
    1c72:	40 0d       	add	r20, r0
	add	r20, r24	;
    1c74:	48 0f       	add	r20, r24
	rjmp	22b		;/
    1c76:	f4 cf       	rjmp	.-24     	; 0x1c60 <xmitf+0x2a>

24:	mov	r23, r24	;r23 = type
    1c78:	78 2f       	mov	r23, r24
	ld	r24, X+		;r25:r24 = value
    1c7a:	8d 91       	ld	r24, X+
	ld	r25, X+		;/
    1c7c:	9d 91       	ld	r25, X+
	cpi	r23, 'c'	;Is type character?
    1c7e:	73 36       	cpi	r23, 0x63	; 99
	breq	01b		;/
    1c80:	21 f3       	breq	.-56     	; 0x1c4a <xmitf+0x14>
	cpi	r23, 's'	;Is type string?
    1c82:	73 37       	cpi	r23, 0x73	; 115
	breq	50f		;/
    1c84:	a1 f0       	breq	.+40     	; 0x1cae <xmitf+0x78>
	cpi	r23, 'X'	;Is type hexdecimal?
    1c86:	78 35       	cpi	r23, 0x58	; 88
	ldi	r22, 16		;
    1c88:	60 e1       	ldi	r22, 0x10	; 16
	breq	40f		;/
    1c8a:	49 f0       	breq	.+18     	; 0x1c9e <xmitf+0x68>
	cpi	r23, 'u'	;Is type unsigned decimal?
    1c8c:	75 37       	cpi	r23, 0x75	; 117
	ldi	r22, 10		;
    1c8e:	6a e0       	ldi	r22, 0x0A	; 10
	breq	40f		;/
    1c90:	31 f0       	breq	.+12     	; 0x1c9e <xmitf+0x68>
	cpi	r23, 'd'	;Is type signed decimal?
    1c92:	74 36       	cpi	r23, 0x64	; 100
	ldi	r22, -10	;
    1c94:	66 ef       	ldi	r22, 0xF6	; 246
	breq	40f		;/
    1c96:	19 f0       	breq	.+6      	; 0x1c9e <xmitf+0x68>
	cpi	r23, 'b'	;Is type binary?, or abort.
    1c98:	72 36       	cpi	r23, 0x62	; 98
	ldi	r22, 2		;
    1c9a:	62 e0       	ldi	r22, 0x02	; 2
	brne	90b		;/
    1c9c:	c1 f6       	brne	.-80     	; 0x1c4e <xmitf+0x18>
40:	brtc	41f		;Output the value
    1c9e:	0e f4       	brtc	.+2      	; 0x1ca2 <xmitf+0x6c>
	neg	r20		;
    1ca0:	41 95       	neg	r20
41:	push	ZH		;
    1ca2:	ff 93       	push	r31
	push	ZL		;
    1ca4:	ef 93       	push	r30
	rcall	xmitval		;
    1ca6:	94 df       	rcall	.-216    	; 0x1bd0 <xmitval>
41:	pop	ZL		;
    1ca8:	ef 91       	pop	r30
	pop	ZH		;
    1caa:	ff 91       	pop	r31
	rjmp	00b		;/
    1cac:	c9 cf       	rjmp	.-110    	; 0x1c40 <xmitf+0xa>
50:	push	ZH		;Output the ROM string
    1cae:	ff 93       	push	r31
	push	ZL		;
    1cb0:	ef 93       	push	r30
	rcall	xmitstr		;
    1cb2:	87 df       	rcall	.-242    	; 0x1bc2 <xmitstr>
	rjmp	41b		;/
    1cb4:	f9 cf       	rjmp	.-14     	; 0x1ca8 <xmitf+0x72>

00001cb6 <rcvr>:
;Size: 19 words

.global rcvr
.func rcvr
rcvr:
	in	r0, _SFR_IO_ADDR(SREG)	;Save flags
    1cb6:	0f b6       	in	r0, 0x3f	; 63

	ldi	r24, 0x80	;Receiving shift reg
    1cb8:	80 e8       	ldi	r24, 0x80	; 128
	cli			;Start critical section
    1cba:	f8 94       	cli

1:	sbic	RXREG, RXBIT	;Wait for falling edge on MOSI pin
    1cbc:	b5 99       	sbic	0x16, 5	; 22
	rjmp	1b
    1cbe:	fe cf       	rjmp	.-4      	; 0x1cbc <rcvr+0x6>
2:	sbis	RXREG, RXBIT	;Wait for rising edge on MOSI pin
    1cc0:	b5 9b       	sbis	0x16, 5	; 22
	rjmp	2b
    1cc2:	fe cf       	rjmp	.-4      	; 0x1cc0 <rcvr+0xa>
	ldi	r25, BPS/2	;Wait for half bit time
    1cc4:	95 e4       	ldi	r25, 0x45	; 69
3:	dec	r25
    1cc6:	9a 95       	dec	r25
	brne	3b
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <rcvr+0x10>

4:	ldi	r25, BPS	;----- Bit receiving loop
    1cca:	9a e8       	ldi	r25, 0x8A	; 138
5:	dec	r25     	;Wait for a bit time
    1ccc:	9a 95       	dec	r25
	brne	5b		;/
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <rcvr+0x16>
	lsr	r24     	;Next bit
    1cd0:	86 95       	lsr	r24
	sbis	RXREG, RXBIT	;Get a bit into r24.7
    1cd2:	b5 9b       	sbis	0x16, 5	; 22
	ori	r24, 0x80
    1cd4:	80 68       	ori	r24, 0x80	; 128
	brcc	4b	     	;All bits received?  no, continue
    1cd6:	c8 f7       	brcc	.-14     	; 0x1cca <rcvr+0x14>

	out	_SFR_IO_ADDR(SREG), r0	;End of critical section
    1cd8:	0f be       	out	0x3f, r0	; 63
	ret
    1cda:	08 95       	ret

00001cdc <rcvrstr>:
;Size:  24/23 words

.global rcvrstr
.func rcvrstr
rcvrstr:
	_MOVW	ZH,ZL, r25,r24	;Pointer to input buffer
    1cdc:	fc 01       	movw	r30, r24
	ldi	r21, 1		;Character count (+'\0')
    1cde:	51 e0       	ldi	r21, 0x01	; 1
0:	rcall	rcvr		;Receive a character
    1ce0:	ea df       	rcall	.-44     	; 0x1cb6 <rcvr>
	cpi	r24, '\r'	;Enter?
    1ce2:	8d 30       	cpi	r24, 0x0D	; 13
	breq	9f		;/
    1ce4:	79 f0       	breq	.+30     	; 0x1d04 <rcvrstr+0x28>
	cpi	r24, '\b'	;Backspace?
    1ce6:	88 30       	cpi	r24, 0x08	; 8
	breq	2f		;/
    1ce8:	41 f0       	breq	.+16     	; 0x1cfa <rcvrstr+0x1e>
	cp	r21, r22	;Buffer full?
    1cea:	56 17       	cp	r21, r22
	brcc	0b		;/
    1cec:	c8 f7       	brcc	.-14     	; 0x1ce0 <rcvrstr+0x4>
	cpi	r24, ' '	;Invisible code?
    1cee:	80 32       	cpi	r24, 0x20	; 32
	brcs	0b		;/
    1cf0:	b8 f3       	brcs	.-18     	; 0x1ce0 <rcvrstr+0x4>
	st	Z+, r24		;Store a character
    1cf2:	81 93       	st	Z+, r24
	inc	r21		;count++
    1cf4:	53 95       	inc	r21
1:	rcall	xmit		;Show the character
    1cf6:	55 df       	rcall	.-342    	; 0x1ba2 <xmit>
	rjmp	0b		;Continue
    1cf8:	f3 cf       	rjmp	.-26     	; 0x1ce0 <rcvrstr+0x4>
2:	cpi	r21, 1		;Backspace: Buffer empty?
    1cfa:	51 30       	cpi	r21, 0x01	; 1
	breq	0b		;/
    1cfc:	89 f3       	breq	.-30     	; 0x1ce0 <rcvrstr+0x4>
	dec	r21		;count--
    1cfe:	5a 95       	dec	r21
	sbiw	ZL, 1		;/
    1d00:	31 97       	sbiw	r30, 0x01	; 1
	rjmp	1b		;Move cursor left
    1d02:	f9 cf       	rjmp	.-14     	; 0x1cf6 <rcvrstr+0x1a>
9:	rcall	xmit		;Return cursor.
    1d04:	4e df       	rcall	.-356    	; 0x1ba2 <xmit>
	st	Z, r1		;Terminate with a '\0' and exit
    1d06:	10 82       	st	Z, r1
	ret			;/
    1d08:	08 95       	ret

00001d0a <pickval>:
;Size:  61/59 words

.global pickval
.func pickval
pickval:
	_MOVW	ZH,ZL, r25,r24	;Z = pointer to pointer to numerical string
    1d0a:	fc 01       	movw	r30, r24
	ld	XL, Z+	 	;X = pointer to numerical string
    1d0c:	a1 91       	ld	r26, Z+
	ld	XH, Z+ 		;/
    1d0e:	b1 91       	ld	r27, Z+
	clr	r18     	;r19:r18 = input register
    1d10:	22 27       	eor	r18, r18
	clr	r19     	;/
    1d12:	33 27       	eor	r19, r19
	clt			;Unsigned or plus value
    1d14:	e8 94       	clt

00:	ld	r24, X  	;Skip pre-spaces
    1d16:	8c 91       	ld	r24, X
	cpi	r24, '-'	;Is signed minus value?
    1d18:	8d 32       	cpi	r24, 0x2D	; 45
	brne	01f		;
    1d1a:	11 f4       	brne	.+4      	; 0x1d20 <pickval+0x16>
	set			;
    1d1c:	68 94       	set
	rjmp	16f		;/
    1d1e:	1f c0       	rjmp	.+62     	; 0x1d5e <pickval+0x54>
01:	cpi	r24, ' '	;End of string?
    1d20:	80 32       	cpi	r24, 0x20	; 32
	brcs	90f		;/
    1d22:	f8 f0       	brcs	.+62     	; 0x1d62 <pickval+0x58>
	brne	11f
    1d24:	29 f4       	brne	.+10     	; 0x1d30 <pickval+0x26>
	adiw	XL, 1
    1d26:	11 96       	adiw	r26, 0x01	; 1
	rjmp	00b
    1d28:	f6 cf       	rjmp	.-20     	; 0x1d16 <pickval+0xc>

10:	ld	r24, X  	;Numerical string => Integer conversion loop
    1d2a:	8c 91       	ld	r24, X
	cpi	r24, ' '+1      ;Exit if end of a number
    1d2c:	81 32       	cpi	r24, 0x21	; 33
	brcs	91f	    	;/
    1d2e:	d8 f0       	brcs	.+54     	; 0x1d66 <pickval+0x5c>
11:	cpi	r24, 'a'	;Convert a digit to sequencial number
    1d30:	81 36       	cpi	r24, 0x61	; 97
	brcs	12f	    	;
    1d32:	08 f0       	brcs	.+2      	; 0x1d36 <pickval+0x2c>
	subi	r24, 0x20       ;
    1d34:	80 52       	subi	r24, 0x20	; 32
12:	subi	r24, '0'	;
    1d36:	80 53       	subi	r24, 0x30	; 48
	brcs	90f	    	;
    1d38:	a0 f0       	brcs	.+40     	; 0x1d62 <pickval+0x58>
	cpi	r24, 10 	;
    1d3a:	8a 30       	cpi	r24, 0x0A	; 10
	brcs	13f	    	;
    1d3c:	18 f0       	brcs	.+6      	; 0x1d44 <pickval+0x3a>
	cpi	r24, 17 	;
    1d3e:	81 31       	cpi	r24, 0x11	; 17
	brcs	90f	    	;
    1d40:	80 f0       	brcs	.+32     	; 0x1d62 <pickval+0x58>
	subi	r24, 7  	;
    1d42:	87 50       	subi	r24, 0x07	; 7
13:	cp	r24, r20	;
    1d44:	84 17       	cp	r24, r20
	brcc	90f	    	;/
    1d46:	68 f4       	brcc	.+26     	; 0x1d62 <pickval+0x58>
	ldi	r25, 17 	;r19:r18 *= r20(base)
    1d48:	91 e1       	ldi	r25, 0x11	; 17
	sub	r21, r21	;
    1d4a:	55 1b       	sub	r21, r21
14:	brcc	15f	    	;
    1d4c:	08 f4       	brcc	.+2      	; 0x1d50 <pickval+0x46>
	add	r21, r20	;
    1d4e:	54 0f       	add	r21, r20
15:	ror	r21     	;
    1d50:	57 95       	ror	r21
	ror	r19     	;
    1d52:	37 95       	ror	r19
	ror	r18     	;
    1d54:	27 95       	ror	r18
	dec	r25     	;
    1d56:	9a 95       	dec	r25
	brne	14b	    	;/
    1d58:	c9 f7       	brne	.-14     	; 0x1d4c <pickval+0x42>
	add	r18, r24	;r19:r18 += r24(digit)
    1d5a:	28 0f       	add	r18, r24
	adc	r19, r1 	;/
    1d5c:	31 1d       	adc	r19, r1
16:	adiw	XL, 1	  	;Next digit
    1d5e:	11 96       	adiw	r26, 0x01	; 1
	rjmp	10b
    1d60:	e4 cf       	rjmp	.-56     	; 0x1d2a <pickval+0x20>

90:	clr	r24     	;Exit with error(0)
    1d62:	88 27       	eor	r24, r24
	rjmp	92f
    1d64:	06 c0       	rjmp	.+12     	; 0x1d72 <pickval+0x68>
91:	ldi	r24, 1  	;Exit with successful(1)
    1d66:	81 e0       	ldi	r24, 0x01	; 1
	brtc	92f	    	;Negate when minus value
    1d68:	26 f4       	brtc	.+8      	; 0x1d72 <pickval+0x68>
	com	r18     	;
    1d6a:	20 95       	com	r18
	com	r19     	;
    1d6c:	30 95       	com	r19
	adc	r18, r1 	;
    1d6e:	21 1d       	adc	r18, r1
	adc	r19, r1 	;/
    1d70:	31 1d       	adc	r19, r1
92:	st	-Z, XH	 	;Store the string pointer back
    1d72:	b2 93       	st	-Z, r27
	st	-Z, XL	 	;/
    1d74:	a2 93       	st	-Z, r26
	_MOVW	ZH,ZL, r23,r22	;Store the result
    1d76:	fb 01       	movw	r30, r22
	st	Z+, r18 	;
    1d78:	21 93       	st	Z+, r18
	st	Z+, r19 	;/
    1d7a:	31 93       	st	Z+, r19
	ret
    1d7c:	08 95       	ret

00001d7e <init_timer0>:
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	e3 e5       	ldi	r30, 0x53	; 83
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	10 82       	st	Z, r1
    1d8c:	e2 e5       	ldi	r30, 0x52	; 82
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	10 82       	st	Z, r1
    1d92:	a3 e5       	ldi	r26, 0x53	; 83
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e3 e5       	ldi	r30, 0x53	; 83
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	8d 60       	ori	r24, 0x0D	; 13
    1d9e:	8c 93       	st	X, r24
    1da0:	ec e5       	ldi	r30, 0x5C	; 92
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	80 83       	st	Z, r24
    1da8:	a9 e5       	ldi	r26, 0x59	; 89
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e9 e5       	ldi	r30, 0x59	; 89
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	82 60       	ori	r24, 0x02	; 2
    1db4:	8c 93       	st	X, r24
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <__vector_16>:
    1dbc:	1f 92       	push	r1
    1dbe:	0f 92       	push	r0
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	0f 92       	push	r0
    1dc4:	11 24       	eor	r1, r1
    1dc6:	2f 93       	push	r18
    1dc8:	3f 93       	push	r19
    1dca:	5f 93       	push	r21
    1dcc:	6f 93       	push	r22
    1dce:	7f 93       	push	r23
    1dd0:	8f 93       	push	r24
    1dd2:	9f 93       	push	r25
    1dd4:	af 93       	push	r26
    1dd6:	bf 93       	push	r27
    1dd8:	ef 93       	push	r30
    1dda:	ff 93       	push	r31
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <__vector_16+0x26>
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	e4 e2       	ldi	r30, 0x24	; 36
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	80 91 8e 01 	lds	r24, 0x018E
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	20 91 8f 01 	lds	r18, 0x018F
    1dfe:	30 91 90 01 	lds	r19, 0x0190
    1e02:	96 95       	lsr	r25
    1e04:	98 2f       	mov	r25, r24
    1e06:	88 27       	eor	r24, r24
    1e08:	97 95       	ror	r25
    1e0a:	87 95       	ror	r24
    1e0c:	82 0f       	add	r24, r18
    1e0e:	93 1f       	adc	r25, r19
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	fc 01       	movw	r30, r24
    1e16:	e8 55       	subi	r30, 0x58	; 88
    1e18:	fa 4f       	sbci	r31, 0xFA	; 250
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1e:	91 83       	std	Z+1, r25	; 0x01
    1e20:	80 83       	st	Z, r24
    1e22:	80 91 8f 01 	lds	r24, 0x018F
    1e26:	90 91 90 01 	lds	r25, 0x0190
    1e2a:	01 96       	adiw	r24, 0x01	; 1
    1e2c:	90 93 90 01 	sts	0x0190, r25
    1e30:	80 93 8f 01 	sts	0x018F, r24
    1e34:	80 91 91 01 	lds	r24, 0x0191
    1e38:	83 30       	cpi	r24, 0x03	; 3
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <__vector_16+0x82>
    1e3c:	ff cf       	rjmp	.-2      	; 0x1e3c <__vector_16+0x80>
    1e3e:	80 91 8f 01 	lds	r24, 0x018F
    1e42:	90 91 90 01 	lds	r25, 0x0190
    1e46:	80 38       	cpi	r24, 0x80	; 128
    1e48:	91 05       	cpc	r25, r1
    1e4a:	09 f5       	brne	.+66     	; 0x1e8e <__vector_16+0xd2>
    1e4c:	80 91 8e 01 	lds	r24, 0x018E
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <__vector_16+0xa2>
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	2a 95       	dec	r18
    1e60:	e2 f7       	brpl	.-8      	; 0x1e5a <__vector_16+0x9e>
    1e62:	98 2f       	mov	r25, r24
    1e64:	80 91 91 01 	lds	r24, 0x0191
    1e68:	89 2b       	or	r24, r25
    1e6a:	80 93 91 01 	sts	0x0191, r24
    1e6e:	10 92 90 01 	sts	0x0190, r1
    1e72:	10 92 8f 01 	sts	0x018F, r1
    1e76:	80 91 8e 01 	lds	r24, 0x018E
    1e7a:	88 2f       	mov	r24, r24
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	01 96       	adiw	r24, 0x01	; 1
    1e80:	22 e0       	ldi	r18, 0x02	; 2
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	b9 01       	movw	r22, r18
    1e86:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <__divmodhi4>
    1e8a:	80 93 8e 01 	sts	0x018E, r24
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	ff 91       	pop	r31
    1e98:	ef 91       	pop	r30
    1e9a:	bf 91       	pop	r27
    1e9c:	af 91       	pop	r26
    1e9e:	9f 91       	pop	r25
    1ea0:	8f 91       	pop	r24
    1ea2:	7f 91       	pop	r23
    1ea4:	6f 91       	pop	r22
    1ea6:	5f 91       	pop	r21
    1ea8:	3f 91       	pop	r19
    1eaa:	2f 91       	pop	r18
    1eac:	0f 90       	pop	r0
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	0f 90       	pop	r0
    1eb2:	1f 90       	pop	r1
    1eb4:	18 95       	reti

00001eb6 <__vector_10>:
    1eb6:	1f 92       	push	r1
    1eb8:	0f 92       	push	r0
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	0f 92       	push	r0
    1ebe:	11 24       	eor	r1, r1
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	0f 90       	pop	r0
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	0f 90       	pop	r0
    1ed2:	1f 90       	pop	r1
    1ed4:	18 95       	reti

00001ed6 <init_AD>:
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	ab e3       	ldi	r26, 0x3B	; 59
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	eb e3       	ldi	r30, 0x3B	; 59
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	8c 93       	st	X, r24
    1eea:	aa e3       	ldi	r26, 0x3A	; 58
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	ea e3       	ldi	r30, 0x3A	; 58
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	8e 7f       	andi	r24, 0xFE	; 254
    1ef6:	8c 93       	st	X, r24
    1ef8:	e7 e2       	ldi	r30, 0x27	; 39
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 ec       	ldi	r24, 0xC0	; 192
    1efe:	80 83       	st	Z, r24
    1f00:	a7 e2       	ldi	r26, 0x27	; 39
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e7 e2       	ldi	r30, 0x27	; 39
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	8c 93       	st	X, r24
    1f0c:	a0 e5       	ldi	r26, 0x50	; 80
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e0 e5       	ldi	r30, 0x50	; 80
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	80 64       	ori	r24, 0x40	; 64
    1f18:	8c 93       	st	X, r24
    1f1a:	a0 e5       	ldi	r26, 0x50	; 80
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e0 e5       	ldi	r30, 0x50	; 80
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	80 62       	ori	r24, 0x20	; 32
    1f26:	8c 93       	st	X, r24
    1f28:	a6 e2       	ldi	r26, 0x26	; 38
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e6 e2       	ldi	r30, 0x26	; 38
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	80 62       	ori	r24, 0x20	; 32
    1f34:	8c 93       	st	X, r24
    1f36:	a6 e2       	ldi	r26, 0x26	; 38
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e6 e2       	ldi	r30, 0x26	; 38
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	88 60       	ori	r24, 0x08	; 8
    1f42:	8c 93       	st	X, r24
    1f44:	a6 e2       	ldi	r26, 0x26	; 38
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e6 e2       	ldi	r30, 0x26	; 38
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	82 60       	ori	r24, 0x02	; 2
    1f50:	8c 93       	st	X, r24
    1f52:	a6 e2       	ldi	r26, 0x26	; 38
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e6 e2       	ldi	r30, 0x26	; 38
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	84 60       	ori	r24, 0x04	; 4
    1f5e:	8c 93       	st	X, r24
    1f60:	a6 e2       	ldi	r26, 0x26	; 38
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e6 e2       	ldi	r30, 0x26	; 38
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	80 64       	ori	r24, 0x40	; 64
    1f6c:	8c 93       	st	X, r24
    1f6e:	a6 e2       	ldi	r26, 0x26	; 38
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e6 e2       	ldi	r30, 0x26	; 38
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	80 68       	ori	r24, 0x80	; 128
    1f7a:	8c 93       	st	X, r24
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <__vector_15>:
    1f82:	1f 92       	push	r1
    1f84:	0f 92       	push	r0
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	0f 92       	push	r0
    1f8a:	11 24       	eor	r1, r1
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	0f 90       	pop	r0
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	0f 90       	pop	r0
    1f9e:	1f 90       	pop	r1
    1fa0:	18 95       	reti

00001fa2 <main_adc>:
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <init_AD>
    1fae:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <init_timer0>
    1fb2:	78 94       	sei
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <stop_adc>:
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <stop_adc+0x6>
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	a9 e5       	ldi	r26, 0x59	; 89
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e9 e5       	ldi	r30, 0x59	; 89
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	8d 7f       	andi	r24, 0xFD	; 253
    1fd0:	8c 93       	st	X, r24
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <enable_adc>:
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <enable_adc+0x6>
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	a9 e5       	ldi	r26, 0x59	; 89
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e9 e5       	ldi	r30, 0x59	; 89
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	82 60       	ori	r24, 0x02	; 2
    1ff2:	8c 93       	st	X, r24
    1ff4:	10 92 8e 01 	sts	0x018E, r1
    1ff8:	10 92 90 01 	sts	0x0190, r1
    1ffc:	10 92 8f 01 	sts	0x018F, r1
    2000:	10 92 91 01 	sts	0x0191, r1
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <timer2_init>:
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	e5 e4       	ldi	r30, 0x45	; 69
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	87 e6       	ldi	r24, 0x67	; 103
    201c:	80 83       	st	Z, r24
    201e:	e4 e4       	ldi	r30, 0x44	; 68
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	10 82       	st	Z, r1
    2024:	e3 e4       	ldi	r30, 0x43	; 67
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	10 82       	st	Z, r1
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	08 95       	ret

00002030 <pwm_en>:
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	e5 e4       	ldi	r30, 0x45	; 69
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	87 e6       	ldi	r24, 0x67	; 103
    203e:	80 83       	st	Z, r24
    2040:	a1 e3       	ldi	r26, 0x31	; 49
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e1 e3       	ldi	r30, 0x31	; 49
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	80 68       	ori	r24, 0x80	; 128
    204c:	8c 93       	st	X, r24
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <pwm_stop>:
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	e5 e4       	ldi	r30, 0x45	; 69
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 e6       	ldi	r24, 0x60	; 96
    2062:	80 83       	st	Z, r24
    2064:	a1 e3       	ldi	r26, 0x31	; 49
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e1 e3       	ldi	r30, 0x31	; 49
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	8f 77       	andi	r24, 0x7F	; 127
    2070:	8c 93       	st	X, r24
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <pwmini>:
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	a1 e3       	ldi	r26, 0x31	; 49
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e1 e3       	ldi	r30, 0x31	; 49
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	80 68       	ori	r24, 0x80	; 128
    208c:	8c 93       	st	X, r24
    208e:	0e 94 07 10 	call	0x200e	; 0x200e <timer2_init>
    2092:	78 94       	sei
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <moter>:
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	2f 97       	sbiw	r28, 0x0f	; 15
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	de bf       	out	0x3e, r29	; 62
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	cd bf       	out	0x3d, r28	; 61
    20ae:	8f 87       	std	Y+15, r24	; 0x0f
    20b0:	e3 e4       	ldi	r30, 0x43	; 67
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b6:	80 83       	st	Z, r24
    20b8:	0e 94 18 10 	call	0x2030	; 0x2030 <pwm_en>
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e8       	ldi	r25, 0x80	; 128
    20c0:	ab e3       	ldi	r26, 0x3B	; 59
    20c2:	b5 e4       	ldi	r27, 0x45	; 69
    20c4:	8b 87       	std	Y+11, r24	; 0x0b
    20c6:	9c 87       	std	Y+12, r25	; 0x0c
    20c8:	ad 87       	std	Y+13, r26	; 0x0d
    20ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	4a e7       	ldi	r20, 0x7A	; 122
    20da:	53 e4       	ldi	r21, 0x43	; 67
    20dc:	0e 94 47 19 	call	0x328e	; 0x328e <__mulsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	8f 83       	std	Y+7, r24	; 0x07
    20e6:	98 87       	std	Y+8, r25	; 0x08
    20e8:	a9 87       	std	Y+9, r26	; 0x09
    20ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ec:	6f 81       	ldd	r22, Y+7	; 0x07
    20ee:	78 85       	ldd	r23, Y+8	; 0x08
    20f0:	89 85       	ldd	r24, Y+9	; 0x09
    20f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e8       	ldi	r20, 0x80	; 128
    20fa:	5f e3       	ldi	r21, 0x3F	; 63
    20fc:	0e 94 4d 1b 	call	0x369a	; 0x369a <__ltsf2>
    2100:	88 23       	and	r24, r24
    2102:	2c f4       	brge	.+10     	; 0x210e <moter+0x74>
		__ticks = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9e 83       	std	Y+6, r25	; 0x06
    210a:	8d 83       	std	Y+5, r24	; 0x05
    210c:	3f c0       	rjmp	.+126    	; 0x218c <moter+0xf2>
	else if (__tmp > 65535)
    210e:	6f 81       	ldd	r22, Y+7	; 0x07
    2110:	78 85       	ldd	r23, Y+8	; 0x08
    2112:	89 85       	ldd	r24, Y+9	; 0x09
    2114:	9a 85       	ldd	r25, Y+10	; 0x0a
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	3f ef       	ldi	r19, 0xFF	; 255
    211a:	4f e7       	ldi	r20, 0x7F	; 127
    211c:	57 e4       	ldi	r21, 0x47	; 71
    211e:	0e 94 ed 1a 	call	0x35da	; 0x35da <__gtsf2>
    2122:	18 16       	cp	r1, r24
    2124:	4c f5       	brge	.+82     	; 0x2178 <moter+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2126:	6b 85       	ldd	r22, Y+11	; 0x0b
    2128:	7c 85       	ldd	r23, Y+12	; 0x0c
    212a:	8d 85       	ldd	r24, Y+13	; 0x0d
    212c:	9e 85       	ldd	r25, Y+14	; 0x0e
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e2       	ldi	r20, 0x20	; 32
    2134:	51 e4       	ldi	r21, 0x41	; 65
    2136:	0e 94 47 19 	call	0x328e	; 0x328e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
    214e:	0f c0       	rjmp	.+30     	; 0x216e <moter+0xd4>
    2150:	89 e1       	ldi	r24, 0x19	; 25
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	9c 83       	std	Y+4, r25	; 0x04
    2156:	8b 83       	std	Y+3, r24	; 0x03
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <moter+0xc2>
    2160:	9c 83       	std	Y+4, r25	; 0x04
    2162:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	9e 81       	ldd	r25, Y+6	; 0x06
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	9e 83       	std	Y+6, r25	; 0x06
    216c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216e:	8d 81       	ldd	r24, Y+5	; 0x05
    2170:	9e 81       	ldd	r25, Y+6	; 0x06
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	69 f7       	brne	.-38     	; 0x2150 <moter+0xb6>
    2176:	14 c0       	rjmp	.+40     	; 0x21a0 <moter+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2178:	6f 81       	ldd	r22, Y+7	; 0x07
    217a:	78 85       	ldd	r23, Y+8	; 0x08
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9e 83       	std	Y+6, r25	; 0x06
    218a:	8d 83       	std	Y+5, r24	; 0x05
    218c:	8d 81       	ldd	r24, Y+5	; 0x05
    218e:	9e 81       	ldd	r25, Y+6	; 0x06
    2190:	9a 83       	std	Y+2, r25	; 0x02
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <moter+0xfe>
    219c:	9a 83       	std	Y+2, r25	; 0x02
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	0e 94 2a 10 	call	0x2054	; 0x2054 <pwm_stop>
    21a4:	2f 96       	adiw	r28, 0x0f	; 15
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <wake>:
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	ac 97       	sbiw	r28, 0x2c	; 44
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <stop_adc>
    21ce:	88 ea       	ldi	r24, 0xA8	; 168
    21d0:	95 e0       	ldi	r25, 0x05	; 5
    21d2:	9c a3       	std	Y+36, r25	; 0x24
    21d4:	8b a3       	std	Y+35, r24	; 0x23
    21d6:	8b a1       	ldd	r24, Y+35	; 0x23
    21d8:	9c a1       	ldd	r25, Y+36	; 0x24
    21da:	84 96       	adiw	r24, 0x24	; 36
    21dc:	9a a3       	std	Y+34, r25	; 0x22
    21de:	89 a3       	std	Y+33, r24	; 0x21
    21e0:	89 a1       	ldd	r24, Y+33	; 0x21
    21e2:	9a a1       	ldd	r25, Y+34	; 0x22
    21e4:	84 96       	adiw	r24, 0x24	; 36
    21e6:	98 a3       	std	Y+32, r25	; 0x20
    21e8:	8f 8f       	std	Y+31, r24	; 0x1f
    21ea:	e9 a1       	ldd	r30, Y+33	; 0x21
    21ec:	fa a1       	ldd	r31, Y+34	; 0x22
    21ee:	11 82       	std	Z+1, r1	; 0x01
    21f0:	10 82       	st	Z, r1
    21f2:	e9 a1       	ldd	r30, Y+33	; 0x21
    21f4:	fa a1       	ldd	r31, Y+34	; 0x22
    21f6:	13 82       	std	Z+3, r1	; 0x03
    21f8:	12 82       	std	Z+2, r1	; 0x02
    21fa:	e9 a1       	ldd	r30, Y+33	; 0x21
    21fc:	fa a1       	ldd	r31, Y+34	; 0x22
    21fe:	15 82       	std	Z+5, r1	; 0x05
    2200:	14 82       	std	Z+4, r1	; 0x04
    2202:	0e 94 b5 13 	call	0x276a	; 0x276a <ADXL345_config>
    2206:	1e a2       	std	Y+38, r1	; 0x26
    2208:	31 c0       	rjmp	.+98     	; 0x226c <wake+0xb6>
    220a:	8b a1       	ldd	r24, Y+35	; 0x23
    220c:	9c a1       	ldd	r25, Y+36	; 0x24
    220e:	0e 94 8b 13 	call	0x2716	; 0x2716 <readxyz_345>
    2212:	e9 a1       	ldd	r30, Y+33	; 0x21
    2214:	fa a1       	ldd	r31, Y+34	; 0x22
    2216:	20 81       	ld	r18, Z
    2218:	31 81       	ldd	r19, Z+1	; 0x01
    221a:	eb a1       	ldd	r30, Y+35	; 0x23
    221c:	fc a1       	ldd	r31, Y+36	; 0x24
    221e:	80 81       	ld	r24, Z
    2220:	91 81       	ldd	r25, Z+1	; 0x01
    2222:	82 0f       	add	r24, r18
    2224:	93 1f       	adc	r25, r19
    2226:	e9 a1       	ldd	r30, Y+33	; 0x21
    2228:	fa a1       	ldd	r31, Y+34	; 0x22
    222a:	91 83       	std	Z+1, r25	; 0x01
    222c:	80 83       	st	Z, r24
    222e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2230:	fa a1       	ldd	r31, Y+34	; 0x22
    2232:	22 81       	ldd	r18, Z+2	; 0x02
    2234:	33 81       	ldd	r19, Z+3	; 0x03
    2236:	eb a1       	ldd	r30, Y+35	; 0x23
    2238:	fc a1       	ldd	r31, Y+36	; 0x24
    223a:	82 81       	ldd	r24, Z+2	; 0x02
    223c:	93 81       	ldd	r25, Z+3	; 0x03
    223e:	82 0f       	add	r24, r18
    2240:	93 1f       	adc	r25, r19
    2242:	e9 a1       	ldd	r30, Y+33	; 0x21
    2244:	fa a1       	ldd	r31, Y+34	; 0x22
    2246:	93 83       	std	Z+3, r25	; 0x03
    2248:	82 83       	std	Z+2, r24	; 0x02
    224a:	e9 a1       	ldd	r30, Y+33	; 0x21
    224c:	fa a1       	ldd	r31, Y+34	; 0x22
    224e:	24 81       	ldd	r18, Z+4	; 0x04
    2250:	35 81       	ldd	r19, Z+5	; 0x05
    2252:	eb a1       	ldd	r30, Y+35	; 0x23
    2254:	fc a1       	ldd	r31, Y+36	; 0x24
    2256:	84 81       	ldd	r24, Z+4	; 0x04
    2258:	95 81       	ldd	r25, Z+5	; 0x05
    225a:	82 0f       	add	r24, r18
    225c:	93 1f       	adc	r25, r19
    225e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2260:	fa a1       	ldd	r31, Y+34	; 0x22
    2262:	95 83       	std	Z+5, r25	; 0x05
    2264:	84 83       	std	Z+4, r24	; 0x04
    2266:	8e a1       	ldd	r24, Y+38	; 0x26
    2268:	8f 5f       	subi	r24, 0xFF	; 255
    226a:	8e a3       	std	Y+38, r24	; 0x26
    226c:	8e a1       	ldd	r24, Y+38	; 0x26
    226e:	8a 30       	cpi	r24, 0x0A	; 10
    2270:	60 f2       	brcs	.-104    	; 0x220a <wake+0x54>
    2272:	e9 a1       	ldd	r30, Y+33	; 0x21
    2274:	fa a1       	ldd	r31, Y+34	; 0x22
    2276:	80 81       	ld	r24, Z
    2278:	91 81       	ldd	r25, Z+1	; 0x01
    227a:	2a e0       	ldi	r18, 0x0A	; 10
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	b9 01       	movw	r22, r18
    2280:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <__divmodhi4>
    2284:	cb 01       	movw	r24, r22
    2286:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2288:	f8 a1       	ldd	r31, Y+32	; 0x20
    228a:	91 83       	std	Z+1, r25	; 0x01
    228c:	80 83       	st	Z, r24
    228e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2290:	fa a1       	ldd	r31, Y+34	; 0x22
    2292:	82 81       	ldd	r24, Z+2	; 0x02
    2294:	93 81       	ldd	r25, Z+3	; 0x03
    2296:	2a e0       	ldi	r18, 0x0A	; 10
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	b9 01       	movw	r22, r18
    229c:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <__divmodhi4>
    22a0:	cb 01       	movw	r24, r22
    22a2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    22a4:	f8 a1       	ldd	r31, Y+32	; 0x20
    22a6:	93 83       	std	Z+3, r25	; 0x03
    22a8:	82 83       	std	Z+2, r24	; 0x02
    22aa:	e9 a1       	ldd	r30, Y+33	; 0x21
    22ac:	fa a1       	ldd	r31, Y+34	; 0x22
    22ae:	84 81       	ldd	r24, Z+4	; 0x04
    22b0:	95 81       	ldd	r25, Z+5	; 0x05
    22b2:	2a e0       	ldi	r18, 0x0A	; 10
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	b9 01       	movw	r22, r18
    22b8:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <__divmodhi4>
    22bc:	cb 01       	movw	r24, r22
    22be:	ef 8d       	ldd	r30, Y+31	; 0x1f
    22c0:	f8 a1       	ldd	r31, Y+32	; 0x20
    22c2:	95 83       	std	Z+5, r25	; 0x05
    22c4:	84 83       	std	Z+4, r24	; 0x04
    22c6:	0e 94 3c 10 	call	0x2078	; 0x2078 <pwmini>
    22ca:	83 e2       	ldi	r24, 0x23	; 35
    22cc:	8d a3       	std	Y+37, r24	; 0x25
    22ce:	de c0       	rjmp	.+444    	; 0x248c <wake+0x2d6>
    22d0:	e9 a1       	ldd	r30, Y+33	; 0x21
    22d2:	fa a1       	ldd	r31, Y+34	; 0x22
    22d4:	11 82       	std	Z+1, r1	; 0x01
    22d6:	10 82       	st	Z, r1
    22d8:	e9 a1       	ldd	r30, Y+33	; 0x21
    22da:	fa a1       	ldd	r31, Y+34	; 0x22
    22dc:	13 82       	std	Z+3, r1	; 0x03
    22de:	12 82       	std	Z+2, r1	; 0x02
    22e0:	e9 a1       	ldd	r30, Y+33	; 0x21
    22e2:	fa a1       	ldd	r31, Y+34	; 0x22
    22e4:	15 82       	std	Z+5, r1	; 0x05
    22e6:	14 82       	std	Z+4, r1	; 0x04
    22e8:	8d a1       	ldd	r24, Y+37	; 0x25
    22ea:	0e 94 4d 10 	call	0x209a	; 0x209a <moter>
    22ee:	1e 8e       	std	Y+30, r1	; 0x1e
    22f0:	1d 8e       	std	Y+29, r1	; 0x1d
    22f2:	c2 c0       	rjmp	.+388    	; 0x2478 <wake+0x2c2>
    22f4:	1e a2       	std	Y+38, r1	; 0x26
    22f6:	31 c0       	rjmp	.+98     	; 0x235a <wake+0x1a4>
    22f8:	8b a1       	ldd	r24, Y+35	; 0x23
    22fa:	9c a1       	ldd	r25, Y+36	; 0x24
    22fc:	0e 94 8b 13 	call	0x2716	; 0x2716 <readxyz_345>
    2300:	e9 a1       	ldd	r30, Y+33	; 0x21
    2302:	fa a1       	ldd	r31, Y+34	; 0x22
    2304:	20 81       	ld	r18, Z
    2306:	31 81       	ldd	r19, Z+1	; 0x01
    2308:	eb a1       	ldd	r30, Y+35	; 0x23
    230a:	fc a1       	ldd	r31, Y+36	; 0x24
    230c:	80 81       	ld	r24, Z
    230e:	91 81       	ldd	r25, Z+1	; 0x01
    2310:	82 0f       	add	r24, r18
    2312:	93 1f       	adc	r25, r19
    2314:	e9 a1       	ldd	r30, Y+33	; 0x21
    2316:	fa a1       	ldd	r31, Y+34	; 0x22
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	80 83       	st	Z, r24
    231c:	e9 a1       	ldd	r30, Y+33	; 0x21
    231e:	fa a1       	ldd	r31, Y+34	; 0x22
    2320:	22 81       	ldd	r18, Z+2	; 0x02
    2322:	33 81       	ldd	r19, Z+3	; 0x03
    2324:	eb a1       	ldd	r30, Y+35	; 0x23
    2326:	fc a1       	ldd	r31, Y+36	; 0x24
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	93 81       	ldd	r25, Z+3	; 0x03
    232c:	82 0f       	add	r24, r18
    232e:	93 1f       	adc	r25, r19
    2330:	e9 a1       	ldd	r30, Y+33	; 0x21
    2332:	fa a1       	ldd	r31, Y+34	; 0x22
    2334:	93 83       	std	Z+3, r25	; 0x03
    2336:	82 83       	std	Z+2, r24	; 0x02
    2338:	e9 a1       	ldd	r30, Y+33	; 0x21
    233a:	fa a1       	ldd	r31, Y+34	; 0x22
    233c:	24 81       	ldd	r18, Z+4	; 0x04
    233e:	35 81       	ldd	r19, Z+5	; 0x05
    2340:	eb a1       	ldd	r30, Y+35	; 0x23
    2342:	fc a1       	ldd	r31, Y+36	; 0x24
    2344:	84 81       	ldd	r24, Z+4	; 0x04
    2346:	95 81       	ldd	r25, Z+5	; 0x05
    2348:	82 0f       	add	r24, r18
    234a:	93 1f       	adc	r25, r19
    234c:	e9 a1       	ldd	r30, Y+33	; 0x21
    234e:	fa a1       	ldd	r31, Y+34	; 0x22
    2350:	95 83       	std	Z+5, r25	; 0x05
    2352:	84 83       	std	Z+4, r24	; 0x04
    2354:	8e a1       	ldd	r24, Y+38	; 0x26
    2356:	8f 5f       	subi	r24, 0xFF	; 255
    2358:	8e a3       	std	Y+38, r24	; 0x26
    235a:	8e a1       	ldd	r24, Y+38	; 0x26
    235c:	8a 30       	cpi	r24, 0x0A	; 10
    235e:	60 f2       	brcs	.-104    	; 0x22f8 <wake+0x142>
    2360:	e9 a1       	ldd	r30, Y+33	; 0x21
    2362:	fa a1       	ldd	r31, Y+34	; 0x22
    2364:	80 81       	ld	r24, Z
    2366:	91 81       	ldd	r25, Z+1	; 0x01
    2368:	2a e0       	ldi	r18, 0x0A	; 10
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	b9 01       	movw	r22, r18
    236e:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <__divmodhi4>
    2372:	cb 01       	movw	r24, r22
    2374:	e9 a1       	ldd	r30, Y+33	; 0x21
    2376:	fa a1       	ldd	r31, Y+34	; 0x22
    2378:	91 83       	std	Z+1, r25	; 0x01
    237a:	80 83       	st	Z, r24
    237c:	e9 a1       	ldd	r30, Y+33	; 0x21
    237e:	fa a1       	ldd	r31, Y+34	; 0x22
    2380:	82 81       	ldd	r24, Z+2	; 0x02
    2382:	93 81       	ldd	r25, Z+3	; 0x03
    2384:	2a e0       	ldi	r18, 0x0A	; 10
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	b9 01       	movw	r22, r18
    238a:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <__divmodhi4>
    238e:	cb 01       	movw	r24, r22
    2390:	e9 a1       	ldd	r30, Y+33	; 0x21
    2392:	fa a1       	ldd	r31, Y+34	; 0x22
    2394:	93 83       	std	Z+3, r25	; 0x03
    2396:	82 83       	std	Z+2, r24	; 0x02
    2398:	e9 a1       	ldd	r30, Y+33	; 0x21
    239a:	fa a1       	ldd	r31, Y+34	; 0x22
    239c:	84 81       	ldd	r24, Z+4	; 0x04
    239e:	95 81       	ldd	r25, Z+5	; 0x05
    23a0:	2a e0       	ldi	r18, 0x0A	; 10
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	b9 01       	movw	r22, r18
    23a6:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <__divmodhi4>
    23aa:	cb 01       	movw	r24, r22
    23ac:	e9 a1       	ldd	r30, Y+33	; 0x21
    23ae:	fa a1       	ldd	r31, Y+34	; 0x22
    23b0:	95 83       	std	Z+5, r25	; 0x05
    23b2:	84 83       	std	Z+4, r24	; 0x04
    23b4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    23b6:	f8 a1       	ldd	r31, Y+32	; 0x20
    23b8:	20 81       	ld	r18, Z
    23ba:	31 81       	ldd	r19, Z+1	; 0x01
    23bc:	e9 a1       	ldd	r30, Y+33	; 0x21
    23be:	fa a1       	ldd	r31, Y+34	; 0x22
    23c0:	80 81       	ld	r24, Z
    23c2:	91 81       	ldd	r25, Z+1	; 0x01
    23c4:	a9 01       	movw	r20, r18
    23c6:	48 1b       	sub	r20, r24
    23c8:	59 0b       	sbc	r21, r25
    23ca:	ca 01       	movw	r24, r20
    23cc:	9c a7       	std	Y+44, r25	; 0x2c
    23ce:	8b a7       	std	Y+43, r24	; 0x2b
    23d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    23d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    23d4:	99 23       	and	r25, r25
    23d6:	3c f4       	brge	.+14     	; 0x23e6 <wake+0x230>
    23d8:	4b a5       	ldd	r20, Y+43	; 0x2b
    23da:	5c a5       	ldd	r21, Y+44	; 0x2c
    23dc:	50 95       	com	r21
    23de:	41 95       	neg	r20
    23e0:	5f 4f       	sbci	r21, 0xFF	; 255
    23e2:	5c a7       	std	Y+44, r21	; 0x2c
    23e4:	4b a7       	std	Y+43, r20	; 0x2b
    23e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    23e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    23ea:	89 3c       	cpi	r24, 0xC9	; 201
    23ec:	91 05       	cpc	r25, r1
    23ee:	e4 f5       	brge	.+120    	; 0x2468 <wake+0x2b2>
    23f0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    23f2:	f8 a1       	ldd	r31, Y+32	; 0x20
    23f4:	24 81       	ldd	r18, Z+4	; 0x04
    23f6:	35 81       	ldd	r19, Z+5	; 0x05
    23f8:	e9 a1       	ldd	r30, Y+33	; 0x21
    23fa:	fa a1       	ldd	r31, Y+34	; 0x22
    23fc:	84 81       	ldd	r24, Z+4	; 0x04
    23fe:	95 81       	ldd	r25, Z+5	; 0x05
    2400:	a9 01       	movw	r20, r18
    2402:	48 1b       	sub	r20, r24
    2404:	59 0b       	sbc	r21, r25
    2406:	ca 01       	movw	r24, r20
    2408:	9a a7       	std	Y+42, r25	; 0x2a
    240a:	89 a7       	std	Y+41, r24	; 0x29
    240c:	89 a5       	ldd	r24, Y+41	; 0x29
    240e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2410:	99 23       	and	r25, r25
    2412:	3c f4       	brge	.+14     	; 0x2422 <wake+0x26c>
    2414:	49 a5       	ldd	r20, Y+41	; 0x29
    2416:	5a a5       	ldd	r21, Y+42	; 0x2a
    2418:	50 95       	com	r21
    241a:	41 95       	neg	r20
    241c:	5f 4f       	sbci	r21, 0xFF	; 255
    241e:	5a a7       	std	Y+42, r21	; 0x2a
    2420:	49 a7       	std	Y+41, r20	; 0x29
    2422:	89 a5       	ldd	r24, Y+41	; 0x29
    2424:	9a a5       	ldd	r25, Y+42	; 0x2a
    2426:	89 3c       	cpi	r24, 0xC9	; 201
    2428:	91 05       	cpc	r25, r1
    242a:	f4 f4       	brge	.+60     	; 0x2468 <wake+0x2b2>
    242c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    242e:	f8 a1       	ldd	r31, Y+32	; 0x20
    2430:	22 81       	ldd	r18, Z+2	; 0x02
    2432:	33 81       	ldd	r19, Z+3	; 0x03
    2434:	e9 a1       	ldd	r30, Y+33	; 0x21
    2436:	fa a1       	ldd	r31, Y+34	; 0x22
    2438:	82 81       	ldd	r24, Z+2	; 0x02
    243a:	93 81       	ldd	r25, Z+3	; 0x03
    243c:	a9 01       	movw	r20, r18
    243e:	48 1b       	sub	r20, r24
    2440:	59 0b       	sbc	r21, r25
    2442:	ca 01       	movw	r24, r20
    2444:	98 a7       	std	Y+40, r25	; 0x28
    2446:	8f a3       	std	Y+39, r24	; 0x27
    2448:	8f a1       	ldd	r24, Y+39	; 0x27
    244a:	98 a5       	ldd	r25, Y+40	; 0x28
    244c:	99 23       	and	r25, r25
    244e:	3c f4       	brge	.+14     	; 0x245e <wake+0x2a8>
    2450:	4f a1       	ldd	r20, Y+39	; 0x27
    2452:	58 a5       	ldd	r21, Y+40	; 0x28
    2454:	50 95       	com	r21
    2456:	41 95       	neg	r20
    2458:	5f 4f       	sbci	r21, 0xFF	; 255
    245a:	58 a7       	std	Y+40, r21	; 0x28
    245c:	4f a3       	std	Y+39, r20	; 0x27
    245e:	8f a1       	ldd	r24, Y+39	; 0x27
    2460:	98 a5       	ldd	r25, Y+40	; 0x28
    2462:	89 3c       	cpi	r24, 0xC9	; 201
    2464:	91 05       	cpc	r25, r1
    2466:	1c f0       	brlt	.+6      	; 0x246e <wake+0x2b8>
    2468:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <enable_adc>
    246c:	f9 c0       	rjmp	.+498    	; 0x2660 <wake+0x4aa>
    246e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2470:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2472:	01 96       	adiw	r24, 0x01	; 1
    2474:	9e 8f       	std	Y+30, r25	; 0x1e
    2476:	8d 8f       	std	Y+29, r24	; 0x1d
    2478:	8d 8d       	ldd	r24, Y+29	; 0x1d
    247a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    247c:	23 e0       	ldi	r18, 0x03	; 3
    247e:	88 3e       	cpi	r24, 0xE8	; 232
    2480:	92 07       	cpc	r25, r18
    2482:	08 f4       	brcc	.+2      	; 0x2486 <wake+0x2d0>
    2484:	37 cf       	rjmp	.-402    	; 0x22f4 <wake+0x13e>
    2486:	8d a1       	ldd	r24, Y+37	; 0x25
    2488:	81 5f       	subi	r24, 0xF1	; 241
    248a:	8d a3       	std	Y+37, r24	; 0x25
    248c:	8d a1       	ldd	r24, Y+37	; 0x25
    248e:	85 3f       	cpi	r24, 0xF5	; 245
    2490:	08 f4       	brcc	.+2      	; 0x2494 <wake+0x2de>
    2492:	1e cf       	rjmp	.-452    	; 0x22d0 <wake+0x11a>
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	90 e6       	ldi	r25, 0x60	; 96
    2498:	aa ee       	ldi	r26, 0xEA	; 234
    249a:	b6 e4       	ldi	r27, 0x46	; 70
    249c:	89 8f       	std	Y+25, r24	; 0x19
    249e:	9a 8f       	std	Y+26, r25	; 0x1a
    24a0:	ab 8f       	std	Y+27, r26	; 0x1b
    24a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a4:	69 8d       	ldd	r22, Y+25	; 0x19
    24a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	4a e7       	ldi	r20, 0x7A	; 122
    24b2:	53 e4       	ldi	r21, 0x43	; 67
    24b4:	0e 94 47 19 	call	0x328e	; 0x328e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	8d 8b       	std	Y+21, r24	; 0x15
    24be:	9e 8b       	std	Y+22, r25	; 0x16
    24c0:	af 8b       	std	Y+23, r26	; 0x17
    24c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24c4:	6d 89       	ldd	r22, Y+21	; 0x15
    24c6:	7e 89       	ldd	r23, Y+22	; 0x16
    24c8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ca:	98 8d       	ldd	r25, Y+24	; 0x18
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e8       	ldi	r20, 0x80	; 128
    24d2:	5f e3       	ldi	r21, 0x3F	; 63
    24d4:	0e 94 4d 1b 	call	0x369a	; 0x369a <__ltsf2>
    24d8:	88 23       	and	r24, r24
    24da:	2c f4       	brge	.+10     	; 0x24e6 <wake+0x330>
		__ticks = 1;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9c 8b       	std	Y+20, r25	; 0x14
    24e2:	8b 8b       	std	Y+19, r24	; 0x13
    24e4:	3f c0       	rjmp	.+126    	; 0x2564 <wake+0x3ae>
	else if (__tmp > 65535)
    24e6:	6d 89       	ldd	r22, Y+21	; 0x15
    24e8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ea:	8f 89       	ldd	r24, Y+23	; 0x17
    24ec:	98 8d       	ldd	r25, Y+24	; 0x18
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	3f ef       	ldi	r19, 0xFF	; 255
    24f2:	4f e7       	ldi	r20, 0x7F	; 127
    24f4:	57 e4       	ldi	r21, 0x47	; 71
    24f6:	0e 94 ed 1a 	call	0x35da	; 0x35da <__gtsf2>
    24fa:	18 16       	cp	r1, r24
    24fc:	4c f5       	brge	.+82     	; 0x2550 <wake+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2500:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2502:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2504:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e2       	ldi	r20, 0x20	; 32
    250c:	51 e4       	ldi	r21, 0x41	; 65
    250e:	0e 94 47 19 	call	0x328e	; 0x328e <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	bc 01       	movw	r22, r24
    2518:	cd 01       	movw	r24, r26
    251a:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	9c 8b       	std	Y+20, r25	; 0x14
    2524:	8b 8b       	std	Y+19, r24	; 0x13
    2526:	0f c0       	rjmp	.+30     	; 0x2546 <wake+0x390>
    2528:	89 e1       	ldi	r24, 0x19	; 25
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	9a 8b       	std	Y+18, r25	; 0x12
    252e:	89 8b       	std	Y+17, r24	; 0x11
    2530:	89 89       	ldd	r24, Y+17	; 0x11
    2532:	9a 89       	ldd	r25, Y+18	; 0x12
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <wake+0x37e>
    2538:	9a 8b       	std	Y+18, r25	; 0x12
    253a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253c:	8b 89       	ldd	r24, Y+19	; 0x13
    253e:	9c 89       	ldd	r25, Y+20	; 0x14
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	9c 8b       	std	Y+20, r25	; 0x14
    2544:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2546:	8b 89       	ldd	r24, Y+19	; 0x13
    2548:	9c 89       	ldd	r25, Y+20	; 0x14
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	69 f7       	brne	.-38     	; 0x2528 <wake+0x372>
    254e:	14 c0       	rjmp	.+40     	; 0x2578 <wake+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2550:	6d 89       	ldd	r22, Y+21	; 0x15
    2552:	7e 89       	ldd	r23, Y+22	; 0x16
    2554:	8f 89       	ldd	r24, Y+23	; 0x17
    2556:	98 8d       	ldd	r25, Y+24	; 0x18
    2558:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__fixunssfsi>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	9c 8b       	std	Y+20, r25	; 0x14
    2562:	8b 8b       	std	Y+19, r24	; 0x13
    2564:	8b 89       	ldd	r24, Y+19	; 0x13
    2566:	9c 89       	ldd	r25, Y+20	; 0x14
    2568:	98 8b       	std	Y+16, r25	; 0x10
    256a:	8f 87       	std	Y+15, r24	; 0x0f
    256c:	8f 85       	ldd	r24, Y+15	; 0x0f
    256e:	98 89       	ldd	r25, Y+16	; 0x10
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <wake+0x3ba>
    2574:	98 8b       	std	Y+16, r25	; 0x10
    2576:	8f 87       	std	Y+15, r24	; 0x0f
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	90 e6       	ldi	r25, 0x60	; 96
    257c:	aa ee       	ldi	r26, 0xEA	; 234
    257e:	b6 e4       	ldi	r27, 0x46	; 70
    2580:	8b 87       	std	Y+11, r24	; 0x0b
    2582:	9c 87       	std	Y+12, r25	; 0x0c
    2584:	ad 87       	std	Y+13, r26	; 0x0d
    2586:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2588:	6b 85       	ldd	r22, Y+11	; 0x0b
    258a:	7c 85       	ldd	r23, Y+12	; 0x0c
    258c:	8d 85       	ldd	r24, Y+13	; 0x0d
    258e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	4a e7       	ldi	r20, 0x7A	; 122
    2596:	53 e4       	ldi	r21, 0x43	; 67
    2598:	0e 94 47 19 	call	0x328e	; 0x328e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	8f 83       	std	Y+7, r24	; 0x07
    25a2:	98 87       	std	Y+8, r25	; 0x08
    25a4:	a9 87       	std	Y+9, r26	; 0x09
    25a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25a8:	6f 81       	ldd	r22, Y+7	; 0x07
    25aa:	78 85       	ldd	r23, Y+8	; 0x08
    25ac:	89 85       	ldd	r24, Y+9	; 0x09
    25ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e8       	ldi	r20, 0x80	; 128
    25b6:	5f e3       	ldi	r21, 0x3F	; 63
    25b8:	0e 94 4d 1b 	call	0x369a	; 0x369a <__ltsf2>
    25bc:	88 23       	and	r24, r24
    25be:	2c f4       	brge	.+10     	; 0x25ca <wake+0x414>
		__ticks = 1;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	9e 83       	std	Y+6, r25	; 0x06
    25c6:	8d 83       	std	Y+5, r24	; 0x05
    25c8:	3f c0       	rjmp	.+126    	; 0x2648 <wake+0x492>
	else if (__tmp > 65535)
    25ca:	6f 81       	ldd	r22, Y+7	; 0x07
    25cc:	78 85       	ldd	r23, Y+8	; 0x08
    25ce:	89 85       	ldd	r24, Y+9	; 0x09
    25d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	3f ef       	ldi	r19, 0xFF	; 255
    25d6:	4f e7       	ldi	r20, 0x7F	; 127
    25d8:	57 e4       	ldi	r21, 0x47	; 71
    25da:	0e 94 ed 1a 	call	0x35da	; 0x35da <__gtsf2>
    25de:	18 16       	cp	r1, r24
    25e0:	4c f5       	brge	.+82     	; 0x2634 <wake+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e2       	ldi	r20, 0x20	; 32
    25f0:	51 e4       	ldi	r21, 0x41	; 65
    25f2:	0e 94 47 19 	call	0x328e	; 0x328e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
    260a:	0f c0       	rjmp	.+30     	; 0x262a <wake+0x474>
    260c:	89 e1       	ldi	r24, 0x19	; 25
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9c 83       	std	Y+4, r25	; 0x04
    2612:	8b 83       	std	Y+3, r24	; 0x03
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	9c 81       	ldd	r25, Y+4	; 0x04
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <wake+0x462>
    261c:	9c 83       	std	Y+4, r25	; 0x04
    261e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2620:	8d 81       	ldd	r24, Y+5	; 0x05
    2622:	9e 81       	ldd	r25, Y+6	; 0x06
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	9e 83       	std	Y+6, r25	; 0x06
    2628:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262a:	8d 81       	ldd	r24, Y+5	; 0x05
    262c:	9e 81       	ldd	r25, Y+6	; 0x06
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	69 f7       	brne	.-38     	; 0x260c <wake+0x456>
    2632:	14 c0       	rjmp	.+40     	; 0x265c <wake+0x4a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2634:	6f 81       	ldd	r22, Y+7	; 0x07
    2636:	78 85       	ldd	r23, Y+8	; 0x08
    2638:	89 85       	ldd	r24, Y+9	; 0x09
    263a:	9a 85       	ldd	r25, Y+10	; 0x0a
    263c:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	9e 83       	std	Y+6, r25	; 0x06
    2646:	8d 83       	std	Y+5, r24	; 0x05
    2648:	8d 81       	ldd	r24, Y+5	; 0x05
    264a:	9e 81       	ldd	r25, Y+6	; 0x06
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <wake+0x49e>
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <enable_adc>
    2660:	ac 96       	adiw	r28, 0x2c	; 44
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	f8 94       	cli
    2666:	de bf       	out	0x3e, r29	; 62
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	cd bf       	out	0x3d, r28	; 61
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	08 95       	ret

00002672 <cs_l>:
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	a8 e3       	ldi	r26, 0x38	; 56
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	e8 e3       	ldi	r30, 0x38	; 56
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	8f 7e       	andi	r24, 0xEF	; 239
    2686:	8c 93       	st	X, r24
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <cs_h>:
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	a8 e3       	ldi	r26, 0x38	; 56
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e8 e3       	ldi	r30, 0x38	; 56
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	80 61       	ori	r24, 0x10	; 16
    26a2:	8c 93       	st	X, r24
    26a4:	cf 91       	pop	r28
    26a6:	df 91       	pop	r29
    26a8:	08 95       	ret

000026aa <WritData_345>:
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <WritData_345+0x6>
    26b0:	0f 92       	push	r0
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    26b6:	8a 83       	std	Y+2, r24	; 0x02
    26b8:	6b 83       	std	Y+3, r22	; 0x03
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	8f 77       	andi	r24, 0x7F	; 127
    26be:	89 83       	std	Y+1, r24	; 0x01
    26c0:	0e 94 39 13 	call	0x2672	; 0x2672 <cs_l>
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	0e 94 4f 14 	call	0x289e	; 0x289e <spiSendByte>
    26ca:	8b 81       	ldd	r24, Y+3	; 0x03
    26cc:	0e 94 4f 14 	call	0x289e	; 0x289e <spiSendByte>
    26d0:	0e 94 47 13 	call	0x268e	; 0x268e <cs_h>
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <readData_345>:
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <readData_345+0x6>
    26e6:	0f 92       	push	r0
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	8a 83       	std	Y+2, r24	; 0x02
    26ee:	6b 83       	std	Y+3, r22	; 0x03
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	80 68       	ori	r24, 0x80	; 128
    26f4:	89 83       	std	Y+1, r24	; 0x01
    26f6:	0e 94 39 13 	call	0x2672	; 0x2672 <cs_l>
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	0e 94 4f 14 	call	0x289e	; 0x289e <spiSendByte>
    2700:	0e 94 9a 14 	call	0x2934	; 0x2934 <spigetByte>
    2704:	8b 83       	std	Y+3, r24	; 0x03
    2706:	0e 94 47 13 	call	0x268e	; 0x268e <cs_h>
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <readxyz_345>:
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	00 d0       	rcall	.+0      	; 0x271c <readxyz_345+0x6>
    271c:	00 d0       	rcall	.+0      	; 0x271e <readxyz_345+0x8>
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	9c 83       	std	Y+4, r25	; 0x04
    2724:	8b 83       	std	Y+3, r24	; 0x03
    2726:	82 ef       	ldi	r24, 0xF2	; 242
    2728:	8a 83       	std	Y+2, r24	; 0x02
    272a:	0e 94 39 13 	call	0x2672	; 0x2672 <cs_l>
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	0e 94 4f 14 	call	0x289e	; 0x289e <spiSendByte>
    2734:	19 82       	std	Y+1, r1	; 0x01
    2736:	0d c0       	rjmp	.+26     	; 0x2752 <readxyz_345+0x3c>
    2738:	0e 94 9a 14 	call	0x2934	; 0x2934 <spigetByte>
    273c:	eb 81       	ldd	r30, Y+3	; 0x03
    273e:	fc 81       	ldd	r31, Y+4	; 0x04
    2740:	80 83       	st	Z, r24
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	9c 81       	ldd	r25, Y+4	; 0x04
    2746:	01 96       	adiw	r24, 0x01	; 1
    2748:	9c 83       	std	Y+4, r25	; 0x04
    274a:	8b 83       	std	Y+3, r24	; 0x03
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	8f 5f       	subi	r24, 0xFF	; 255
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	86 30       	cpi	r24, 0x06	; 6
    2756:	80 f3       	brcs	.-32     	; 0x2738 <readxyz_345+0x22>
    2758:	0e 94 47 13 	call	0x268e	; 0x268e <cs_h>
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <ADXL345_config>:
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	0f 92       	push	r0
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	0e 94 2a 14 	call	0x2854	; 0x2854 <spiInit>
    2778:	0e 94 41 14 	call	0x2882	; 0x2882 <spi_345>
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	69 81       	ldd	r22, Y+1	; 0x01
    2780:	0e 94 70 13 	call	0x26e0	; 0x26e0 <readData_345>
    2784:	8e e1       	ldi	r24, 0x1E	; 30
    2786:	60 e0       	ldi	r22, 0x00	; 0
    2788:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    278c:	8f e1       	ldi	r24, 0x1F	; 31
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    2794:	80 e2       	ldi	r24, 0x20	; 32
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    279c:	81 e2       	ldi	r24, 0x21	; 33
    279e:	60 e0       	ldi	r22, 0x00	; 0
    27a0:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    27a4:	82 e2       	ldi	r24, 0x22	; 34
    27a6:	60 e0       	ldi	r22, 0x00	; 0
    27a8:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    27ac:	83 e2       	ldi	r24, 0x23	; 35
    27ae:	60 e0       	ldi	r22, 0x00	; 0
    27b0:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    27b4:	84 e2       	ldi	r24, 0x24	; 36
    27b6:	61 e0       	ldi	r22, 0x01	; 1
    27b8:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    27bc:	85 e2       	ldi	r24, 0x25	; 37
    27be:	61 e0       	ldi	r22, 0x01	; 1
    27c0:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    27c4:	86 e2       	ldi	r24, 0x26	; 38
    27c6:	6b e2       	ldi	r22, 0x2B	; 43
    27c8:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    27cc:	87 e2       	ldi	r24, 0x27	; 39
    27ce:	60 e0       	ldi	r22, 0x00	; 0
    27d0:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    27d4:	88 e2       	ldi	r24, 0x28	; 40
    27d6:	69 e0       	ldi	r22, 0x09	; 9
    27d8:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    27dc:	89 e2       	ldi	r24, 0x29	; 41
    27de:	6f ef       	ldi	r22, 0xFF	; 255
    27e0:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    27e4:	8a e2       	ldi	r24, 0x2A	; 42
    27e6:	60 e8       	ldi	r22, 0x80	; 128
    27e8:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    27ec:	8c e2       	ldi	r24, 0x2C	; 44
    27ee:	6a e0       	ldi	r22, 0x0A	; 10
    27f0:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    27f4:	8d e2       	ldi	r24, 0x2D	; 45
    27f6:	68 e2       	ldi	r22, 0x28	; 40
    27f8:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    27fc:	8e e2       	ldi	r24, 0x2E	; 46
    27fe:	60 e0       	ldi	r22, 0x00	; 0
    2800:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    2804:	8f e2       	ldi	r24, 0x2F	; 47
    2806:	60 e0       	ldi	r22, 0x00	; 0
    2808:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    280c:	88 e3       	ldi	r24, 0x38	; 56
    280e:	61 e8       	ldi	r22, 0x81	; 129
    2810:	0e 94 55 13 	call	0x26aa	; 0x26aa <WritData_345>
    2814:	0f 90       	pop	r0
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <MMC_spi_Init>:
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	0f 92       	push	r0
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	89 83       	std	Y+1, r24	; 0x01
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	88 23       	and	r24, r24
    282c:	41 f4       	brne	.+16     	; 0x283e <MMC_spi_Init+0x22>
    282e:	ad e2       	ldi	r26, 0x2D	; 45
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	ed e2       	ldi	r30, 0x2D	; 45
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	83 60       	ori	r24, 0x03	; 3
    283a:	8c 93       	st	X, r24
    283c:	07 c0       	rjmp	.+14     	; 0x284c <MMC_spi_Init+0x30>
    283e:	ad e2       	ldi	r26, 0x2D	; 45
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	ed e2       	ldi	r30, 0x2D	; 45
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	8c 7f       	andi	r24, 0xFC	; 252
    284a:	8c 93       	st	X, r24
    284c:	0f 90       	pop	r0
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <spiInit>:
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	e8 e3       	ldi	r30, 0x38	; 56
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 eb       	ldi	r24, 0xB0	; 176
    2862:	80 83       	st	Z, r24
    2864:	e7 e3       	ldi	r30, 0x37	; 55
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 eb       	ldi	r24, 0xB0	; 176
    286a:	80 83       	st	Z, r24
    286c:	ed e2       	ldi	r30, 0x2D	; 45
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	82 e5       	ldi	r24, 0x52	; 82
    2872:	80 83       	st	Z, r24
    2874:	ee e2       	ldi	r30, 0x2E	; 46
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	80 83       	st	Z, r24
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <spi_345>:
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
    288a:	ad e2       	ldi	r26, 0x2D	; 45
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	ed e2       	ldi	r30, 0x2D	; 45
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	8c 60       	ori	r24, 0x0C	; 12
    2896:	8c 93       	st	X, r24
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <spiSendByte>:
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	0f 92       	push	r0
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	89 83       	std	Y+1, r24	; 0x01
    28aa:	ef e2       	ldi	r30, 0x2F	; 47
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	80 83       	st	Z, r24
    28b2:	ee e2       	ldi	r30, 0x2E	; 46
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	88 23       	and	r24, r24
    28ba:	dc f7       	brge	.-10     	; 0x28b2 <spiSendByte+0x14>
    28bc:	0f 90       	pop	r0
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <spiTransferByte>:
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	0f 92       	push	r0
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	ef e2       	ldi	r30, 0x2F	; 47
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	80 83       	st	Z, r24
    28d8:	ee e2       	ldi	r30, 0x2E	; 46
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	88 23       	and	r24, r24
    28e0:	dc f7       	brge	.-10     	; 0x28d8 <spiTransferByte+0x14>
    28e2:	ef e2       	ldi	r30, 0x2F	; 47
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	0f 90       	pop	r0
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	08 95       	ret

000028f0 <spiTransferWord>:
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	00 d0       	rcall	.+0      	; 0x28f6 <spiTransferWord+0x6>
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	8a 83       	std	Y+2, r24	; 0x02
    28fc:	19 82       	std	Y+1, r1	; 0x01
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	99 27       	eor	r25, r25
    2902:	87 fd       	sbrc	r24, 7
    2904:	90 95       	com	r25
    2906:	89 2f       	mov	r24, r25
    2908:	99 27       	eor	r25, r25
    290a:	0e 94 62 14 	call	0x28c4	; 0x28c4 <spiTransferByte>
    290e:	99 27       	eor	r25, r25
    2910:	87 fd       	sbrc	r24, 7
    2912:	90 95       	com	r25
    2914:	98 2f       	mov	r25, r24
    2916:	88 27       	eor	r24, r24
    2918:	89 83       	std	Y+1, r24	; 0x01
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	0e 94 62 14 	call	0x28c4	; 0x28c4 <spiTransferByte>
    2920:	98 2f       	mov	r25, r24
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	89 2b       	or	r24, r25
    2926:	89 83       	std	Y+1, r24	; 0x01
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <spigetByte>:
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	8f ef       	ldi	r24, 0xFF	; 255
    293e:	0e 94 4f 14 	call	0x289e	; 0x289e <spiSendByte>
    2942:	ef e2       	ldi	r30, 0x2F	; 47
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <LED_snore>:
#define   LED_SNORE    0
#define    LED_TESTOK    1
#define    POWER_ON    3

void  LED_snore(void)//PB0 low light
{//上电默认DDRx=0x00,PORTx=0x00 输入，无上拉电阻
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	2e 97       	sbiw	r28, 0x0e	; 14
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
//不用的管脚使能内部上拉电阻
//PORTB| = 0x01;//PB0 内部上啦
 DDRB|=0x01;//PB0 方向输出
    2962:	a7 e3       	ldi	r26, 0x37	; 55
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e7 e3       	ldi	r30, 0x37	; 55
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	81 60       	ori	r24, 0x01	; 1
    296e:	8c 93       	st	X, r24
 
PORTB&=~(1<<LED_SNORE); //点亮LED
    2970:	a8 e3       	ldi	r26, 0x38	; 56
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e8 e3       	ldi	r30, 0x38	; 56
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	8e 7f       	andi	r24, 0xFE	; 254
    297c:	8c 93       	st	X, r24
 stop_adc();
    297e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <stop_adc>
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	aa e7       	ldi	r26, 0x7A	; 122
    2988:	b4 e4       	ldi	r27, 0x44	; 68
    298a:	8b 87       	std	Y+11, r24	; 0x0b
    298c:	9c 87       	std	Y+12, r25	; 0x0c
    298e:	ad 87       	std	Y+13, r26	; 0x0d
    2990:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2992:	6b 85       	ldd	r22, Y+11	; 0x0b
    2994:	7c 85       	ldd	r23, Y+12	; 0x0c
    2996:	8d 85       	ldd	r24, Y+13	; 0x0d
    2998:	9e 85       	ldd	r25, Y+14	; 0x0e
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	4a e7       	ldi	r20, 0x7A	; 122
    29a0:	53 e4       	ldi	r21, 0x43	; 67
    29a2:	0e 94 47 19 	call	0x328e	; 0x328e <__mulsf3>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	8f 83       	std	Y+7, r24	; 0x07
    29ac:	98 87       	std	Y+8, r25	; 0x08
    29ae:	a9 87       	std	Y+9, r26	; 0x09
    29b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29b2:	6f 81       	ldd	r22, Y+7	; 0x07
    29b4:	78 85       	ldd	r23, Y+8	; 0x08
    29b6:	89 85       	ldd	r24, Y+9	; 0x09
    29b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e8       	ldi	r20, 0x80	; 128
    29c0:	5f e3       	ldi	r21, 0x3F	; 63
    29c2:	0e 94 4d 1b 	call	0x369a	; 0x369a <__ltsf2>
    29c6:	88 23       	and	r24, r24
    29c8:	2c f4       	brge	.+10     	; 0x29d4 <LED_snore+0x86>
		__ticks = 1;
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	9e 83       	std	Y+6, r25	; 0x06
    29d0:	8d 83       	std	Y+5, r24	; 0x05
    29d2:	3f c0       	rjmp	.+126    	; 0x2a52 <LED_snore+0x104>
	else if (__tmp > 65535)
    29d4:	6f 81       	ldd	r22, Y+7	; 0x07
    29d6:	78 85       	ldd	r23, Y+8	; 0x08
    29d8:	89 85       	ldd	r24, Y+9	; 0x09
    29da:	9a 85       	ldd	r25, Y+10	; 0x0a
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	3f ef       	ldi	r19, 0xFF	; 255
    29e0:	4f e7       	ldi	r20, 0x7F	; 127
    29e2:	57 e4       	ldi	r21, 0x47	; 71
    29e4:	0e 94 ed 1a 	call	0x35da	; 0x35da <__gtsf2>
    29e8:	18 16       	cp	r1, r24
    29ea:	4c f5       	brge	.+82     	; 0x2a3e <LED_snore+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	40 e2       	ldi	r20, 0x20	; 32
    29fa:	51 e4       	ldi	r21, 0x41	; 65
    29fc:	0e 94 47 19 	call	0x328e	; 0x328e <__mulsf3>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	bc 01       	movw	r22, r24
    2a06:	cd 01       	movw	r24, r26
    2a08:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__fixunssfsi>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	9e 83       	std	Y+6, r25	; 0x06
    2a12:	8d 83       	std	Y+5, r24	; 0x05
    2a14:	0f c0       	rjmp	.+30     	; 0x2a34 <LED_snore+0xe6>
    2a16:	89 e1       	ldi	r24, 0x19	; 25
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	9c 83       	std	Y+4, r25	; 0x04
    2a1c:	8b 83       	std	Y+3, r24	; 0x03
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	9c 81       	ldd	r25, Y+4	; 0x04
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	f1 f7       	brne	.-4      	; 0x2a22 <LED_snore+0xd4>
    2a26:	9c 83       	std	Y+4, r25	; 0x04
    2a28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	9e 83       	std	Y+6, r25	; 0x06
    2a32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	9e 81       	ldd	r25, Y+6	; 0x06
    2a38:	00 97       	sbiw	r24, 0x00	; 0
    2a3a:	69 f7       	brne	.-38     	; 0x2a16 <LED_snore+0xc8>
    2a3c:	14 c0       	rjmp	.+40     	; 0x2a66 <LED_snore+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a40:	78 85       	ldd	r23, Y+8	; 0x08
    2a42:	89 85       	ldd	r24, Y+9	; 0x09
    2a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a46:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__fixunssfsi>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	9e 83       	std	Y+6, r25	; 0x06
    2a50:	8d 83       	std	Y+5, r24	; 0x05
    2a52:	8d 81       	ldd	r24, Y+5	; 0x05
    2a54:	9e 81       	ldd	r25, Y+6	; 0x06
    2a56:	9a 83       	std	Y+2, r25	; 0x02
    2a58:	89 83       	std	Y+1, r24	; 0x01
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	f1 f7       	brne	.-4      	; 0x2a5e <LED_snore+0x110>
    2a62:	9a 83       	std	Y+2, r25	; 0x02
    2a64:	89 83       	std	Y+1, r24	; 0x01

_delay_ms(1000);;//3秒 
PORTB|=(1<<LED_SNORE); //熄灭LED
    2a66:	a8 e3       	ldi	r26, 0x38	; 56
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	e8 e3       	ldi	r30, 0x38	; 56
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	81 60       	ori	r24, 0x01	; 1
    2a72:	8c 93       	st	X, r24
enable_adc();
    2a74:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <enable_adc>
如果输入缓冲器是使能的，此时输入不能悬空，信号电平也不应该接近VCC/2，否则输入缓冲器会消耗额外的电流。
 */
 
 
 
 } 
    2a78:	2e 96       	adiw	r28, 0x0e	; 14
    2a7a:	0f b6       	in	r0, 0x3f	; 63
    2a7c:	f8 94       	cli
    2a7e:	de bf       	out	0x3e, r29	; 62
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	cd bf       	out	0x3d, r28	; 61
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	08 95       	ret

00002a8a <LED_all_right>:
 
void  LED_all_right(void)//PB1 low light
 {
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	2e 97       	sbiw	r28, 0x0e	; 14
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	f8 94       	cli
    2a98:	de bf       	out	0x3e, r29	; 62
    2a9a:	0f be       	out	0x3f, r0	; 63
    2a9c:	cd bf       	out	0x3d, r28	; 61
 
DDRB|= 0x02;//PB1 方向输出
    2a9e:	a7 e3       	ldi	r26, 0x37	; 55
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	e7 e3       	ldi	r30, 0x37	; 55
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	82 60       	ori	r24, 0x02	; 2
    2aaa:	8c 93       	st	X, r24
 
PORTB&=~(1<<LED_TESTOK); //点亮LED
    2aac:	a8 e3       	ldi	r26, 0x38	; 56
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	e8 e3       	ldi	r30, 0x38	; 56
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	80 81       	ld	r24, Z
    2ab6:	8d 7f       	andi	r24, 0xFD	; 253
    2ab8:	8c 93       	st	X, r24
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	aa e7       	ldi	r26, 0x7A	; 122
    2ac0:	b4 e4       	ldi	r27, 0x44	; 68
    2ac2:	8b 87       	std	Y+11, r24	; 0x0b
    2ac4:	9c 87       	std	Y+12, r25	; 0x0c
    2ac6:	ad 87       	std	Y+13, r26	; 0x0d
    2ac8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2acc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ace:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	4a e7       	ldi	r20, 0x7A	; 122
    2ad8:	53 e4       	ldi	r21, 0x43	; 67
    2ada:	0e 94 47 19 	call	0x328e	; 0x328e <__mulsf3>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	8f 83       	std	Y+7, r24	; 0x07
    2ae4:	98 87       	std	Y+8, r25	; 0x08
    2ae6:	a9 87       	std	Y+9, r26	; 0x09
    2ae8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aea:	6f 81       	ldd	r22, Y+7	; 0x07
    2aec:	78 85       	ldd	r23, Y+8	; 0x08
    2aee:	89 85       	ldd	r24, Y+9	; 0x09
    2af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	40 e8       	ldi	r20, 0x80	; 128
    2af8:	5f e3       	ldi	r21, 0x3F	; 63
    2afa:	0e 94 4d 1b 	call	0x369a	; 0x369a <__ltsf2>
    2afe:	88 23       	and	r24, r24
    2b00:	2c f4       	brge	.+10     	; 0x2b0c <LED_all_right+0x82>
		__ticks = 1;
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	9e 83       	std	Y+6, r25	; 0x06
    2b08:	8d 83       	std	Y+5, r24	; 0x05
    2b0a:	3f c0       	rjmp	.+126    	; 0x2b8a <LED_all_right+0x100>
	else if (__tmp > 65535)
    2b0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b0e:	78 85       	ldd	r23, Y+8	; 0x08
    2b10:	89 85       	ldd	r24, Y+9	; 0x09
    2b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	3f ef       	ldi	r19, 0xFF	; 255
    2b18:	4f e7       	ldi	r20, 0x7F	; 127
    2b1a:	57 e4       	ldi	r21, 0x47	; 71
    2b1c:	0e 94 ed 1a 	call	0x35da	; 0x35da <__gtsf2>
    2b20:	18 16       	cp	r1, r24
    2b22:	4c f5       	brge	.+82     	; 0x2b76 <LED_all_right+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	40 e2       	ldi	r20, 0x20	; 32
    2b32:	51 e4       	ldi	r21, 0x41	; 65
    2b34:	0e 94 47 19 	call	0x328e	; 0x328e <__mulsf3>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__fixunssfsi>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	9e 83       	std	Y+6, r25	; 0x06
    2b4a:	8d 83       	std	Y+5, r24	; 0x05
    2b4c:	0f c0       	rjmp	.+30     	; 0x2b6c <LED_all_right+0xe2>
    2b4e:	89 e1       	ldi	r24, 0x19	; 25
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	9c 83       	std	Y+4, r25	; 0x04
    2b54:	8b 83       	std	Y+3, r24	; 0x03
    2b56:	8b 81       	ldd	r24, Y+3	; 0x03
    2b58:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	f1 f7       	brne	.-4      	; 0x2b5a <LED_all_right+0xd0>
    2b5e:	9c 83       	std	Y+4, r25	; 0x04
    2b60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b62:	8d 81       	ldd	r24, Y+5	; 0x05
    2b64:	9e 81       	ldd	r25, Y+6	; 0x06
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	9e 83       	std	Y+6, r25	; 0x06
    2b6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b70:	00 97       	sbiw	r24, 0x00	; 0
    2b72:	69 f7       	brne	.-38     	; 0x2b4e <LED_all_right+0xc4>
    2b74:	14 c0       	rjmp	.+40     	; 0x2b9e <LED_all_right+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b76:	6f 81       	ldd	r22, Y+7	; 0x07
    2b78:	78 85       	ldd	r23, Y+8	; 0x08
    2b7a:	89 85       	ldd	r24, Y+9	; 0x09
    2b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7e:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__fixunssfsi>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	9e 83       	std	Y+6, r25	; 0x06
    2b88:	8d 83       	std	Y+5, r24	; 0x05
    2b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8e:	9a 83       	std	Y+2, r25	; 0x02
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	9a 81       	ldd	r25, Y+2	; 0x02
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	f1 f7       	brne	.-4      	; 0x2b96 <LED_all_right+0x10c>
    2b9a:	9a 83       	std	Y+2, r25	; 0x02
    2b9c:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1000);;//3秒
PORTB|=(1<<LED_TESTOK); //熄灭LED
    2b9e:	a8 e3       	ldi	r26, 0x38	; 56
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	e8 e3       	ldi	r30, 0x38	; 56
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	82 60       	ori	r24, 0x02	; 2
    2baa:	8c 93       	st	X, r24

 }
    2bac:	2e 96       	adiw	r28, 0x0e	; 14
    2bae:	0f b6       	in	r0, 0x3f	; 63
    2bb0:	f8 94       	cli
    2bb2:	de bf       	out	0x3e, r29	; 62
    2bb4:	0f be       	out	0x3f, r0	; 63
    2bb6:	cd bf       	out	0x3d, r28	; 61
    2bb8:	cf 91       	pop	r28
    2bba:	df 91       	pop	r29
    2bbc:	08 95       	ret

00002bbe <power_on>:
 
  
void  power_on(void)//PB3 low light
 {
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
 
DDRB|= 0x08;//PB3 方向输出
    2bc6:	a7 e3       	ldi	r26, 0x37	; 55
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	e7 e3       	ldi	r30, 0x37	; 55
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	80 81       	ld	r24, Z
    2bd0:	88 60       	ori	r24, 0x08	; 8
    2bd2:	8c 93       	st	X, r24
 
PORTB&=~(1<<POWER_ON); //点亮LED
    2bd4:	a8 e3       	ldi	r26, 0x38	; 56
    2bd6:	b0 e0       	ldi	r27, 0x00	; 0
    2bd8:	e8 e3       	ldi	r30, 0x38	; 56
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	87 7f       	andi	r24, 0xF7	; 247
    2be0:	8c 93       	st	X, r24


 }
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <power_off>:
 
 void  power_off(void)//PB1 low light
 {
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	2e 97       	sbiw	r28, 0x0e	; 14
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
 
DDRB|= 0x08;//PB3 方向输出
    2bfc:	a7 e3       	ldi	r26, 0x37	; 55
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	e7 e3       	ldi	r30, 0x37	; 55
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	88 60       	ori	r24, 0x08	; 8
    2c08:	8c 93       	st	X, r24
 
PORTB|=(1<<POWER_ON); //关闭mos
    2c0a:	a8 e3       	ldi	r26, 0x38	; 56
    2c0c:	b0 e0       	ldi	r27, 0x00	; 0
    2c0e:	e8 e3       	ldi	r30, 0x38	; 56
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	80 81       	ld	r24, Z
    2c14:	88 60       	ori	r24, 0x08	; 8
    2c16:	8c 93       	st	X, r24
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	a8 ec       	ldi	r26, 0xC8	; 200
    2c1e:	b2 e4       	ldi	r27, 0x42	; 66
    2c20:	8b 87       	std	Y+11, r24	; 0x0b
    2c22:	9c 87       	std	Y+12, r25	; 0x0c
    2c24:	ad 87       	std	Y+13, r26	; 0x0d
    2c26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	4a e7       	ldi	r20, 0x7A	; 122
    2c36:	53 e4       	ldi	r21, 0x43	; 67
    2c38:	0e 94 47 19 	call	0x328e	; 0x328e <__mulsf3>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	8f 83       	std	Y+7, r24	; 0x07
    2c42:	98 87       	std	Y+8, r25	; 0x08
    2c44:	a9 87       	std	Y+9, r26	; 0x09
    2c46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c48:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4a:	78 85       	ldd	r23, Y+8	; 0x08
    2c4c:	89 85       	ldd	r24, Y+9	; 0x09
    2c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	40 e8       	ldi	r20, 0x80	; 128
    2c56:	5f e3       	ldi	r21, 0x3F	; 63
    2c58:	0e 94 4d 1b 	call	0x369a	; 0x369a <__ltsf2>
    2c5c:	88 23       	and	r24, r24
    2c5e:	2c f4       	brge	.+10     	; 0x2c6a <power_off+0x82>
		__ticks = 1;
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	9e 83       	std	Y+6, r25	; 0x06
    2c66:	8d 83       	std	Y+5, r24	; 0x05
    2c68:	3f c0       	rjmp	.+126    	; 0x2ce8 <power_off+0x100>
	else if (__tmp > 65535)
    2c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6c:	78 85       	ldd	r23, Y+8	; 0x08
    2c6e:	89 85       	ldd	r24, Y+9	; 0x09
    2c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	3f ef       	ldi	r19, 0xFF	; 255
    2c76:	4f e7       	ldi	r20, 0x7F	; 127
    2c78:	57 e4       	ldi	r21, 0x47	; 71
    2c7a:	0e 94 ed 1a 	call	0x35da	; 0x35da <__gtsf2>
    2c7e:	18 16       	cp	r1, r24
    2c80:	4c f5       	brge	.+82     	; 0x2cd4 <power_off+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	40 e2       	ldi	r20, 0x20	; 32
    2c90:	51 e4       	ldi	r21, 0x41	; 65
    2c92:	0e 94 47 19 	call	0x328e	; 0x328e <__mulsf3>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	bc 01       	movw	r22, r24
    2c9c:	cd 01       	movw	r24, r26
    2c9e:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__fixunssfsi>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	9e 83       	std	Y+6, r25	; 0x06
    2ca8:	8d 83       	std	Y+5, r24	; 0x05
    2caa:	0f c0       	rjmp	.+30     	; 0x2cca <power_off+0xe2>
    2cac:	89 e1       	ldi	r24, 0x19	; 25
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	9c 83       	std	Y+4, r25	; 0x04
    2cb2:	8b 83       	std	Y+3, r24	; 0x03
    2cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb8:	01 97       	sbiw	r24, 0x01	; 1
    2cba:	f1 f7       	brne	.-4      	; 0x2cb8 <power_off+0xd0>
    2cbc:	9c 83       	std	Y+4, r25	; 0x04
    2cbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	9e 83       	std	Y+6, r25	; 0x06
    2cc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cce:	00 97       	sbiw	r24, 0x00	; 0
    2cd0:	69 f7       	brne	.-38     	; 0x2cac <power_off+0xc4>
    2cd2:	14 c0       	rjmp	.+40     	; 0x2cfc <power_off+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd6:	78 85       	ldd	r23, Y+8	; 0x08
    2cd8:	89 85       	ldd	r24, Y+9	; 0x09
    2cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cdc:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__fixunssfsi>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	9e 83       	std	Y+6, r25	; 0x06
    2ce6:	8d 83       	std	Y+5, r24	; 0x05
    2ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cea:	9e 81       	ldd	r25, Y+6	; 0x06
    2cec:	9a 83       	std	Y+2, r25	; 0x02
    2cee:	89 83       	std	Y+1, r24	; 0x01
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	f1 f7       	brne	.-4      	; 0x2cf4 <power_off+0x10c>
    2cf8:	9a 83       	std	Y+2, r25	; 0x02
    2cfa:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(100);;//3秒

DDRB&= ~(1<<POWER_ON);// 悬空
    2cfc:	a7 e3       	ldi	r26, 0x37	; 55
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	e7 e3       	ldi	r30, 0x37	; 55
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	87 7f       	andi	r24, 0xF7	; 247
    2d08:	8c 93       	st	X, r24
PORTB&= ~(1<<POWER_ON);// 悬空
    2d0a:	a8 e3       	ldi	r26, 0x38	; 56
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	e8 e3       	ldi	r30, 0x38	; 56
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	87 7f       	andi	r24, 0xF7	; 247
    2d16:	8c 93       	st	X, r24
/**/
 }
    2d18:	2e 96       	adiw	r28, 0x0e	; 14
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	cd bf       	out	0x3d, r28	; 61
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	08 95       	ret

00002d2a <__vector_3>:
    2d2a:	1f 92       	push	r1
    2d2c:	0f 92       	push	r0
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	0f 92       	push	r0
    2d32:	11 24       	eor	r1, r1
    2d34:	2f 93       	push	r18
    2d36:	3f 93       	push	r19
    2d38:	4f 93       	push	r20
    2d3a:	5f 93       	push	r21
    2d3c:	6f 93       	push	r22
    2d3e:	7f 93       	push	r23
    2d40:	8f 93       	push	r24
    2d42:	9f 93       	push	r25
    2d44:	af 93       	push	r26
    2d46:	bf 93       	push	r27
    2d48:	ef 93       	push	r30
    2d4a:	ff 93       	push	r31
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	0e 94 a7 14 	call	0x294e	; 0x294e <LED_snore>
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	ff 91       	pop	r31
    2d5e:	ef 91       	pop	r30
    2d60:	bf 91       	pop	r27
    2d62:	af 91       	pop	r26
    2d64:	9f 91       	pop	r25
    2d66:	8f 91       	pop	r24
    2d68:	7f 91       	pop	r23
    2d6a:	6f 91       	pop	r22
    2d6c:	5f 91       	pop	r21
    2d6e:	4f 91       	pop	r20
    2d70:	3f 91       	pop	r19
    2d72:	2f 91       	pop	r18
    2d74:	0f 90       	pop	r0
    2d76:	0f be       	out	0x3f, r0	; 63
    2d78:	0f 90       	pop	r0
    2d7a:	1f 90       	pop	r1
    2d7c:	18 95       	reti

00002d7e <__vector_2>:
    2d7e:	1f 92       	push	r1
    2d80:	0f 92       	push	r0
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	0f 92       	push	r0
    2d86:	11 24       	eor	r1, r1
    2d88:	2f 93       	push	r18
    2d8a:	3f 93       	push	r19
    2d8c:	4f 93       	push	r20
    2d8e:	5f 93       	push	r21
    2d90:	6f 93       	push	r22
    2d92:	7f 93       	push	r23
    2d94:	8f 93       	push	r24
    2d96:	9f 93       	push	r25
    2d98:	af 93       	push	r26
    2d9a:	bf 93       	push	r27
    2d9c:	ef 93       	push	r30
    2d9e:	ff 93       	push	r31
    2da0:	df 93       	push	r29
    2da2:	cf 93       	push	r28
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62
    2da8:	0e 94 a7 14 	call	0x294e	; 0x294e <LED_snore>
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	ff 91       	pop	r31
    2db2:	ef 91       	pop	r30
    2db4:	bf 91       	pop	r27
    2db6:	af 91       	pop	r26
    2db8:	9f 91       	pop	r25
    2dba:	8f 91       	pop	r24
    2dbc:	7f 91       	pop	r23
    2dbe:	6f 91       	pop	r22
    2dc0:	5f 91       	pop	r21
    2dc2:	4f 91       	pop	r20
    2dc4:	3f 91       	pop	r19
    2dc6:	2f 91       	pop	r18
    2dc8:	0f 90       	pop	r0
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	0f 90       	pop	r0
    2dce:	1f 90       	pop	r1
    2dd0:	18 95       	reti

00002dd2 <__vector_1>:
    2dd2:	1f 92       	push	r1
    2dd4:	0f 92       	push	r0
    2dd6:	0f b6       	in	r0, 0x3f	; 63
    2dd8:	0f 92       	push	r0
    2dda:	11 24       	eor	r1, r1
    2ddc:	2f 93       	push	r18
    2dde:	3f 93       	push	r19
    2de0:	4f 93       	push	r20
    2de2:	5f 93       	push	r21
    2de4:	6f 93       	push	r22
    2de6:	7f 93       	push	r23
    2de8:	8f 93       	push	r24
    2dea:	9f 93       	push	r25
    2dec:	af 93       	push	r26
    2dee:	bf 93       	push	r27
    2df0:	ef 93       	push	r30
    2df2:	ff 93       	push	r31
    2df4:	df 93       	push	r29
    2df6:	cf 93       	push	r28
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    2dfc:	0e 94 a7 14 	call	0x294e	; 0x294e <LED_snore>
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	ff 91       	pop	r31
    2e06:	ef 91       	pop	r30
    2e08:	bf 91       	pop	r27
    2e0a:	af 91       	pop	r26
    2e0c:	9f 91       	pop	r25
    2e0e:	8f 91       	pop	r24
    2e10:	7f 91       	pop	r23
    2e12:	6f 91       	pop	r22
    2e14:	5f 91       	pop	r21
    2e16:	4f 91       	pop	r20
    2e18:	3f 91       	pop	r19
    2e1a:	2f 91       	pop	r18
    2e1c:	0f 90       	pop	r0
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	0f 90       	pop	r0
    2e22:	1f 90       	pop	r1
    2e24:	18 95       	reti

00002e26 <initial_int2>:
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
    2e2e:	a7 e3       	ldi	r26, 0x37	; 55
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	e7 e3       	ldi	r30, 0x37	; 55
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	8b 7f       	andi	r24, 0xFB	; 251
    2e3a:	8c 93       	st	X, r24
    2e3c:	a8 e3       	ldi	r26, 0x38	; 56
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	e8 e3       	ldi	r30, 0x38	; 56
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	8b 7f       	andi	r24, 0xFB	; 251
    2e48:	8c 93       	st	X, r24
    2e4a:	aa e5       	ldi	r26, 0x5A	; 90
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	ea e5       	ldi	r30, 0x5A	; 90
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	80 62       	ori	r24, 0x20	; 32
    2e56:	8c 93       	st	X, r24
    2e58:	ab e5       	ldi	r26, 0x5B	; 91
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	eb e5       	ldi	r30, 0x5B	; 91
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	8f 7d       	andi	r24, 0xDF	; 223
    2e64:	8c 93       	st	X, r24
    2e66:	e4 e5       	ldi	r30, 0x54	; 84
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	80 e4       	ldi	r24, 0x40	; 64
    2e6c:	80 83       	st	Z, r24
    2e6e:	ab e5       	ldi	r26, 0x5B	; 91
    2e70:	b0 e0       	ldi	r27, 0x00	; 0
    2e72:	eb e5       	ldi	r30, 0x5B	; 91
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 81       	ld	r24, Z
    2e78:	80 62       	ori	r24, 0x20	; 32
    2e7a:	8c 93       	st	X, r24
    2e7c:	cf 91       	pop	r28
    2e7e:	df 91       	pop	r29
    2e80:	08 95       	ret

00002e82 <dis_int2>:
    2e82:	df 93       	push	r29
    2e84:	cf 93       	push	r28
    2e86:	cd b7       	in	r28, 0x3d	; 61
    2e88:	de b7       	in	r29, 0x3e	; 62
    2e8a:	aa e5       	ldi	r26, 0x5A	; 90
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	ea e5       	ldi	r30, 0x5A	; 90
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	80 62       	ori	r24, 0x20	; 32
    2e96:	8c 93       	st	X, r24
    2e98:	ab e5       	ldi	r26, 0x5B	; 91
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	eb e5       	ldi	r30, 0x5B	; 91
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	8f 7d       	andi	r24, 0xDF	; 223
    2ea4:	8c 93       	st	X, r24
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	08 95       	ret

00002eac <enter_sleep>:
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	00 d0       	rcall	.+0      	; 0x2eb2 <enter_sleep+0x6>
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
    2eb6:	78 94       	sei
    2eb8:	a5 e5       	ldi	r26, 0x55	; 85
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	e5 e5       	ldi	r30, 0x55	; 85
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	8f 78       	andi	r24, 0x8F	; 143
    2ec4:	80 62       	ori	r24, 0x20	; 32
    2ec6:	8c 93       	st	X, r24
    2ec8:	88 95       	sleep
    2eca:	a5 e5       	ldi	r26, 0x55	; 85
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	e5 e5       	ldi	r30, 0x55	; 85
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	8f 77       	andi	r24, 0x7F	; 127
    2ed6:	8c 93       	st	X, r24
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	08 95       	ret

00002ee2 <__fixunssfsi>:
    2ee2:	ef 92       	push	r14
    2ee4:	ff 92       	push	r15
    2ee6:	0f 93       	push	r16
    2ee8:	1f 93       	push	r17
    2eea:	7b 01       	movw	r14, r22
    2eec:	8c 01       	movw	r16, r24
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e0       	ldi	r20, 0x00	; 0
    2ef4:	5f e4       	ldi	r21, 0x4F	; 79
    2ef6:	0e 94 1d 1b 	call	0x363a	; 0x363a <__gesf2>
    2efa:	88 23       	and	r24, r24
    2efc:	8c f0       	brlt	.+34     	; 0x2f20 <__fixunssfsi+0x3e>
    2efe:	c8 01       	movw	r24, r16
    2f00:	b7 01       	movw	r22, r14
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	40 e0       	ldi	r20, 0x00	; 0
    2f08:	5f e4       	ldi	r21, 0x4F	; 79
    2f0a:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__subsf3>
    2f0e:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <__fixsfsi>
    2f12:	9b 01       	movw	r18, r22
    2f14:	ac 01       	movw	r20, r24
    2f16:	20 50       	subi	r18, 0x00	; 0
    2f18:	30 40       	sbci	r19, 0x00	; 0
    2f1a:	40 40       	sbci	r20, 0x00	; 0
    2f1c:	50 48       	sbci	r21, 0x80	; 128
    2f1e:	06 c0       	rjmp	.+12     	; 0x2f2c <__fixunssfsi+0x4a>
    2f20:	c8 01       	movw	r24, r16
    2f22:	b7 01       	movw	r22, r14
    2f24:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <__fixsfsi>
    2f28:	9b 01       	movw	r18, r22
    2f2a:	ac 01       	movw	r20, r24
    2f2c:	b9 01       	movw	r22, r18
    2f2e:	ca 01       	movw	r24, r20
    2f30:	1f 91       	pop	r17
    2f32:	0f 91       	pop	r16
    2f34:	ff 90       	pop	r15
    2f36:	ef 90       	pop	r14
    2f38:	08 95       	ret

00002f3a <_fpadd_parts>:
    2f3a:	a0 e0       	ldi	r26, 0x00	; 0
    2f3c:	b0 e0       	ldi	r27, 0x00	; 0
    2f3e:	e3 ea       	ldi	r30, 0xA3	; 163
    2f40:	f7 e1       	ldi	r31, 0x17	; 23
    2f42:	0c 94 a3 1e 	jmp	0x3d46	; 0x3d46 <__prologue_saves__>
    2f46:	dc 01       	movw	r26, r24
    2f48:	2b 01       	movw	r4, r22
    2f4a:	fa 01       	movw	r30, r20
    2f4c:	9c 91       	ld	r25, X
    2f4e:	92 30       	cpi	r25, 0x02	; 2
    2f50:	08 f4       	brcc	.+2      	; 0x2f54 <_fpadd_parts+0x1a>
    2f52:	39 c1       	rjmp	.+626    	; 0x31c6 <_fpadd_parts+0x28c>
    2f54:	eb 01       	movw	r28, r22
    2f56:	88 81       	ld	r24, Y
    2f58:	82 30       	cpi	r24, 0x02	; 2
    2f5a:	08 f4       	brcc	.+2      	; 0x2f5e <_fpadd_parts+0x24>
    2f5c:	33 c1       	rjmp	.+614    	; 0x31c4 <_fpadd_parts+0x28a>
    2f5e:	94 30       	cpi	r25, 0x04	; 4
    2f60:	69 f4       	brne	.+26     	; 0x2f7c <_fpadd_parts+0x42>
    2f62:	84 30       	cpi	r24, 0x04	; 4
    2f64:	09 f0       	breq	.+2      	; 0x2f68 <_fpadd_parts+0x2e>
    2f66:	2f c1       	rjmp	.+606    	; 0x31c6 <_fpadd_parts+0x28c>
    2f68:	11 96       	adiw	r26, 0x01	; 1
    2f6a:	9c 91       	ld	r25, X
    2f6c:	11 97       	sbiw	r26, 0x01	; 1
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	98 17       	cp	r25, r24
    2f72:	09 f4       	brne	.+2      	; 0x2f76 <_fpadd_parts+0x3c>
    2f74:	28 c1       	rjmp	.+592    	; 0x31c6 <_fpadd_parts+0x28c>
    2f76:	a2 e8       	ldi	r26, 0x82	; 130
    2f78:	b0 e0       	ldi	r27, 0x00	; 0
    2f7a:	25 c1       	rjmp	.+586    	; 0x31c6 <_fpadd_parts+0x28c>
    2f7c:	84 30       	cpi	r24, 0x04	; 4
    2f7e:	09 f4       	brne	.+2      	; 0x2f82 <_fpadd_parts+0x48>
    2f80:	21 c1       	rjmp	.+578    	; 0x31c4 <_fpadd_parts+0x28a>
    2f82:	82 30       	cpi	r24, 0x02	; 2
    2f84:	a9 f4       	brne	.+42     	; 0x2fb0 <_fpadd_parts+0x76>
    2f86:	92 30       	cpi	r25, 0x02	; 2
    2f88:	09 f0       	breq	.+2      	; 0x2f8c <_fpadd_parts+0x52>
    2f8a:	1d c1       	rjmp	.+570    	; 0x31c6 <_fpadd_parts+0x28c>
    2f8c:	9a 01       	movw	r18, r20
    2f8e:	ad 01       	movw	r20, r26
    2f90:	88 e0       	ldi	r24, 0x08	; 8
    2f92:	ea 01       	movw	r28, r20
    2f94:	09 90       	ld	r0, Y+
    2f96:	ae 01       	movw	r20, r28
    2f98:	e9 01       	movw	r28, r18
    2f9a:	09 92       	st	Y+, r0
    2f9c:	9e 01       	movw	r18, r28
    2f9e:	81 50       	subi	r24, 0x01	; 1
    2fa0:	c1 f7       	brne	.-16     	; 0x2f92 <_fpadd_parts+0x58>
    2fa2:	e2 01       	movw	r28, r4
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	11 96       	adiw	r26, 0x01	; 1
    2fa8:	9c 91       	ld	r25, X
    2faa:	89 23       	and	r24, r25
    2fac:	81 83       	std	Z+1, r24	; 0x01
    2fae:	08 c1       	rjmp	.+528    	; 0x31c0 <_fpadd_parts+0x286>
    2fb0:	92 30       	cpi	r25, 0x02	; 2
    2fb2:	09 f4       	brne	.+2      	; 0x2fb6 <_fpadd_parts+0x7c>
    2fb4:	07 c1       	rjmp	.+526    	; 0x31c4 <_fpadd_parts+0x28a>
    2fb6:	12 96       	adiw	r26, 0x02	; 2
    2fb8:	2d 90       	ld	r2, X+
    2fba:	3c 90       	ld	r3, X
    2fbc:	13 97       	sbiw	r26, 0x03	; 3
    2fbe:	eb 01       	movw	r28, r22
    2fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc4:	14 96       	adiw	r26, 0x04	; 4
    2fc6:	ad 90       	ld	r10, X+
    2fc8:	bd 90       	ld	r11, X+
    2fca:	cd 90       	ld	r12, X+
    2fcc:	dc 90       	ld	r13, X
    2fce:	17 97       	sbiw	r26, 0x07	; 7
    2fd0:	ec 80       	ldd	r14, Y+4	; 0x04
    2fd2:	fd 80       	ldd	r15, Y+5	; 0x05
    2fd4:	0e 81       	ldd	r16, Y+6	; 0x06
    2fd6:	1f 81       	ldd	r17, Y+7	; 0x07
    2fd8:	91 01       	movw	r18, r2
    2fda:	28 1b       	sub	r18, r24
    2fdc:	39 0b       	sbc	r19, r25
    2fde:	b9 01       	movw	r22, r18
    2fe0:	37 ff       	sbrs	r19, 7
    2fe2:	04 c0       	rjmp	.+8      	; 0x2fec <_fpadd_parts+0xb2>
    2fe4:	66 27       	eor	r22, r22
    2fe6:	77 27       	eor	r23, r23
    2fe8:	62 1b       	sub	r22, r18
    2fea:	73 0b       	sbc	r23, r19
    2fec:	60 32       	cpi	r22, 0x20	; 32
    2fee:	71 05       	cpc	r23, r1
    2ff0:	0c f0       	brlt	.+2      	; 0x2ff4 <_fpadd_parts+0xba>
    2ff2:	61 c0       	rjmp	.+194    	; 0x30b6 <_fpadd_parts+0x17c>
    2ff4:	12 16       	cp	r1, r18
    2ff6:	13 06       	cpc	r1, r19
    2ff8:	6c f5       	brge	.+90     	; 0x3054 <_fpadd_parts+0x11a>
    2ffa:	37 01       	movw	r6, r14
    2ffc:	48 01       	movw	r8, r16
    2ffe:	06 2e       	mov	r0, r22
    3000:	04 c0       	rjmp	.+8      	; 0x300a <_fpadd_parts+0xd0>
    3002:	96 94       	lsr	r9
    3004:	87 94       	ror	r8
    3006:	77 94       	ror	r7
    3008:	67 94       	ror	r6
    300a:	0a 94       	dec	r0
    300c:	d2 f7       	brpl	.-12     	; 0x3002 <_fpadd_parts+0xc8>
    300e:	21 e0       	ldi	r18, 0x01	; 1
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	40 e0       	ldi	r20, 0x00	; 0
    3014:	50 e0       	ldi	r21, 0x00	; 0
    3016:	04 c0       	rjmp	.+8      	; 0x3020 <_fpadd_parts+0xe6>
    3018:	22 0f       	add	r18, r18
    301a:	33 1f       	adc	r19, r19
    301c:	44 1f       	adc	r20, r20
    301e:	55 1f       	adc	r21, r21
    3020:	6a 95       	dec	r22
    3022:	d2 f7       	brpl	.-12     	; 0x3018 <_fpadd_parts+0xde>
    3024:	21 50       	subi	r18, 0x01	; 1
    3026:	30 40       	sbci	r19, 0x00	; 0
    3028:	40 40       	sbci	r20, 0x00	; 0
    302a:	50 40       	sbci	r21, 0x00	; 0
    302c:	2e 21       	and	r18, r14
    302e:	3f 21       	and	r19, r15
    3030:	40 23       	and	r20, r16
    3032:	51 23       	and	r21, r17
    3034:	21 15       	cp	r18, r1
    3036:	31 05       	cpc	r19, r1
    3038:	41 05       	cpc	r20, r1
    303a:	51 05       	cpc	r21, r1
    303c:	21 f0       	breq	.+8      	; 0x3046 <_fpadd_parts+0x10c>
    303e:	21 e0       	ldi	r18, 0x01	; 1
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	40 e0       	ldi	r20, 0x00	; 0
    3044:	50 e0       	ldi	r21, 0x00	; 0
    3046:	79 01       	movw	r14, r18
    3048:	8a 01       	movw	r16, r20
    304a:	e6 28       	or	r14, r6
    304c:	f7 28       	or	r15, r7
    304e:	08 29       	or	r16, r8
    3050:	19 29       	or	r17, r9
    3052:	3c c0       	rjmp	.+120    	; 0x30cc <_fpadd_parts+0x192>
    3054:	23 2b       	or	r18, r19
    3056:	d1 f1       	breq	.+116    	; 0x30cc <_fpadd_parts+0x192>
    3058:	26 0e       	add	r2, r22
    305a:	37 1e       	adc	r3, r23
    305c:	35 01       	movw	r6, r10
    305e:	46 01       	movw	r8, r12
    3060:	06 2e       	mov	r0, r22
    3062:	04 c0       	rjmp	.+8      	; 0x306c <_fpadd_parts+0x132>
    3064:	96 94       	lsr	r9
    3066:	87 94       	ror	r8
    3068:	77 94       	ror	r7
    306a:	67 94       	ror	r6
    306c:	0a 94       	dec	r0
    306e:	d2 f7       	brpl	.-12     	; 0x3064 <_fpadd_parts+0x12a>
    3070:	21 e0       	ldi	r18, 0x01	; 1
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e0       	ldi	r20, 0x00	; 0
    3076:	50 e0       	ldi	r21, 0x00	; 0
    3078:	04 c0       	rjmp	.+8      	; 0x3082 <_fpadd_parts+0x148>
    307a:	22 0f       	add	r18, r18
    307c:	33 1f       	adc	r19, r19
    307e:	44 1f       	adc	r20, r20
    3080:	55 1f       	adc	r21, r21
    3082:	6a 95       	dec	r22
    3084:	d2 f7       	brpl	.-12     	; 0x307a <_fpadd_parts+0x140>
    3086:	21 50       	subi	r18, 0x01	; 1
    3088:	30 40       	sbci	r19, 0x00	; 0
    308a:	40 40       	sbci	r20, 0x00	; 0
    308c:	50 40       	sbci	r21, 0x00	; 0
    308e:	2a 21       	and	r18, r10
    3090:	3b 21       	and	r19, r11
    3092:	4c 21       	and	r20, r12
    3094:	5d 21       	and	r21, r13
    3096:	21 15       	cp	r18, r1
    3098:	31 05       	cpc	r19, r1
    309a:	41 05       	cpc	r20, r1
    309c:	51 05       	cpc	r21, r1
    309e:	21 f0       	breq	.+8      	; 0x30a8 <_fpadd_parts+0x16e>
    30a0:	21 e0       	ldi	r18, 0x01	; 1
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e0       	ldi	r20, 0x00	; 0
    30a6:	50 e0       	ldi	r21, 0x00	; 0
    30a8:	59 01       	movw	r10, r18
    30aa:	6a 01       	movw	r12, r20
    30ac:	a6 28       	or	r10, r6
    30ae:	b7 28       	or	r11, r7
    30b0:	c8 28       	or	r12, r8
    30b2:	d9 28       	or	r13, r9
    30b4:	0b c0       	rjmp	.+22     	; 0x30cc <_fpadd_parts+0x192>
    30b6:	82 15       	cp	r24, r2
    30b8:	93 05       	cpc	r25, r3
    30ba:	2c f0       	brlt	.+10     	; 0x30c6 <_fpadd_parts+0x18c>
    30bc:	1c 01       	movw	r2, r24
    30be:	aa 24       	eor	r10, r10
    30c0:	bb 24       	eor	r11, r11
    30c2:	65 01       	movw	r12, r10
    30c4:	03 c0       	rjmp	.+6      	; 0x30cc <_fpadd_parts+0x192>
    30c6:	ee 24       	eor	r14, r14
    30c8:	ff 24       	eor	r15, r15
    30ca:	87 01       	movw	r16, r14
    30cc:	11 96       	adiw	r26, 0x01	; 1
    30ce:	9c 91       	ld	r25, X
    30d0:	d2 01       	movw	r26, r4
    30d2:	11 96       	adiw	r26, 0x01	; 1
    30d4:	8c 91       	ld	r24, X
    30d6:	98 17       	cp	r25, r24
    30d8:	09 f4       	brne	.+2      	; 0x30dc <_fpadd_parts+0x1a2>
    30da:	45 c0       	rjmp	.+138    	; 0x3166 <_fpadd_parts+0x22c>
    30dc:	99 23       	and	r25, r25
    30de:	39 f0       	breq	.+14     	; 0x30ee <_fpadd_parts+0x1b4>
    30e0:	a8 01       	movw	r20, r16
    30e2:	97 01       	movw	r18, r14
    30e4:	2a 19       	sub	r18, r10
    30e6:	3b 09       	sbc	r19, r11
    30e8:	4c 09       	sbc	r20, r12
    30ea:	5d 09       	sbc	r21, r13
    30ec:	06 c0       	rjmp	.+12     	; 0x30fa <_fpadd_parts+0x1c0>
    30ee:	a6 01       	movw	r20, r12
    30f0:	95 01       	movw	r18, r10
    30f2:	2e 19       	sub	r18, r14
    30f4:	3f 09       	sbc	r19, r15
    30f6:	40 0b       	sbc	r20, r16
    30f8:	51 0b       	sbc	r21, r17
    30fa:	57 fd       	sbrc	r21, 7
    30fc:	08 c0       	rjmp	.+16     	; 0x310e <_fpadd_parts+0x1d4>
    30fe:	11 82       	std	Z+1, r1	; 0x01
    3100:	33 82       	std	Z+3, r3	; 0x03
    3102:	22 82       	std	Z+2, r2	; 0x02
    3104:	24 83       	std	Z+4, r18	; 0x04
    3106:	35 83       	std	Z+5, r19	; 0x05
    3108:	46 83       	std	Z+6, r20	; 0x06
    310a:	57 83       	std	Z+7, r21	; 0x07
    310c:	1d c0       	rjmp	.+58     	; 0x3148 <_fpadd_parts+0x20e>
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	81 83       	std	Z+1, r24	; 0x01
    3112:	33 82       	std	Z+3, r3	; 0x03
    3114:	22 82       	std	Z+2, r2	; 0x02
    3116:	88 27       	eor	r24, r24
    3118:	99 27       	eor	r25, r25
    311a:	dc 01       	movw	r26, r24
    311c:	82 1b       	sub	r24, r18
    311e:	93 0b       	sbc	r25, r19
    3120:	a4 0b       	sbc	r26, r20
    3122:	b5 0b       	sbc	r27, r21
    3124:	84 83       	std	Z+4, r24	; 0x04
    3126:	95 83       	std	Z+5, r25	; 0x05
    3128:	a6 83       	std	Z+6, r26	; 0x06
    312a:	b7 83       	std	Z+7, r27	; 0x07
    312c:	0d c0       	rjmp	.+26     	; 0x3148 <_fpadd_parts+0x20e>
    312e:	22 0f       	add	r18, r18
    3130:	33 1f       	adc	r19, r19
    3132:	44 1f       	adc	r20, r20
    3134:	55 1f       	adc	r21, r21
    3136:	24 83       	std	Z+4, r18	; 0x04
    3138:	35 83       	std	Z+5, r19	; 0x05
    313a:	46 83       	std	Z+6, r20	; 0x06
    313c:	57 83       	std	Z+7, r21	; 0x07
    313e:	82 81       	ldd	r24, Z+2	; 0x02
    3140:	93 81       	ldd	r25, Z+3	; 0x03
    3142:	01 97       	sbiw	r24, 0x01	; 1
    3144:	93 83       	std	Z+3, r25	; 0x03
    3146:	82 83       	std	Z+2, r24	; 0x02
    3148:	24 81       	ldd	r18, Z+4	; 0x04
    314a:	35 81       	ldd	r19, Z+5	; 0x05
    314c:	46 81       	ldd	r20, Z+6	; 0x06
    314e:	57 81       	ldd	r21, Z+7	; 0x07
    3150:	da 01       	movw	r26, r20
    3152:	c9 01       	movw	r24, r18
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	a1 09       	sbc	r26, r1
    3158:	b1 09       	sbc	r27, r1
    315a:	8f 5f       	subi	r24, 0xFF	; 255
    315c:	9f 4f       	sbci	r25, 0xFF	; 255
    315e:	af 4f       	sbci	r26, 0xFF	; 255
    3160:	bf 43       	sbci	r27, 0x3F	; 63
    3162:	28 f3       	brcs	.-54     	; 0x312e <_fpadd_parts+0x1f4>
    3164:	0b c0       	rjmp	.+22     	; 0x317c <_fpadd_parts+0x242>
    3166:	91 83       	std	Z+1, r25	; 0x01
    3168:	33 82       	std	Z+3, r3	; 0x03
    316a:	22 82       	std	Z+2, r2	; 0x02
    316c:	ea 0c       	add	r14, r10
    316e:	fb 1c       	adc	r15, r11
    3170:	0c 1d       	adc	r16, r12
    3172:	1d 1d       	adc	r17, r13
    3174:	e4 82       	std	Z+4, r14	; 0x04
    3176:	f5 82       	std	Z+5, r15	; 0x05
    3178:	06 83       	std	Z+6, r16	; 0x06
    317a:	17 83       	std	Z+7, r17	; 0x07
    317c:	83 e0       	ldi	r24, 0x03	; 3
    317e:	80 83       	st	Z, r24
    3180:	24 81       	ldd	r18, Z+4	; 0x04
    3182:	35 81       	ldd	r19, Z+5	; 0x05
    3184:	46 81       	ldd	r20, Z+6	; 0x06
    3186:	57 81       	ldd	r21, Z+7	; 0x07
    3188:	57 ff       	sbrs	r21, 7
    318a:	1a c0       	rjmp	.+52     	; 0x31c0 <_fpadd_parts+0x286>
    318c:	c9 01       	movw	r24, r18
    318e:	aa 27       	eor	r26, r26
    3190:	97 fd       	sbrc	r25, 7
    3192:	a0 95       	com	r26
    3194:	ba 2f       	mov	r27, r26
    3196:	81 70       	andi	r24, 0x01	; 1
    3198:	90 70       	andi	r25, 0x00	; 0
    319a:	a0 70       	andi	r26, 0x00	; 0
    319c:	b0 70       	andi	r27, 0x00	; 0
    319e:	56 95       	lsr	r21
    31a0:	47 95       	ror	r20
    31a2:	37 95       	ror	r19
    31a4:	27 95       	ror	r18
    31a6:	82 2b       	or	r24, r18
    31a8:	93 2b       	or	r25, r19
    31aa:	a4 2b       	or	r26, r20
    31ac:	b5 2b       	or	r27, r21
    31ae:	84 83       	std	Z+4, r24	; 0x04
    31b0:	95 83       	std	Z+5, r25	; 0x05
    31b2:	a6 83       	std	Z+6, r26	; 0x06
    31b4:	b7 83       	std	Z+7, r27	; 0x07
    31b6:	82 81       	ldd	r24, Z+2	; 0x02
    31b8:	93 81       	ldd	r25, Z+3	; 0x03
    31ba:	01 96       	adiw	r24, 0x01	; 1
    31bc:	93 83       	std	Z+3, r25	; 0x03
    31be:	82 83       	std	Z+2, r24	; 0x02
    31c0:	df 01       	movw	r26, r30
    31c2:	01 c0       	rjmp	.+2      	; 0x31c6 <_fpadd_parts+0x28c>
    31c4:	d2 01       	movw	r26, r4
    31c6:	cd 01       	movw	r24, r26
    31c8:	cd b7       	in	r28, 0x3d	; 61
    31ca:	de b7       	in	r29, 0x3e	; 62
    31cc:	e2 e1       	ldi	r30, 0x12	; 18
    31ce:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <__epilogue_restores__>

000031d2 <__subsf3>:
    31d2:	a0 e2       	ldi	r26, 0x20	; 32
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	ef ee       	ldi	r30, 0xEF	; 239
    31d8:	f8 e1       	ldi	r31, 0x18	; 24
    31da:	0c 94 af 1e 	jmp	0x3d5e	; 0x3d5e <__prologue_saves__+0x18>
    31de:	69 83       	std	Y+1, r22	; 0x01
    31e0:	7a 83       	std	Y+2, r23	; 0x02
    31e2:	8b 83       	std	Y+3, r24	; 0x03
    31e4:	9c 83       	std	Y+4, r25	; 0x04
    31e6:	2d 83       	std	Y+5, r18	; 0x05
    31e8:	3e 83       	std	Y+6, r19	; 0x06
    31ea:	4f 83       	std	Y+7, r20	; 0x07
    31ec:	58 87       	std	Y+8, r21	; 0x08
    31ee:	e9 e0       	ldi	r30, 0x09	; 9
    31f0:	ee 2e       	mov	r14, r30
    31f2:	f1 2c       	mov	r15, r1
    31f4:	ec 0e       	add	r14, r28
    31f6:	fd 1e       	adc	r15, r29
    31f8:	ce 01       	movw	r24, r28
    31fa:	01 96       	adiw	r24, 0x01	; 1
    31fc:	b7 01       	movw	r22, r14
    31fe:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__unpack_f>
    3202:	8e 01       	movw	r16, r28
    3204:	0f 5e       	subi	r16, 0xEF	; 239
    3206:	1f 4f       	sbci	r17, 0xFF	; 255
    3208:	ce 01       	movw	r24, r28
    320a:	05 96       	adiw	r24, 0x05	; 5
    320c:	b8 01       	movw	r22, r16
    320e:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__unpack_f>
    3212:	8a 89       	ldd	r24, Y+18	; 0x12
    3214:	91 e0       	ldi	r25, 0x01	; 1
    3216:	89 27       	eor	r24, r25
    3218:	8a 8b       	std	Y+18, r24	; 0x12
    321a:	c7 01       	movw	r24, r14
    321c:	b8 01       	movw	r22, r16
    321e:	ae 01       	movw	r20, r28
    3220:	47 5e       	subi	r20, 0xE7	; 231
    3222:	5f 4f       	sbci	r21, 0xFF	; 255
    3224:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <_fpadd_parts>
    3228:	0e 94 99 1c 	call	0x3932	; 0x3932 <__pack_f>
    322c:	a0 96       	adiw	r28, 0x20	; 32
    322e:	e6 e0       	ldi	r30, 0x06	; 6
    3230:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__epilogue_restores__+0x18>

00003234 <__addsf3>:
    3234:	a0 e2       	ldi	r26, 0x20	; 32
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	e0 e2       	ldi	r30, 0x20	; 32
    323a:	f9 e1       	ldi	r31, 0x19	; 25
    323c:	0c 94 af 1e 	jmp	0x3d5e	; 0x3d5e <__prologue_saves__+0x18>
    3240:	69 83       	std	Y+1, r22	; 0x01
    3242:	7a 83       	std	Y+2, r23	; 0x02
    3244:	8b 83       	std	Y+3, r24	; 0x03
    3246:	9c 83       	std	Y+4, r25	; 0x04
    3248:	2d 83       	std	Y+5, r18	; 0x05
    324a:	3e 83       	std	Y+6, r19	; 0x06
    324c:	4f 83       	std	Y+7, r20	; 0x07
    324e:	58 87       	std	Y+8, r21	; 0x08
    3250:	f9 e0       	ldi	r31, 0x09	; 9
    3252:	ef 2e       	mov	r14, r31
    3254:	f1 2c       	mov	r15, r1
    3256:	ec 0e       	add	r14, r28
    3258:	fd 1e       	adc	r15, r29
    325a:	ce 01       	movw	r24, r28
    325c:	01 96       	adiw	r24, 0x01	; 1
    325e:	b7 01       	movw	r22, r14
    3260:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__unpack_f>
    3264:	8e 01       	movw	r16, r28
    3266:	0f 5e       	subi	r16, 0xEF	; 239
    3268:	1f 4f       	sbci	r17, 0xFF	; 255
    326a:	ce 01       	movw	r24, r28
    326c:	05 96       	adiw	r24, 0x05	; 5
    326e:	b8 01       	movw	r22, r16
    3270:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__unpack_f>
    3274:	c7 01       	movw	r24, r14
    3276:	b8 01       	movw	r22, r16
    3278:	ae 01       	movw	r20, r28
    327a:	47 5e       	subi	r20, 0xE7	; 231
    327c:	5f 4f       	sbci	r21, 0xFF	; 255
    327e:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <_fpadd_parts>
    3282:	0e 94 99 1c 	call	0x3932	; 0x3932 <__pack_f>
    3286:	a0 96       	adiw	r28, 0x20	; 32
    3288:	e6 e0       	ldi	r30, 0x06	; 6
    328a:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__epilogue_restores__+0x18>

0000328e <__mulsf3>:
    328e:	a0 e2       	ldi	r26, 0x20	; 32
    3290:	b0 e0       	ldi	r27, 0x00	; 0
    3292:	ed e4       	ldi	r30, 0x4D	; 77
    3294:	f9 e1       	ldi	r31, 0x19	; 25
    3296:	0c 94 a3 1e 	jmp	0x3d46	; 0x3d46 <__prologue_saves__>
    329a:	69 83       	std	Y+1, r22	; 0x01
    329c:	7a 83       	std	Y+2, r23	; 0x02
    329e:	8b 83       	std	Y+3, r24	; 0x03
    32a0:	9c 83       	std	Y+4, r25	; 0x04
    32a2:	2d 83       	std	Y+5, r18	; 0x05
    32a4:	3e 83       	std	Y+6, r19	; 0x06
    32a6:	4f 83       	std	Y+7, r20	; 0x07
    32a8:	58 87       	std	Y+8, r21	; 0x08
    32aa:	ce 01       	movw	r24, r28
    32ac:	01 96       	adiw	r24, 0x01	; 1
    32ae:	be 01       	movw	r22, r28
    32b0:	67 5f       	subi	r22, 0xF7	; 247
    32b2:	7f 4f       	sbci	r23, 0xFF	; 255
    32b4:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__unpack_f>
    32b8:	ce 01       	movw	r24, r28
    32ba:	05 96       	adiw	r24, 0x05	; 5
    32bc:	be 01       	movw	r22, r28
    32be:	6f 5e       	subi	r22, 0xEF	; 239
    32c0:	7f 4f       	sbci	r23, 0xFF	; 255
    32c2:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__unpack_f>
    32c6:	99 85       	ldd	r25, Y+9	; 0x09
    32c8:	92 30       	cpi	r25, 0x02	; 2
    32ca:	88 f0       	brcs	.+34     	; 0x32ee <__mulsf3+0x60>
    32cc:	89 89       	ldd	r24, Y+17	; 0x11
    32ce:	82 30       	cpi	r24, 0x02	; 2
    32d0:	c8 f0       	brcs	.+50     	; 0x3304 <__mulsf3+0x76>
    32d2:	94 30       	cpi	r25, 0x04	; 4
    32d4:	19 f4       	brne	.+6      	; 0x32dc <__mulsf3+0x4e>
    32d6:	82 30       	cpi	r24, 0x02	; 2
    32d8:	51 f4       	brne	.+20     	; 0x32ee <__mulsf3+0x60>
    32da:	04 c0       	rjmp	.+8      	; 0x32e4 <__mulsf3+0x56>
    32dc:	84 30       	cpi	r24, 0x04	; 4
    32de:	29 f4       	brne	.+10     	; 0x32ea <__mulsf3+0x5c>
    32e0:	92 30       	cpi	r25, 0x02	; 2
    32e2:	81 f4       	brne	.+32     	; 0x3304 <__mulsf3+0x76>
    32e4:	82 e8       	ldi	r24, 0x82	; 130
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	c6 c0       	rjmp	.+396    	; 0x3476 <__mulsf3+0x1e8>
    32ea:	92 30       	cpi	r25, 0x02	; 2
    32ec:	49 f4       	brne	.+18     	; 0x3300 <__mulsf3+0x72>
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f2:	8a 89       	ldd	r24, Y+18	; 0x12
    32f4:	98 13       	cpse	r25, r24
    32f6:	21 e0       	ldi	r18, 0x01	; 1
    32f8:	2a 87       	std	Y+10, r18	; 0x0a
    32fa:	ce 01       	movw	r24, r28
    32fc:	09 96       	adiw	r24, 0x09	; 9
    32fe:	bb c0       	rjmp	.+374    	; 0x3476 <__mulsf3+0x1e8>
    3300:	82 30       	cpi	r24, 0x02	; 2
    3302:	49 f4       	brne	.+18     	; 0x3316 <__mulsf3+0x88>
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	9a 85       	ldd	r25, Y+10	; 0x0a
    3308:	8a 89       	ldd	r24, Y+18	; 0x12
    330a:	98 13       	cpse	r25, r24
    330c:	21 e0       	ldi	r18, 0x01	; 1
    330e:	2a 8b       	std	Y+18, r18	; 0x12
    3310:	ce 01       	movw	r24, r28
    3312:	41 96       	adiw	r24, 0x11	; 17
    3314:	b0 c0       	rjmp	.+352    	; 0x3476 <__mulsf3+0x1e8>
    3316:	2d 84       	ldd	r2, Y+13	; 0x0d
    3318:	3e 84       	ldd	r3, Y+14	; 0x0e
    331a:	4f 84       	ldd	r4, Y+15	; 0x0f
    331c:	58 88       	ldd	r5, Y+16	; 0x10
    331e:	6d 88       	ldd	r6, Y+21	; 0x15
    3320:	7e 88       	ldd	r7, Y+22	; 0x16
    3322:	8f 88       	ldd	r8, Y+23	; 0x17
    3324:	98 8c       	ldd	r9, Y+24	; 0x18
    3326:	ee 24       	eor	r14, r14
    3328:	ff 24       	eor	r15, r15
    332a:	87 01       	movw	r16, r14
    332c:	aa 24       	eor	r10, r10
    332e:	bb 24       	eor	r11, r11
    3330:	65 01       	movw	r12, r10
    3332:	40 e0       	ldi	r20, 0x00	; 0
    3334:	50 e0       	ldi	r21, 0x00	; 0
    3336:	60 e0       	ldi	r22, 0x00	; 0
    3338:	70 e0       	ldi	r23, 0x00	; 0
    333a:	e0 e0       	ldi	r30, 0x00	; 0
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	c1 01       	movw	r24, r2
    3340:	81 70       	andi	r24, 0x01	; 1
    3342:	90 70       	andi	r25, 0x00	; 0
    3344:	89 2b       	or	r24, r25
    3346:	e9 f0       	breq	.+58     	; 0x3382 <__mulsf3+0xf4>
    3348:	e6 0c       	add	r14, r6
    334a:	f7 1c       	adc	r15, r7
    334c:	08 1d       	adc	r16, r8
    334e:	19 1d       	adc	r17, r9
    3350:	9a 01       	movw	r18, r20
    3352:	ab 01       	movw	r20, r22
    3354:	2a 0d       	add	r18, r10
    3356:	3b 1d       	adc	r19, r11
    3358:	4c 1d       	adc	r20, r12
    335a:	5d 1d       	adc	r21, r13
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	a0 e0       	ldi	r26, 0x00	; 0
    3362:	b0 e0       	ldi	r27, 0x00	; 0
    3364:	e6 14       	cp	r14, r6
    3366:	f7 04       	cpc	r15, r7
    3368:	08 05       	cpc	r16, r8
    336a:	19 05       	cpc	r17, r9
    336c:	20 f4       	brcc	.+8      	; 0x3376 <__mulsf3+0xe8>
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	a0 e0       	ldi	r26, 0x00	; 0
    3374:	b0 e0       	ldi	r27, 0x00	; 0
    3376:	ba 01       	movw	r22, r20
    3378:	a9 01       	movw	r20, r18
    337a:	48 0f       	add	r20, r24
    337c:	59 1f       	adc	r21, r25
    337e:	6a 1f       	adc	r22, r26
    3380:	7b 1f       	adc	r23, r27
    3382:	aa 0c       	add	r10, r10
    3384:	bb 1c       	adc	r11, r11
    3386:	cc 1c       	adc	r12, r12
    3388:	dd 1c       	adc	r13, r13
    338a:	97 fe       	sbrs	r9, 7
    338c:	08 c0       	rjmp	.+16     	; 0x339e <__mulsf3+0x110>
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	a0 e0       	ldi	r26, 0x00	; 0
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	a8 2a       	or	r10, r24
    3398:	b9 2a       	or	r11, r25
    339a:	ca 2a       	or	r12, r26
    339c:	db 2a       	or	r13, r27
    339e:	31 96       	adiw	r30, 0x01	; 1
    33a0:	e0 32       	cpi	r30, 0x20	; 32
    33a2:	f1 05       	cpc	r31, r1
    33a4:	49 f0       	breq	.+18     	; 0x33b8 <__mulsf3+0x12a>
    33a6:	66 0c       	add	r6, r6
    33a8:	77 1c       	adc	r7, r7
    33aa:	88 1c       	adc	r8, r8
    33ac:	99 1c       	adc	r9, r9
    33ae:	56 94       	lsr	r5
    33b0:	47 94       	ror	r4
    33b2:	37 94       	ror	r3
    33b4:	27 94       	ror	r2
    33b6:	c3 cf       	rjmp	.-122    	; 0x333e <__mulsf3+0xb0>
    33b8:	fa 85       	ldd	r31, Y+10	; 0x0a
    33ba:	ea 89       	ldd	r30, Y+18	; 0x12
    33bc:	2b 89       	ldd	r18, Y+19	; 0x13
    33be:	3c 89       	ldd	r19, Y+20	; 0x14
    33c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    33c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    33c4:	28 0f       	add	r18, r24
    33c6:	39 1f       	adc	r19, r25
    33c8:	2e 5f       	subi	r18, 0xFE	; 254
    33ca:	3f 4f       	sbci	r19, 0xFF	; 255
    33cc:	17 c0       	rjmp	.+46     	; 0x33fc <__mulsf3+0x16e>
    33ce:	ca 01       	movw	r24, r20
    33d0:	81 70       	andi	r24, 0x01	; 1
    33d2:	90 70       	andi	r25, 0x00	; 0
    33d4:	89 2b       	or	r24, r25
    33d6:	61 f0       	breq	.+24     	; 0x33f0 <__mulsf3+0x162>
    33d8:	16 95       	lsr	r17
    33da:	07 95       	ror	r16
    33dc:	f7 94       	ror	r15
    33de:	e7 94       	ror	r14
    33e0:	80 e0       	ldi	r24, 0x00	; 0
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	a0 e0       	ldi	r26, 0x00	; 0
    33e6:	b0 e8       	ldi	r27, 0x80	; 128
    33e8:	e8 2a       	or	r14, r24
    33ea:	f9 2a       	or	r15, r25
    33ec:	0a 2b       	or	r16, r26
    33ee:	1b 2b       	or	r17, r27
    33f0:	76 95       	lsr	r23
    33f2:	67 95       	ror	r22
    33f4:	57 95       	ror	r21
    33f6:	47 95       	ror	r20
    33f8:	2f 5f       	subi	r18, 0xFF	; 255
    33fa:	3f 4f       	sbci	r19, 0xFF	; 255
    33fc:	77 fd       	sbrc	r23, 7
    33fe:	e7 cf       	rjmp	.-50     	; 0x33ce <__mulsf3+0x140>
    3400:	0c c0       	rjmp	.+24     	; 0x341a <__mulsf3+0x18c>
    3402:	44 0f       	add	r20, r20
    3404:	55 1f       	adc	r21, r21
    3406:	66 1f       	adc	r22, r22
    3408:	77 1f       	adc	r23, r23
    340a:	17 fd       	sbrc	r17, 7
    340c:	41 60       	ori	r20, 0x01	; 1
    340e:	ee 0c       	add	r14, r14
    3410:	ff 1c       	adc	r15, r15
    3412:	00 1f       	adc	r16, r16
    3414:	11 1f       	adc	r17, r17
    3416:	21 50       	subi	r18, 0x01	; 1
    3418:	30 40       	sbci	r19, 0x00	; 0
    341a:	40 30       	cpi	r20, 0x00	; 0
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	59 07       	cpc	r21, r25
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	69 07       	cpc	r22, r25
    3424:	90 e4       	ldi	r25, 0x40	; 64
    3426:	79 07       	cpc	r23, r25
    3428:	60 f3       	brcs	.-40     	; 0x3402 <__mulsf3+0x174>
    342a:	2b 8f       	std	Y+27, r18	; 0x1b
    342c:	3c 8f       	std	Y+28, r19	; 0x1c
    342e:	db 01       	movw	r26, r22
    3430:	ca 01       	movw	r24, r20
    3432:	8f 77       	andi	r24, 0x7F	; 127
    3434:	90 70       	andi	r25, 0x00	; 0
    3436:	a0 70       	andi	r26, 0x00	; 0
    3438:	b0 70       	andi	r27, 0x00	; 0
    343a:	80 34       	cpi	r24, 0x40	; 64
    343c:	91 05       	cpc	r25, r1
    343e:	a1 05       	cpc	r26, r1
    3440:	b1 05       	cpc	r27, r1
    3442:	61 f4       	brne	.+24     	; 0x345c <__mulsf3+0x1ce>
    3444:	47 fd       	sbrc	r20, 7
    3446:	0a c0       	rjmp	.+20     	; 0x345c <__mulsf3+0x1ce>
    3448:	e1 14       	cp	r14, r1
    344a:	f1 04       	cpc	r15, r1
    344c:	01 05       	cpc	r16, r1
    344e:	11 05       	cpc	r17, r1
    3450:	29 f0       	breq	.+10     	; 0x345c <__mulsf3+0x1ce>
    3452:	40 5c       	subi	r20, 0xC0	; 192
    3454:	5f 4f       	sbci	r21, 0xFF	; 255
    3456:	6f 4f       	sbci	r22, 0xFF	; 255
    3458:	7f 4f       	sbci	r23, 0xFF	; 255
    345a:	40 78       	andi	r20, 0x80	; 128
    345c:	1a 8e       	std	Y+26, r1	; 0x1a
    345e:	fe 17       	cp	r31, r30
    3460:	11 f0       	breq	.+4      	; 0x3466 <__mulsf3+0x1d8>
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	8a 8f       	std	Y+26, r24	; 0x1a
    3466:	4d 8f       	std	Y+29, r20	; 0x1d
    3468:	5e 8f       	std	Y+30, r21	; 0x1e
    346a:	6f 8f       	std	Y+31, r22	; 0x1f
    346c:	78 a3       	std	Y+32, r23	; 0x20
    346e:	83 e0       	ldi	r24, 0x03	; 3
    3470:	89 8f       	std	Y+25, r24	; 0x19
    3472:	ce 01       	movw	r24, r28
    3474:	49 96       	adiw	r24, 0x19	; 25
    3476:	0e 94 99 1c 	call	0x3932	; 0x3932 <__pack_f>
    347a:	a0 96       	adiw	r28, 0x20	; 32
    347c:	e2 e1       	ldi	r30, 0x12	; 18
    347e:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <__epilogue_restores__>

00003482 <__divsf3>:
    3482:	a8 e1       	ldi	r26, 0x18	; 24
    3484:	b0 e0       	ldi	r27, 0x00	; 0
    3486:	e7 e4       	ldi	r30, 0x47	; 71
    3488:	fa e1       	ldi	r31, 0x1A	; 26
    348a:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__prologue_saves__+0x10>
    348e:	69 83       	std	Y+1, r22	; 0x01
    3490:	7a 83       	std	Y+2, r23	; 0x02
    3492:	8b 83       	std	Y+3, r24	; 0x03
    3494:	9c 83       	std	Y+4, r25	; 0x04
    3496:	2d 83       	std	Y+5, r18	; 0x05
    3498:	3e 83       	std	Y+6, r19	; 0x06
    349a:	4f 83       	std	Y+7, r20	; 0x07
    349c:	58 87       	std	Y+8, r21	; 0x08
    349e:	b9 e0       	ldi	r27, 0x09	; 9
    34a0:	eb 2e       	mov	r14, r27
    34a2:	f1 2c       	mov	r15, r1
    34a4:	ec 0e       	add	r14, r28
    34a6:	fd 1e       	adc	r15, r29
    34a8:	ce 01       	movw	r24, r28
    34aa:	01 96       	adiw	r24, 0x01	; 1
    34ac:	b7 01       	movw	r22, r14
    34ae:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__unpack_f>
    34b2:	8e 01       	movw	r16, r28
    34b4:	0f 5e       	subi	r16, 0xEF	; 239
    34b6:	1f 4f       	sbci	r17, 0xFF	; 255
    34b8:	ce 01       	movw	r24, r28
    34ba:	05 96       	adiw	r24, 0x05	; 5
    34bc:	b8 01       	movw	r22, r16
    34be:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__unpack_f>
    34c2:	29 85       	ldd	r18, Y+9	; 0x09
    34c4:	22 30       	cpi	r18, 0x02	; 2
    34c6:	08 f4       	brcc	.+2      	; 0x34ca <__divsf3+0x48>
    34c8:	7e c0       	rjmp	.+252    	; 0x35c6 <__divsf3+0x144>
    34ca:	39 89       	ldd	r19, Y+17	; 0x11
    34cc:	32 30       	cpi	r19, 0x02	; 2
    34ce:	10 f4       	brcc	.+4      	; 0x34d4 <__divsf3+0x52>
    34d0:	b8 01       	movw	r22, r16
    34d2:	7c c0       	rjmp	.+248    	; 0x35cc <__divsf3+0x14a>
    34d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    34d6:	9a 89       	ldd	r25, Y+18	; 0x12
    34d8:	89 27       	eor	r24, r25
    34da:	8a 87       	std	Y+10, r24	; 0x0a
    34dc:	24 30       	cpi	r18, 0x04	; 4
    34de:	11 f0       	breq	.+4      	; 0x34e4 <__divsf3+0x62>
    34e0:	22 30       	cpi	r18, 0x02	; 2
    34e2:	31 f4       	brne	.+12     	; 0x34f0 <__divsf3+0x6e>
    34e4:	23 17       	cp	r18, r19
    34e6:	09 f0       	breq	.+2      	; 0x34ea <__divsf3+0x68>
    34e8:	6e c0       	rjmp	.+220    	; 0x35c6 <__divsf3+0x144>
    34ea:	62 e8       	ldi	r22, 0x82	; 130
    34ec:	70 e0       	ldi	r23, 0x00	; 0
    34ee:	6e c0       	rjmp	.+220    	; 0x35cc <__divsf3+0x14a>
    34f0:	34 30       	cpi	r19, 0x04	; 4
    34f2:	39 f4       	brne	.+14     	; 0x3502 <__divsf3+0x80>
    34f4:	1d 86       	std	Y+13, r1	; 0x0d
    34f6:	1e 86       	std	Y+14, r1	; 0x0e
    34f8:	1f 86       	std	Y+15, r1	; 0x0f
    34fa:	18 8a       	std	Y+16, r1	; 0x10
    34fc:	1c 86       	std	Y+12, r1	; 0x0c
    34fe:	1b 86       	std	Y+11, r1	; 0x0b
    3500:	04 c0       	rjmp	.+8      	; 0x350a <__divsf3+0x88>
    3502:	32 30       	cpi	r19, 0x02	; 2
    3504:	21 f4       	brne	.+8      	; 0x350e <__divsf3+0x8c>
    3506:	84 e0       	ldi	r24, 0x04	; 4
    3508:	89 87       	std	Y+9, r24	; 0x09
    350a:	b7 01       	movw	r22, r14
    350c:	5f c0       	rjmp	.+190    	; 0x35cc <__divsf3+0x14a>
    350e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3510:	3c 85       	ldd	r19, Y+12	; 0x0c
    3512:	8b 89       	ldd	r24, Y+19	; 0x13
    3514:	9c 89       	ldd	r25, Y+20	; 0x14
    3516:	28 1b       	sub	r18, r24
    3518:	39 0b       	sbc	r19, r25
    351a:	3c 87       	std	Y+12, r19	; 0x0c
    351c:	2b 87       	std	Y+11, r18	; 0x0b
    351e:	ed 84       	ldd	r14, Y+13	; 0x0d
    3520:	fe 84       	ldd	r15, Y+14	; 0x0e
    3522:	0f 85       	ldd	r16, Y+15	; 0x0f
    3524:	18 89       	ldd	r17, Y+16	; 0x10
    3526:	ad 88       	ldd	r10, Y+21	; 0x15
    3528:	be 88       	ldd	r11, Y+22	; 0x16
    352a:	cf 88       	ldd	r12, Y+23	; 0x17
    352c:	d8 8c       	ldd	r13, Y+24	; 0x18
    352e:	ea 14       	cp	r14, r10
    3530:	fb 04       	cpc	r15, r11
    3532:	0c 05       	cpc	r16, r12
    3534:	1d 05       	cpc	r17, r13
    3536:	40 f4       	brcc	.+16     	; 0x3548 <__divsf3+0xc6>
    3538:	ee 0c       	add	r14, r14
    353a:	ff 1c       	adc	r15, r15
    353c:	00 1f       	adc	r16, r16
    353e:	11 1f       	adc	r17, r17
    3540:	21 50       	subi	r18, 0x01	; 1
    3542:	30 40       	sbci	r19, 0x00	; 0
    3544:	3c 87       	std	Y+12, r19	; 0x0c
    3546:	2b 87       	std	Y+11, r18	; 0x0b
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	40 e0       	ldi	r20, 0x00	; 0
    354e:	50 e0       	ldi	r21, 0x00	; 0
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	a0 e0       	ldi	r26, 0x00	; 0
    3556:	b0 e4       	ldi	r27, 0x40	; 64
    3558:	60 e0       	ldi	r22, 0x00	; 0
    355a:	70 e0       	ldi	r23, 0x00	; 0
    355c:	ea 14       	cp	r14, r10
    355e:	fb 04       	cpc	r15, r11
    3560:	0c 05       	cpc	r16, r12
    3562:	1d 05       	cpc	r17, r13
    3564:	40 f0       	brcs	.+16     	; 0x3576 <__divsf3+0xf4>
    3566:	28 2b       	or	r18, r24
    3568:	39 2b       	or	r19, r25
    356a:	4a 2b       	or	r20, r26
    356c:	5b 2b       	or	r21, r27
    356e:	ea 18       	sub	r14, r10
    3570:	fb 08       	sbc	r15, r11
    3572:	0c 09       	sbc	r16, r12
    3574:	1d 09       	sbc	r17, r13
    3576:	b6 95       	lsr	r27
    3578:	a7 95       	ror	r26
    357a:	97 95       	ror	r25
    357c:	87 95       	ror	r24
    357e:	ee 0c       	add	r14, r14
    3580:	ff 1c       	adc	r15, r15
    3582:	00 1f       	adc	r16, r16
    3584:	11 1f       	adc	r17, r17
    3586:	6f 5f       	subi	r22, 0xFF	; 255
    3588:	7f 4f       	sbci	r23, 0xFF	; 255
    358a:	6f 31       	cpi	r22, 0x1F	; 31
    358c:	71 05       	cpc	r23, r1
    358e:	31 f7       	brne	.-52     	; 0x355c <__divsf3+0xda>
    3590:	da 01       	movw	r26, r20
    3592:	c9 01       	movw	r24, r18
    3594:	8f 77       	andi	r24, 0x7F	; 127
    3596:	90 70       	andi	r25, 0x00	; 0
    3598:	a0 70       	andi	r26, 0x00	; 0
    359a:	b0 70       	andi	r27, 0x00	; 0
    359c:	80 34       	cpi	r24, 0x40	; 64
    359e:	91 05       	cpc	r25, r1
    35a0:	a1 05       	cpc	r26, r1
    35a2:	b1 05       	cpc	r27, r1
    35a4:	61 f4       	brne	.+24     	; 0x35be <__divsf3+0x13c>
    35a6:	27 fd       	sbrc	r18, 7
    35a8:	0a c0       	rjmp	.+20     	; 0x35be <__divsf3+0x13c>
    35aa:	e1 14       	cp	r14, r1
    35ac:	f1 04       	cpc	r15, r1
    35ae:	01 05       	cpc	r16, r1
    35b0:	11 05       	cpc	r17, r1
    35b2:	29 f0       	breq	.+10     	; 0x35be <__divsf3+0x13c>
    35b4:	20 5c       	subi	r18, 0xC0	; 192
    35b6:	3f 4f       	sbci	r19, 0xFF	; 255
    35b8:	4f 4f       	sbci	r20, 0xFF	; 255
    35ba:	5f 4f       	sbci	r21, 0xFF	; 255
    35bc:	20 78       	andi	r18, 0x80	; 128
    35be:	2d 87       	std	Y+13, r18	; 0x0d
    35c0:	3e 87       	std	Y+14, r19	; 0x0e
    35c2:	4f 87       	std	Y+15, r20	; 0x0f
    35c4:	58 8b       	std	Y+16, r21	; 0x10
    35c6:	be 01       	movw	r22, r28
    35c8:	67 5f       	subi	r22, 0xF7	; 247
    35ca:	7f 4f       	sbci	r23, 0xFF	; 255
    35cc:	cb 01       	movw	r24, r22
    35ce:	0e 94 99 1c 	call	0x3932	; 0x3932 <__pack_f>
    35d2:	68 96       	adiw	r28, 0x18	; 24
    35d4:	ea e0       	ldi	r30, 0x0A	; 10
    35d6:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__epilogue_restores__+0x10>

000035da <__gtsf2>:
    35da:	a8 e1       	ldi	r26, 0x18	; 24
    35dc:	b0 e0       	ldi	r27, 0x00	; 0
    35de:	e3 ef       	ldi	r30, 0xF3	; 243
    35e0:	fa e1       	ldi	r31, 0x1A	; 26
    35e2:	0c 94 af 1e 	jmp	0x3d5e	; 0x3d5e <__prologue_saves__+0x18>
    35e6:	69 83       	std	Y+1, r22	; 0x01
    35e8:	7a 83       	std	Y+2, r23	; 0x02
    35ea:	8b 83       	std	Y+3, r24	; 0x03
    35ec:	9c 83       	std	Y+4, r25	; 0x04
    35ee:	2d 83       	std	Y+5, r18	; 0x05
    35f0:	3e 83       	std	Y+6, r19	; 0x06
    35f2:	4f 83       	std	Y+7, r20	; 0x07
    35f4:	58 87       	std	Y+8, r21	; 0x08
    35f6:	89 e0       	ldi	r24, 0x09	; 9
    35f8:	e8 2e       	mov	r14, r24
    35fa:	f1 2c       	mov	r15, r1
    35fc:	ec 0e       	add	r14, r28
    35fe:	fd 1e       	adc	r15, r29
    3600:	ce 01       	movw	r24, r28
    3602:	01 96       	adiw	r24, 0x01	; 1
    3604:	b7 01       	movw	r22, r14
    3606:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__unpack_f>
    360a:	8e 01       	movw	r16, r28
    360c:	0f 5e       	subi	r16, 0xEF	; 239
    360e:	1f 4f       	sbci	r17, 0xFF	; 255
    3610:	ce 01       	movw	r24, r28
    3612:	05 96       	adiw	r24, 0x05	; 5
    3614:	b8 01       	movw	r22, r16
    3616:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__unpack_f>
    361a:	89 85       	ldd	r24, Y+9	; 0x09
    361c:	82 30       	cpi	r24, 0x02	; 2
    361e:	40 f0       	brcs	.+16     	; 0x3630 <__gtsf2+0x56>
    3620:	89 89       	ldd	r24, Y+17	; 0x11
    3622:	82 30       	cpi	r24, 0x02	; 2
    3624:	28 f0       	brcs	.+10     	; 0x3630 <__gtsf2+0x56>
    3626:	c7 01       	movw	r24, r14
    3628:	b8 01       	movw	r22, r16
    362a:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__fpcmp_parts_f>
    362e:	01 c0       	rjmp	.+2      	; 0x3632 <__gtsf2+0x58>
    3630:	8f ef       	ldi	r24, 0xFF	; 255
    3632:	68 96       	adiw	r28, 0x18	; 24
    3634:	e6 e0       	ldi	r30, 0x06	; 6
    3636:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__epilogue_restores__+0x18>

0000363a <__gesf2>:
    363a:	a8 e1       	ldi	r26, 0x18	; 24
    363c:	b0 e0       	ldi	r27, 0x00	; 0
    363e:	e3 e2       	ldi	r30, 0x23	; 35
    3640:	fb e1       	ldi	r31, 0x1B	; 27
    3642:	0c 94 af 1e 	jmp	0x3d5e	; 0x3d5e <__prologue_saves__+0x18>
    3646:	69 83       	std	Y+1, r22	; 0x01
    3648:	7a 83       	std	Y+2, r23	; 0x02
    364a:	8b 83       	std	Y+3, r24	; 0x03
    364c:	9c 83       	std	Y+4, r25	; 0x04
    364e:	2d 83       	std	Y+5, r18	; 0x05
    3650:	3e 83       	std	Y+6, r19	; 0x06
    3652:	4f 83       	std	Y+7, r20	; 0x07
    3654:	58 87       	std	Y+8, r21	; 0x08
    3656:	89 e0       	ldi	r24, 0x09	; 9
    3658:	e8 2e       	mov	r14, r24
    365a:	f1 2c       	mov	r15, r1
    365c:	ec 0e       	add	r14, r28
    365e:	fd 1e       	adc	r15, r29
    3660:	ce 01       	movw	r24, r28
    3662:	01 96       	adiw	r24, 0x01	; 1
    3664:	b7 01       	movw	r22, r14
    3666:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__unpack_f>
    366a:	8e 01       	movw	r16, r28
    366c:	0f 5e       	subi	r16, 0xEF	; 239
    366e:	1f 4f       	sbci	r17, 0xFF	; 255
    3670:	ce 01       	movw	r24, r28
    3672:	05 96       	adiw	r24, 0x05	; 5
    3674:	b8 01       	movw	r22, r16
    3676:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__unpack_f>
    367a:	89 85       	ldd	r24, Y+9	; 0x09
    367c:	82 30       	cpi	r24, 0x02	; 2
    367e:	40 f0       	brcs	.+16     	; 0x3690 <__gesf2+0x56>
    3680:	89 89       	ldd	r24, Y+17	; 0x11
    3682:	82 30       	cpi	r24, 0x02	; 2
    3684:	28 f0       	brcs	.+10     	; 0x3690 <__gesf2+0x56>
    3686:	c7 01       	movw	r24, r14
    3688:	b8 01       	movw	r22, r16
    368a:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__fpcmp_parts_f>
    368e:	01 c0       	rjmp	.+2      	; 0x3692 <__gesf2+0x58>
    3690:	8f ef       	ldi	r24, 0xFF	; 255
    3692:	68 96       	adiw	r28, 0x18	; 24
    3694:	e6 e0       	ldi	r30, 0x06	; 6
    3696:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__epilogue_restores__+0x18>

0000369a <__ltsf2>:
    369a:	a8 e1       	ldi	r26, 0x18	; 24
    369c:	b0 e0       	ldi	r27, 0x00	; 0
    369e:	e3 e5       	ldi	r30, 0x53	; 83
    36a0:	fb e1       	ldi	r31, 0x1B	; 27
    36a2:	0c 94 af 1e 	jmp	0x3d5e	; 0x3d5e <__prologue_saves__+0x18>
    36a6:	69 83       	std	Y+1, r22	; 0x01
    36a8:	7a 83       	std	Y+2, r23	; 0x02
    36aa:	8b 83       	std	Y+3, r24	; 0x03
    36ac:	9c 83       	std	Y+4, r25	; 0x04
    36ae:	2d 83       	std	Y+5, r18	; 0x05
    36b0:	3e 83       	std	Y+6, r19	; 0x06
    36b2:	4f 83       	std	Y+7, r20	; 0x07
    36b4:	58 87       	std	Y+8, r21	; 0x08
    36b6:	89 e0       	ldi	r24, 0x09	; 9
    36b8:	e8 2e       	mov	r14, r24
    36ba:	f1 2c       	mov	r15, r1
    36bc:	ec 0e       	add	r14, r28
    36be:	fd 1e       	adc	r15, r29
    36c0:	ce 01       	movw	r24, r28
    36c2:	01 96       	adiw	r24, 0x01	; 1
    36c4:	b7 01       	movw	r22, r14
    36c6:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__unpack_f>
    36ca:	8e 01       	movw	r16, r28
    36cc:	0f 5e       	subi	r16, 0xEF	; 239
    36ce:	1f 4f       	sbci	r17, 0xFF	; 255
    36d0:	ce 01       	movw	r24, r28
    36d2:	05 96       	adiw	r24, 0x05	; 5
    36d4:	b8 01       	movw	r22, r16
    36d6:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__unpack_f>
    36da:	89 85       	ldd	r24, Y+9	; 0x09
    36dc:	82 30       	cpi	r24, 0x02	; 2
    36de:	40 f0       	brcs	.+16     	; 0x36f0 <__ltsf2+0x56>
    36e0:	89 89       	ldd	r24, Y+17	; 0x11
    36e2:	82 30       	cpi	r24, 0x02	; 2
    36e4:	28 f0       	brcs	.+10     	; 0x36f0 <__ltsf2+0x56>
    36e6:	c7 01       	movw	r24, r14
    36e8:	b8 01       	movw	r22, r16
    36ea:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <__fpcmp_parts_f>
    36ee:	01 c0       	rjmp	.+2      	; 0x36f2 <__ltsf2+0x58>
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	68 96       	adiw	r28, 0x18	; 24
    36f4:	e6 e0       	ldi	r30, 0x06	; 6
    36f6:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__epilogue_restores__+0x18>

000036fa <__fixsfsi>:
    36fa:	ac e0       	ldi	r26, 0x0C	; 12
    36fc:	b0 e0       	ldi	r27, 0x00	; 0
    36fe:	e3 e8       	ldi	r30, 0x83	; 131
    3700:	fb e1       	ldi	r31, 0x1B	; 27
    3702:	0c 94 b3 1e 	jmp	0x3d66	; 0x3d66 <__prologue_saves__+0x20>
    3706:	69 83       	std	Y+1, r22	; 0x01
    3708:	7a 83       	std	Y+2, r23	; 0x02
    370a:	8b 83       	std	Y+3, r24	; 0x03
    370c:	9c 83       	std	Y+4, r25	; 0x04
    370e:	ce 01       	movw	r24, r28
    3710:	01 96       	adiw	r24, 0x01	; 1
    3712:	be 01       	movw	r22, r28
    3714:	6b 5f       	subi	r22, 0xFB	; 251
    3716:	7f 4f       	sbci	r23, 0xFF	; 255
    3718:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__unpack_f>
    371c:	8d 81       	ldd	r24, Y+5	; 0x05
    371e:	82 30       	cpi	r24, 0x02	; 2
    3720:	61 f1       	breq	.+88     	; 0x377a <__fixsfsi+0x80>
    3722:	82 30       	cpi	r24, 0x02	; 2
    3724:	50 f1       	brcs	.+84     	; 0x377a <__fixsfsi+0x80>
    3726:	84 30       	cpi	r24, 0x04	; 4
    3728:	21 f4       	brne	.+8      	; 0x3732 <__fixsfsi+0x38>
    372a:	8e 81       	ldd	r24, Y+6	; 0x06
    372c:	88 23       	and	r24, r24
    372e:	51 f1       	breq	.+84     	; 0x3784 <__fixsfsi+0x8a>
    3730:	2e c0       	rjmp	.+92     	; 0x378e <__fixsfsi+0x94>
    3732:	2f 81       	ldd	r18, Y+7	; 0x07
    3734:	38 85       	ldd	r19, Y+8	; 0x08
    3736:	37 fd       	sbrc	r19, 7
    3738:	20 c0       	rjmp	.+64     	; 0x377a <__fixsfsi+0x80>
    373a:	6e 81       	ldd	r22, Y+6	; 0x06
    373c:	2f 31       	cpi	r18, 0x1F	; 31
    373e:	31 05       	cpc	r19, r1
    3740:	1c f0       	brlt	.+6      	; 0x3748 <__fixsfsi+0x4e>
    3742:	66 23       	and	r22, r22
    3744:	f9 f0       	breq	.+62     	; 0x3784 <__fixsfsi+0x8a>
    3746:	23 c0       	rjmp	.+70     	; 0x378e <__fixsfsi+0x94>
    3748:	8e e1       	ldi	r24, 0x1E	; 30
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	82 1b       	sub	r24, r18
    374e:	93 0b       	sbc	r25, r19
    3750:	29 85       	ldd	r18, Y+9	; 0x09
    3752:	3a 85       	ldd	r19, Y+10	; 0x0a
    3754:	4b 85       	ldd	r20, Y+11	; 0x0b
    3756:	5c 85       	ldd	r21, Y+12	; 0x0c
    3758:	04 c0       	rjmp	.+8      	; 0x3762 <__fixsfsi+0x68>
    375a:	56 95       	lsr	r21
    375c:	47 95       	ror	r20
    375e:	37 95       	ror	r19
    3760:	27 95       	ror	r18
    3762:	8a 95       	dec	r24
    3764:	d2 f7       	brpl	.-12     	; 0x375a <__fixsfsi+0x60>
    3766:	66 23       	and	r22, r22
    3768:	b1 f0       	breq	.+44     	; 0x3796 <__fixsfsi+0x9c>
    376a:	50 95       	com	r21
    376c:	40 95       	com	r20
    376e:	30 95       	com	r19
    3770:	21 95       	neg	r18
    3772:	3f 4f       	sbci	r19, 0xFF	; 255
    3774:	4f 4f       	sbci	r20, 0xFF	; 255
    3776:	5f 4f       	sbci	r21, 0xFF	; 255
    3778:	0e c0       	rjmp	.+28     	; 0x3796 <__fixsfsi+0x9c>
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	40 e0       	ldi	r20, 0x00	; 0
    3780:	50 e0       	ldi	r21, 0x00	; 0
    3782:	09 c0       	rjmp	.+18     	; 0x3796 <__fixsfsi+0x9c>
    3784:	2f ef       	ldi	r18, 0xFF	; 255
    3786:	3f ef       	ldi	r19, 0xFF	; 255
    3788:	4f ef       	ldi	r20, 0xFF	; 255
    378a:	5f e7       	ldi	r21, 0x7F	; 127
    378c:	04 c0       	rjmp	.+8      	; 0x3796 <__fixsfsi+0x9c>
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	40 e0       	ldi	r20, 0x00	; 0
    3794:	50 e8       	ldi	r21, 0x80	; 128
    3796:	b9 01       	movw	r22, r18
    3798:	ca 01       	movw	r24, r20
    379a:	2c 96       	adiw	r28, 0x0c	; 12
    379c:	e2 e0       	ldi	r30, 0x02	; 2
    379e:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <__epilogue_restores__+0x20>

000037a2 <__floatunsisf>:
    37a2:	a8 e0       	ldi	r26, 0x08	; 8
    37a4:	b0 e0       	ldi	r27, 0x00	; 0
    37a6:	e7 ed       	ldi	r30, 0xD7	; 215
    37a8:	fb e1       	ldi	r31, 0x1B	; 27
    37aa:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__prologue_saves__+0x10>
    37ae:	7b 01       	movw	r14, r22
    37b0:	8c 01       	movw	r16, r24
    37b2:	61 15       	cp	r22, r1
    37b4:	71 05       	cpc	r23, r1
    37b6:	81 05       	cpc	r24, r1
    37b8:	91 05       	cpc	r25, r1
    37ba:	19 f4       	brne	.+6      	; 0x37c2 <__floatunsisf+0x20>
    37bc:	82 e0       	ldi	r24, 0x02	; 2
    37be:	89 83       	std	Y+1, r24	; 0x01
    37c0:	60 c0       	rjmp	.+192    	; 0x3882 <__floatunsisf+0xe0>
    37c2:	83 e0       	ldi	r24, 0x03	; 3
    37c4:	89 83       	std	Y+1, r24	; 0x01
    37c6:	8e e1       	ldi	r24, 0x1E	; 30
    37c8:	c8 2e       	mov	r12, r24
    37ca:	d1 2c       	mov	r13, r1
    37cc:	dc 82       	std	Y+4, r13	; 0x04
    37ce:	cb 82       	std	Y+3, r12	; 0x03
    37d0:	ed 82       	std	Y+5, r14	; 0x05
    37d2:	fe 82       	std	Y+6, r15	; 0x06
    37d4:	0f 83       	std	Y+7, r16	; 0x07
    37d6:	18 87       	std	Y+8, r17	; 0x08
    37d8:	c8 01       	movw	r24, r16
    37da:	b7 01       	movw	r22, r14
    37dc:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__clzsi2>
    37e0:	fc 01       	movw	r30, r24
    37e2:	31 97       	sbiw	r30, 0x01	; 1
    37e4:	f7 ff       	sbrs	r31, 7
    37e6:	3b c0       	rjmp	.+118    	; 0x385e <__floatunsisf+0xbc>
    37e8:	22 27       	eor	r18, r18
    37ea:	33 27       	eor	r19, r19
    37ec:	2e 1b       	sub	r18, r30
    37ee:	3f 0b       	sbc	r19, r31
    37f0:	57 01       	movw	r10, r14
    37f2:	68 01       	movw	r12, r16
    37f4:	02 2e       	mov	r0, r18
    37f6:	04 c0       	rjmp	.+8      	; 0x3800 <__floatunsisf+0x5e>
    37f8:	d6 94       	lsr	r13
    37fa:	c7 94       	ror	r12
    37fc:	b7 94       	ror	r11
    37fe:	a7 94       	ror	r10
    3800:	0a 94       	dec	r0
    3802:	d2 f7       	brpl	.-12     	; 0x37f8 <__floatunsisf+0x56>
    3804:	40 e0       	ldi	r20, 0x00	; 0
    3806:	50 e0       	ldi	r21, 0x00	; 0
    3808:	60 e0       	ldi	r22, 0x00	; 0
    380a:	70 e0       	ldi	r23, 0x00	; 0
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	a0 e0       	ldi	r26, 0x00	; 0
    3812:	b0 e0       	ldi	r27, 0x00	; 0
    3814:	04 c0       	rjmp	.+8      	; 0x381e <__floatunsisf+0x7c>
    3816:	88 0f       	add	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	aa 1f       	adc	r26, r26
    381c:	bb 1f       	adc	r27, r27
    381e:	2a 95       	dec	r18
    3820:	d2 f7       	brpl	.-12     	; 0x3816 <__floatunsisf+0x74>
    3822:	01 97       	sbiw	r24, 0x01	; 1
    3824:	a1 09       	sbc	r26, r1
    3826:	b1 09       	sbc	r27, r1
    3828:	8e 21       	and	r24, r14
    382a:	9f 21       	and	r25, r15
    382c:	a0 23       	and	r26, r16
    382e:	b1 23       	and	r27, r17
    3830:	00 97       	sbiw	r24, 0x00	; 0
    3832:	a1 05       	cpc	r26, r1
    3834:	b1 05       	cpc	r27, r1
    3836:	21 f0       	breq	.+8      	; 0x3840 <__floatunsisf+0x9e>
    3838:	41 e0       	ldi	r20, 0x01	; 1
    383a:	50 e0       	ldi	r21, 0x00	; 0
    383c:	60 e0       	ldi	r22, 0x00	; 0
    383e:	70 e0       	ldi	r23, 0x00	; 0
    3840:	4a 29       	or	r20, r10
    3842:	5b 29       	or	r21, r11
    3844:	6c 29       	or	r22, r12
    3846:	7d 29       	or	r23, r13
    3848:	4d 83       	std	Y+5, r20	; 0x05
    384a:	5e 83       	std	Y+6, r21	; 0x06
    384c:	6f 83       	std	Y+7, r22	; 0x07
    384e:	78 87       	std	Y+8, r23	; 0x08
    3850:	8e e1       	ldi	r24, 0x1E	; 30
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	8e 1b       	sub	r24, r30
    3856:	9f 0b       	sbc	r25, r31
    3858:	9c 83       	std	Y+4, r25	; 0x04
    385a:	8b 83       	std	Y+3, r24	; 0x03
    385c:	12 c0       	rjmp	.+36     	; 0x3882 <__floatunsisf+0xe0>
    385e:	30 97       	sbiw	r30, 0x00	; 0
    3860:	81 f0       	breq	.+32     	; 0x3882 <__floatunsisf+0xe0>
    3862:	0e 2e       	mov	r0, r30
    3864:	04 c0       	rjmp	.+8      	; 0x386e <__floatunsisf+0xcc>
    3866:	ee 0c       	add	r14, r14
    3868:	ff 1c       	adc	r15, r15
    386a:	00 1f       	adc	r16, r16
    386c:	11 1f       	adc	r17, r17
    386e:	0a 94       	dec	r0
    3870:	d2 f7       	brpl	.-12     	; 0x3866 <__floatunsisf+0xc4>
    3872:	ed 82       	std	Y+5, r14	; 0x05
    3874:	fe 82       	std	Y+6, r15	; 0x06
    3876:	0f 83       	std	Y+7, r16	; 0x07
    3878:	18 87       	std	Y+8, r17	; 0x08
    387a:	ce 1a       	sub	r12, r30
    387c:	df 0a       	sbc	r13, r31
    387e:	dc 82       	std	Y+4, r13	; 0x04
    3880:	cb 82       	std	Y+3, r12	; 0x03
    3882:	1a 82       	std	Y+2, r1	; 0x02
    3884:	ce 01       	movw	r24, r28
    3886:	01 96       	adiw	r24, 0x01	; 1
    3888:	0e 94 99 1c 	call	0x3932	; 0x3932 <__pack_f>
    388c:	28 96       	adiw	r28, 0x08	; 8
    388e:	ea e0       	ldi	r30, 0x0A	; 10
    3890:	0c 94 c7 1e 	jmp	0x3d8e	; 0x3d8e <__epilogue_restores__+0x10>

00003894 <__clzsi2>:
    3894:	ef 92       	push	r14
    3896:	ff 92       	push	r15
    3898:	0f 93       	push	r16
    389a:	1f 93       	push	r17
    389c:	7b 01       	movw	r14, r22
    389e:	8c 01       	movw	r16, r24
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	e8 16       	cp	r14, r24
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	f8 06       	cpc	r15, r24
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	08 07       	cpc	r16, r24
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	18 07       	cpc	r17, r24
    38b0:	88 f4       	brcc	.+34     	; 0x38d4 <__clzsi2+0x40>
    38b2:	8f ef       	ldi	r24, 0xFF	; 255
    38b4:	e8 16       	cp	r14, r24
    38b6:	f1 04       	cpc	r15, r1
    38b8:	01 05       	cpc	r16, r1
    38ba:	11 05       	cpc	r17, r1
    38bc:	31 f0       	breq	.+12     	; 0x38ca <__clzsi2+0x36>
    38be:	28 f0       	brcs	.+10     	; 0x38ca <__clzsi2+0x36>
    38c0:	88 e0       	ldi	r24, 0x08	; 8
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	a0 e0       	ldi	r26, 0x00	; 0
    38c6:	b0 e0       	ldi	r27, 0x00	; 0
    38c8:	17 c0       	rjmp	.+46     	; 0x38f8 <__clzsi2+0x64>
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	a0 e0       	ldi	r26, 0x00	; 0
    38d0:	b0 e0       	ldi	r27, 0x00	; 0
    38d2:	12 c0       	rjmp	.+36     	; 0x38f8 <__clzsi2+0x64>
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	e8 16       	cp	r14, r24
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	f8 06       	cpc	r15, r24
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	08 07       	cpc	r16, r24
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	18 07       	cpc	r17, r24
    38e4:	28 f0       	brcs	.+10     	; 0x38f0 <__clzsi2+0x5c>
    38e6:	88 e1       	ldi	r24, 0x18	; 24
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	a0 e0       	ldi	r26, 0x00	; 0
    38ec:	b0 e0       	ldi	r27, 0x00	; 0
    38ee:	04 c0       	rjmp	.+8      	; 0x38f8 <__clzsi2+0x64>
    38f0:	80 e1       	ldi	r24, 0x10	; 16
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	a0 e0       	ldi	r26, 0x00	; 0
    38f6:	b0 e0       	ldi	r27, 0x00	; 0
    38f8:	20 e2       	ldi	r18, 0x20	; 32
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	40 e0       	ldi	r20, 0x00	; 0
    38fe:	50 e0       	ldi	r21, 0x00	; 0
    3900:	28 1b       	sub	r18, r24
    3902:	39 0b       	sbc	r19, r25
    3904:	4a 0b       	sbc	r20, r26
    3906:	5b 0b       	sbc	r21, r27
    3908:	04 c0       	rjmp	.+8      	; 0x3912 <__clzsi2+0x7e>
    390a:	16 95       	lsr	r17
    390c:	07 95       	ror	r16
    390e:	f7 94       	ror	r15
    3910:	e7 94       	ror	r14
    3912:	8a 95       	dec	r24
    3914:	d2 f7       	brpl	.-12     	; 0x390a <__clzsi2+0x76>
    3916:	f7 01       	movw	r30, r14
    3918:	e6 57       	subi	r30, 0x76	; 118
    391a:	ff 4f       	sbci	r31, 0xFF	; 255
    391c:	80 81       	ld	r24, Z
    391e:	28 1b       	sub	r18, r24
    3920:	31 09       	sbc	r19, r1
    3922:	41 09       	sbc	r20, r1
    3924:	51 09       	sbc	r21, r1
    3926:	c9 01       	movw	r24, r18
    3928:	1f 91       	pop	r17
    392a:	0f 91       	pop	r16
    392c:	ff 90       	pop	r15
    392e:	ef 90       	pop	r14
    3930:	08 95       	ret

00003932 <__pack_f>:
    3932:	df 92       	push	r13
    3934:	ef 92       	push	r14
    3936:	ff 92       	push	r15
    3938:	0f 93       	push	r16
    393a:	1f 93       	push	r17
    393c:	fc 01       	movw	r30, r24
    393e:	e4 80       	ldd	r14, Z+4	; 0x04
    3940:	f5 80       	ldd	r15, Z+5	; 0x05
    3942:	06 81       	ldd	r16, Z+6	; 0x06
    3944:	17 81       	ldd	r17, Z+7	; 0x07
    3946:	d1 80       	ldd	r13, Z+1	; 0x01
    3948:	80 81       	ld	r24, Z
    394a:	82 30       	cpi	r24, 0x02	; 2
    394c:	48 f4       	brcc	.+18     	; 0x3960 <__pack_f+0x2e>
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	a0 e1       	ldi	r26, 0x10	; 16
    3954:	b0 e0       	ldi	r27, 0x00	; 0
    3956:	e8 2a       	or	r14, r24
    3958:	f9 2a       	or	r15, r25
    395a:	0a 2b       	or	r16, r26
    395c:	1b 2b       	or	r17, r27
    395e:	a5 c0       	rjmp	.+330    	; 0x3aaa <__pack_f+0x178>
    3960:	84 30       	cpi	r24, 0x04	; 4
    3962:	09 f4       	brne	.+2      	; 0x3966 <__pack_f+0x34>
    3964:	9f c0       	rjmp	.+318    	; 0x3aa4 <__pack_f+0x172>
    3966:	82 30       	cpi	r24, 0x02	; 2
    3968:	21 f4       	brne	.+8      	; 0x3972 <__pack_f+0x40>
    396a:	ee 24       	eor	r14, r14
    396c:	ff 24       	eor	r15, r15
    396e:	87 01       	movw	r16, r14
    3970:	05 c0       	rjmp	.+10     	; 0x397c <__pack_f+0x4a>
    3972:	e1 14       	cp	r14, r1
    3974:	f1 04       	cpc	r15, r1
    3976:	01 05       	cpc	r16, r1
    3978:	11 05       	cpc	r17, r1
    397a:	19 f4       	brne	.+6      	; 0x3982 <__pack_f+0x50>
    397c:	e0 e0       	ldi	r30, 0x00	; 0
    397e:	f0 e0       	ldi	r31, 0x00	; 0
    3980:	96 c0       	rjmp	.+300    	; 0x3aae <__pack_f+0x17c>
    3982:	62 81       	ldd	r22, Z+2	; 0x02
    3984:	73 81       	ldd	r23, Z+3	; 0x03
    3986:	9f ef       	ldi	r25, 0xFF	; 255
    3988:	62 38       	cpi	r22, 0x82	; 130
    398a:	79 07       	cpc	r23, r25
    398c:	0c f0       	brlt	.+2      	; 0x3990 <__pack_f+0x5e>
    398e:	5b c0       	rjmp	.+182    	; 0x3a46 <__pack_f+0x114>
    3990:	22 e8       	ldi	r18, 0x82	; 130
    3992:	3f ef       	ldi	r19, 0xFF	; 255
    3994:	26 1b       	sub	r18, r22
    3996:	37 0b       	sbc	r19, r23
    3998:	2a 31       	cpi	r18, 0x1A	; 26
    399a:	31 05       	cpc	r19, r1
    399c:	2c f0       	brlt	.+10     	; 0x39a8 <__pack_f+0x76>
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	40 e0       	ldi	r20, 0x00	; 0
    39a4:	50 e0       	ldi	r21, 0x00	; 0
    39a6:	2a c0       	rjmp	.+84     	; 0x39fc <__pack_f+0xca>
    39a8:	b8 01       	movw	r22, r16
    39aa:	a7 01       	movw	r20, r14
    39ac:	02 2e       	mov	r0, r18
    39ae:	04 c0       	rjmp	.+8      	; 0x39b8 <__pack_f+0x86>
    39b0:	76 95       	lsr	r23
    39b2:	67 95       	ror	r22
    39b4:	57 95       	ror	r21
    39b6:	47 95       	ror	r20
    39b8:	0a 94       	dec	r0
    39ba:	d2 f7       	brpl	.-12     	; 0x39b0 <__pack_f+0x7e>
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	a0 e0       	ldi	r26, 0x00	; 0
    39c2:	b0 e0       	ldi	r27, 0x00	; 0
    39c4:	04 c0       	rjmp	.+8      	; 0x39ce <__pack_f+0x9c>
    39c6:	88 0f       	add	r24, r24
    39c8:	99 1f       	adc	r25, r25
    39ca:	aa 1f       	adc	r26, r26
    39cc:	bb 1f       	adc	r27, r27
    39ce:	2a 95       	dec	r18
    39d0:	d2 f7       	brpl	.-12     	; 0x39c6 <__pack_f+0x94>
    39d2:	01 97       	sbiw	r24, 0x01	; 1
    39d4:	a1 09       	sbc	r26, r1
    39d6:	b1 09       	sbc	r27, r1
    39d8:	8e 21       	and	r24, r14
    39da:	9f 21       	and	r25, r15
    39dc:	a0 23       	and	r26, r16
    39de:	b1 23       	and	r27, r17
    39e0:	00 97       	sbiw	r24, 0x00	; 0
    39e2:	a1 05       	cpc	r26, r1
    39e4:	b1 05       	cpc	r27, r1
    39e6:	21 f0       	breq	.+8      	; 0x39f0 <__pack_f+0xbe>
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	a0 e0       	ldi	r26, 0x00	; 0
    39ee:	b0 e0       	ldi	r27, 0x00	; 0
    39f0:	9a 01       	movw	r18, r20
    39f2:	ab 01       	movw	r20, r22
    39f4:	28 2b       	or	r18, r24
    39f6:	39 2b       	or	r19, r25
    39f8:	4a 2b       	or	r20, r26
    39fa:	5b 2b       	or	r21, r27
    39fc:	da 01       	movw	r26, r20
    39fe:	c9 01       	movw	r24, r18
    3a00:	8f 77       	andi	r24, 0x7F	; 127
    3a02:	90 70       	andi	r25, 0x00	; 0
    3a04:	a0 70       	andi	r26, 0x00	; 0
    3a06:	b0 70       	andi	r27, 0x00	; 0
    3a08:	80 34       	cpi	r24, 0x40	; 64
    3a0a:	91 05       	cpc	r25, r1
    3a0c:	a1 05       	cpc	r26, r1
    3a0e:	b1 05       	cpc	r27, r1
    3a10:	39 f4       	brne	.+14     	; 0x3a20 <__pack_f+0xee>
    3a12:	27 ff       	sbrs	r18, 7
    3a14:	09 c0       	rjmp	.+18     	; 0x3a28 <__pack_f+0xf6>
    3a16:	20 5c       	subi	r18, 0xC0	; 192
    3a18:	3f 4f       	sbci	r19, 0xFF	; 255
    3a1a:	4f 4f       	sbci	r20, 0xFF	; 255
    3a1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a1e:	04 c0       	rjmp	.+8      	; 0x3a28 <__pack_f+0xf6>
    3a20:	21 5c       	subi	r18, 0xC1	; 193
    3a22:	3f 4f       	sbci	r19, 0xFF	; 255
    3a24:	4f 4f       	sbci	r20, 0xFF	; 255
    3a26:	5f 4f       	sbci	r21, 0xFF	; 255
    3a28:	e0 e0       	ldi	r30, 0x00	; 0
    3a2a:	f0 e0       	ldi	r31, 0x00	; 0
    3a2c:	20 30       	cpi	r18, 0x00	; 0
    3a2e:	a0 e0       	ldi	r26, 0x00	; 0
    3a30:	3a 07       	cpc	r19, r26
    3a32:	a0 e0       	ldi	r26, 0x00	; 0
    3a34:	4a 07       	cpc	r20, r26
    3a36:	a0 e4       	ldi	r26, 0x40	; 64
    3a38:	5a 07       	cpc	r21, r26
    3a3a:	10 f0       	brcs	.+4      	; 0x3a40 <__pack_f+0x10e>
    3a3c:	e1 e0       	ldi	r30, 0x01	; 1
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	79 01       	movw	r14, r18
    3a42:	8a 01       	movw	r16, r20
    3a44:	27 c0       	rjmp	.+78     	; 0x3a94 <__pack_f+0x162>
    3a46:	60 38       	cpi	r22, 0x80	; 128
    3a48:	71 05       	cpc	r23, r1
    3a4a:	64 f5       	brge	.+88     	; 0x3aa4 <__pack_f+0x172>
    3a4c:	fb 01       	movw	r30, r22
    3a4e:	e1 58       	subi	r30, 0x81	; 129
    3a50:	ff 4f       	sbci	r31, 0xFF	; 255
    3a52:	d8 01       	movw	r26, r16
    3a54:	c7 01       	movw	r24, r14
    3a56:	8f 77       	andi	r24, 0x7F	; 127
    3a58:	90 70       	andi	r25, 0x00	; 0
    3a5a:	a0 70       	andi	r26, 0x00	; 0
    3a5c:	b0 70       	andi	r27, 0x00	; 0
    3a5e:	80 34       	cpi	r24, 0x40	; 64
    3a60:	91 05       	cpc	r25, r1
    3a62:	a1 05       	cpc	r26, r1
    3a64:	b1 05       	cpc	r27, r1
    3a66:	39 f4       	brne	.+14     	; 0x3a76 <__pack_f+0x144>
    3a68:	e7 fe       	sbrs	r14, 7
    3a6a:	0d c0       	rjmp	.+26     	; 0x3a86 <__pack_f+0x154>
    3a6c:	80 e4       	ldi	r24, 0x40	; 64
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	a0 e0       	ldi	r26, 0x00	; 0
    3a72:	b0 e0       	ldi	r27, 0x00	; 0
    3a74:	04 c0       	rjmp	.+8      	; 0x3a7e <__pack_f+0x14c>
    3a76:	8f e3       	ldi	r24, 0x3F	; 63
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	a0 e0       	ldi	r26, 0x00	; 0
    3a7c:	b0 e0       	ldi	r27, 0x00	; 0
    3a7e:	e8 0e       	add	r14, r24
    3a80:	f9 1e       	adc	r15, r25
    3a82:	0a 1f       	adc	r16, r26
    3a84:	1b 1f       	adc	r17, r27
    3a86:	17 ff       	sbrs	r17, 7
    3a88:	05 c0       	rjmp	.+10     	; 0x3a94 <__pack_f+0x162>
    3a8a:	16 95       	lsr	r17
    3a8c:	07 95       	ror	r16
    3a8e:	f7 94       	ror	r15
    3a90:	e7 94       	ror	r14
    3a92:	31 96       	adiw	r30, 0x01	; 1
    3a94:	87 e0       	ldi	r24, 0x07	; 7
    3a96:	16 95       	lsr	r17
    3a98:	07 95       	ror	r16
    3a9a:	f7 94       	ror	r15
    3a9c:	e7 94       	ror	r14
    3a9e:	8a 95       	dec	r24
    3aa0:	d1 f7       	brne	.-12     	; 0x3a96 <__pack_f+0x164>
    3aa2:	05 c0       	rjmp	.+10     	; 0x3aae <__pack_f+0x17c>
    3aa4:	ee 24       	eor	r14, r14
    3aa6:	ff 24       	eor	r15, r15
    3aa8:	87 01       	movw	r16, r14
    3aaa:	ef ef       	ldi	r30, 0xFF	; 255
    3aac:	f0 e0       	ldi	r31, 0x00	; 0
    3aae:	6e 2f       	mov	r22, r30
    3ab0:	67 95       	ror	r22
    3ab2:	66 27       	eor	r22, r22
    3ab4:	67 95       	ror	r22
    3ab6:	90 2f       	mov	r25, r16
    3ab8:	9f 77       	andi	r25, 0x7F	; 127
    3aba:	d7 94       	ror	r13
    3abc:	dd 24       	eor	r13, r13
    3abe:	d7 94       	ror	r13
    3ac0:	8e 2f       	mov	r24, r30
    3ac2:	86 95       	lsr	r24
    3ac4:	49 2f       	mov	r20, r25
    3ac6:	46 2b       	or	r20, r22
    3ac8:	58 2f       	mov	r21, r24
    3aca:	5d 29       	or	r21, r13
    3acc:	b7 01       	movw	r22, r14
    3ace:	ca 01       	movw	r24, r20
    3ad0:	1f 91       	pop	r17
    3ad2:	0f 91       	pop	r16
    3ad4:	ff 90       	pop	r15
    3ad6:	ef 90       	pop	r14
    3ad8:	df 90       	pop	r13
    3ada:	08 95       	ret

00003adc <__unpack_f>:
    3adc:	fc 01       	movw	r30, r24
    3ade:	db 01       	movw	r26, r22
    3ae0:	40 81       	ld	r20, Z
    3ae2:	51 81       	ldd	r21, Z+1	; 0x01
    3ae4:	22 81       	ldd	r18, Z+2	; 0x02
    3ae6:	62 2f       	mov	r22, r18
    3ae8:	6f 77       	andi	r22, 0x7F	; 127
    3aea:	70 e0       	ldi	r23, 0x00	; 0
    3aec:	22 1f       	adc	r18, r18
    3aee:	22 27       	eor	r18, r18
    3af0:	22 1f       	adc	r18, r18
    3af2:	93 81       	ldd	r25, Z+3	; 0x03
    3af4:	89 2f       	mov	r24, r25
    3af6:	88 0f       	add	r24, r24
    3af8:	82 2b       	or	r24, r18
    3afa:	28 2f       	mov	r18, r24
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	99 1f       	adc	r25, r25
    3b00:	99 27       	eor	r25, r25
    3b02:	99 1f       	adc	r25, r25
    3b04:	11 96       	adiw	r26, 0x01	; 1
    3b06:	9c 93       	st	X, r25
    3b08:	11 97       	sbiw	r26, 0x01	; 1
    3b0a:	21 15       	cp	r18, r1
    3b0c:	31 05       	cpc	r19, r1
    3b0e:	a9 f5       	brne	.+106    	; 0x3b7a <__unpack_f+0x9e>
    3b10:	41 15       	cp	r20, r1
    3b12:	51 05       	cpc	r21, r1
    3b14:	61 05       	cpc	r22, r1
    3b16:	71 05       	cpc	r23, r1
    3b18:	11 f4       	brne	.+4      	; 0x3b1e <__unpack_f+0x42>
    3b1a:	82 e0       	ldi	r24, 0x02	; 2
    3b1c:	37 c0       	rjmp	.+110    	; 0x3b8c <__unpack_f+0xb0>
    3b1e:	82 e8       	ldi	r24, 0x82	; 130
    3b20:	9f ef       	ldi	r25, 0xFF	; 255
    3b22:	13 96       	adiw	r26, 0x03	; 3
    3b24:	9c 93       	st	X, r25
    3b26:	8e 93       	st	-X, r24
    3b28:	12 97       	sbiw	r26, 0x02	; 2
    3b2a:	9a 01       	movw	r18, r20
    3b2c:	ab 01       	movw	r20, r22
    3b2e:	67 e0       	ldi	r22, 0x07	; 7
    3b30:	22 0f       	add	r18, r18
    3b32:	33 1f       	adc	r19, r19
    3b34:	44 1f       	adc	r20, r20
    3b36:	55 1f       	adc	r21, r21
    3b38:	6a 95       	dec	r22
    3b3a:	d1 f7       	brne	.-12     	; 0x3b30 <__unpack_f+0x54>
    3b3c:	83 e0       	ldi	r24, 0x03	; 3
    3b3e:	8c 93       	st	X, r24
    3b40:	0d c0       	rjmp	.+26     	; 0x3b5c <__unpack_f+0x80>
    3b42:	22 0f       	add	r18, r18
    3b44:	33 1f       	adc	r19, r19
    3b46:	44 1f       	adc	r20, r20
    3b48:	55 1f       	adc	r21, r21
    3b4a:	12 96       	adiw	r26, 0x02	; 2
    3b4c:	8d 91       	ld	r24, X+
    3b4e:	9c 91       	ld	r25, X
    3b50:	13 97       	sbiw	r26, 0x03	; 3
    3b52:	01 97       	sbiw	r24, 0x01	; 1
    3b54:	13 96       	adiw	r26, 0x03	; 3
    3b56:	9c 93       	st	X, r25
    3b58:	8e 93       	st	-X, r24
    3b5a:	12 97       	sbiw	r26, 0x02	; 2
    3b5c:	20 30       	cpi	r18, 0x00	; 0
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	38 07       	cpc	r19, r24
    3b62:	80 e0       	ldi	r24, 0x00	; 0
    3b64:	48 07       	cpc	r20, r24
    3b66:	80 e4       	ldi	r24, 0x40	; 64
    3b68:	58 07       	cpc	r21, r24
    3b6a:	58 f3       	brcs	.-42     	; 0x3b42 <__unpack_f+0x66>
    3b6c:	14 96       	adiw	r26, 0x04	; 4
    3b6e:	2d 93       	st	X+, r18
    3b70:	3d 93       	st	X+, r19
    3b72:	4d 93       	st	X+, r20
    3b74:	5c 93       	st	X, r21
    3b76:	17 97       	sbiw	r26, 0x07	; 7
    3b78:	08 95       	ret
    3b7a:	2f 3f       	cpi	r18, 0xFF	; 255
    3b7c:	31 05       	cpc	r19, r1
    3b7e:	79 f4       	brne	.+30     	; 0x3b9e <__unpack_f+0xc2>
    3b80:	41 15       	cp	r20, r1
    3b82:	51 05       	cpc	r21, r1
    3b84:	61 05       	cpc	r22, r1
    3b86:	71 05       	cpc	r23, r1
    3b88:	19 f4       	brne	.+6      	; 0x3b90 <__unpack_f+0xb4>
    3b8a:	84 e0       	ldi	r24, 0x04	; 4
    3b8c:	8c 93       	st	X, r24
    3b8e:	08 95       	ret
    3b90:	64 ff       	sbrs	r22, 4
    3b92:	03 c0       	rjmp	.+6      	; 0x3b9a <__unpack_f+0xbe>
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	8c 93       	st	X, r24
    3b98:	12 c0       	rjmp	.+36     	; 0x3bbe <__unpack_f+0xe2>
    3b9a:	1c 92       	st	X, r1
    3b9c:	10 c0       	rjmp	.+32     	; 0x3bbe <__unpack_f+0xe2>
    3b9e:	2f 57       	subi	r18, 0x7F	; 127
    3ba0:	30 40       	sbci	r19, 0x00	; 0
    3ba2:	13 96       	adiw	r26, 0x03	; 3
    3ba4:	3c 93       	st	X, r19
    3ba6:	2e 93       	st	-X, r18
    3ba8:	12 97       	sbiw	r26, 0x02	; 2
    3baa:	83 e0       	ldi	r24, 0x03	; 3
    3bac:	8c 93       	st	X, r24
    3bae:	87 e0       	ldi	r24, 0x07	; 7
    3bb0:	44 0f       	add	r20, r20
    3bb2:	55 1f       	adc	r21, r21
    3bb4:	66 1f       	adc	r22, r22
    3bb6:	77 1f       	adc	r23, r23
    3bb8:	8a 95       	dec	r24
    3bba:	d1 f7       	brne	.-12     	; 0x3bb0 <__unpack_f+0xd4>
    3bbc:	70 64       	ori	r23, 0x40	; 64
    3bbe:	14 96       	adiw	r26, 0x04	; 4
    3bc0:	4d 93       	st	X+, r20
    3bc2:	5d 93       	st	X+, r21
    3bc4:	6d 93       	st	X+, r22
    3bc6:	7c 93       	st	X, r23
    3bc8:	17 97       	sbiw	r26, 0x07	; 7
    3bca:	08 95       	ret

00003bcc <__fpcmp_parts_f>:
    3bcc:	1f 93       	push	r17
    3bce:	dc 01       	movw	r26, r24
    3bd0:	fb 01       	movw	r30, r22
    3bd2:	9c 91       	ld	r25, X
    3bd4:	92 30       	cpi	r25, 0x02	; 2
    3bd6:	08 f4       	brcc	.+2      	; 0x3bda <__fpcmp_parts_f+0xe>
    3bd8:	47 c0       	rjmp	.+142    	; 0x3c68 <__fpcmp_parts_f+0x9c>
    3bda:	80 81       	ld	r24, Z
    3bdc:	82 30       	cpi	r24, 0x02	; 2
    3bde:	08 f4       	brcc	.+2      	; 0x3be2 <__fpcmp_parts_f+0x16>
    3be0:	43 c0       	rjmp	.+134    	; 0x3c68 <__fpcmp_parts_f+0x9c>
    3be2:	94 30       	cpi	r25, 0x04	; 4
    3be4:	51 f4       	brne	.+20     	; 0x3bfa <__fpcmp_parts_f+0x2e>
    3be6:	11 96       	adiw	r26, 0x01	; 1
    3be8:	1c 91       	ld	r17, X
    3bea:	84 30       	cpi	r24, 0x04	; 4
    3bec:	99 f5       	brne	.+102    	; 0x3c54 <__fpcmp_parts_f+0x88>
    3bee:	81 81       	ldd	r24, Z+1	; 0x01
    3bf0:	68 2f       	mov	r22, r24
    3bf2:	70 e0       	ldi	r23, 0x00	; 0
    3bf4:	61 1b       	sub	r22, r17
    3bf6:	71 09       	sbc	r23, r1
    3bf8:	3f c0       	rjmp	.+126    	; 0x3c78 <__fpcmp_parts_f+0xac>
    3bfa:	84 30       	cpi	r24, 0x04	; 4
    3bfc:	21 f0       	breq	.+8      	; 0x3c06 <__fpcmp_parts_f+0x3a>
    3bfe:	92 30       	cpi	r25, 0x02	; 2
    3c00:	31 f4       	brne	.+12     	; 0x3c0e <__fpcmp_parts_f+0x42>
    3c02:	82 30       	cpi	r24, 0x02	; 2
    3c04:	b9 f1       	breq	.+110    	; 0x3c74 <__fpcmp_parts_f+0xa8>
    3c06:	81 81       	ldd	r24, Z+1	; 0x01
    3c08:	88 23       	and	r24, r24
    3c0a:	89 f1       	breq	.+98     	; 0x3c6e <__fpcmp_parts_f+0xa2>
    3c0c:	2d c0       	rjmp	.+90     	; 0x3c68 <__fpcmp_parts_f+0x9c>
    3c0e:	11 96       	adiw	r26, 0x01	; 1
    3c10:	1c 91       	ld	r17, X
    3c12:	11 97       	sbiw	r26, 0x01	; 1
    3c14:	82 30       	cpi	r24, 0x02	; 2
    3c16:	f1 f0       	breq	.+60     	; 0x3c54 <__fpcmp_parts_f+0x88>
    3c18:	81 81       	ldd	r24, Z+1	; 0x01
    3c1a:	18 17       	cp	r17, r24
    3c1c:	d9 f4       	brne	.+54     	; 0x3c54 <__fpcmp_parts_f+0x88>
    3c1e:	12 96       	adiw	r26, 0x02	; 2
    3c20:	2d 91       	ld	r18, X+
    3c22:	3c 91       	ld	r19, X
    3c24:	13 97       	sbiw	r26, 0x03	; 3
    3c26:	82 81       	ldd	r24, Z+2	; 0x02
    3c28:	93 81       	ldd	r25, Z+3	; 0x03
    3c2a:	82 17       	cp	r24, r18
    3c2c:	93 07       	cpc	r25, r19
    3c2e:	94 f0       	brlt	.+36     	; 0x3c54 <__fpcmp_parts_f+0x88>
    3c30:	28 17       	cp	r18, r24
    3c32:	39 07       	cpc	r19, r25
    3c34:	bc f0       	brlt	.+46     	; 0x3c64 <__fpcmp_parts_f+0x98>
    3c36:	14 96       	adiw	r26, 0x04	; 4
    3c38:	8d 91       	ld	r24, X+
    3c3a:	9d 91       	ld	r25, X+
    3c3c:	0d 90       	ld	r0, X+
    3c3e:	bc 91       	ld	r27, X
    3c40:	a0 2d       	mov	r26, r0
    3c42:	24 81       	ldd	r18, Z+4	; 0x04
    3c44:	35 81       	ldd	r19, Z+5	; 0x05
    3c46:	46 81       	ldd	r20, Z+6	; 0x06
    3c48:	57 81       	ldd	r21, Z+7	; 0x07
    3c4a:	28 17       	cp	r18, r24
    3c4c:	39 07       	cpc	r19, r25
    3c4e:	4a 07       	cpc	r20, r26
    3c50:	5b 07       	cpc	r21, r27
    3c52:	18 f4       	brcc	.+6      	; 0x3c5a <__fpcmp_parts_f+0x8e>
    3c54:	11 23       	and	r17, r17
    3c56:	41 f0       	breq	.+16     	; 0x3c68 <__fpcmp_parts_f+0x9c>
    3c58:	0a c0       	rjmp	.+20     	; 0x3c6e <__fpcmp_parts_f+0xa2>
    3c5a:	82 17       	cp	r24, r18
    3c5c:	93 07       	cpc	r25, r19
    3c5e:	a4 07       	cpc	r26, r20
    3c60:	b5 07       	cpc	r27, r21
    3c62:	40 f4       	brcc	.+16     	; 0x3c74 <__fpcmp_parts_f+0xa8>
    3c64:	11 23       	and	r17, r17
    3c66:	19 f0       	breq	.+6      	; 0x3c6e <__fpcmp_parts_f+0xa2>
    3c68:	61 e0       	ldi	r22, 0x01	; 1
    3c6a:	70 e0       	ldi	r23, 0x00	; 0
    3c6c:	05 c0       	rjmp	.+10     	; 0x3c78 <__fpcmp_parts_f+0xac>
    3c6e:	6f ef       	ldi	r22, 0xFF	; 255
    3c70:	7f ef       	ldi	r23, 0xFF	; 255
    3c72:	02 c0       	rjmp	.+4      	; 0x3c78 <__fpcmp_parts_f+0xac>
    3c74:	60 e0       	ldi	r22, 0x00	; 0
    3c76:	70 e0       	ldi	r23, 0x00	; 0
    3c78:	cb 01       	movw	r24, r22
    3c7a:	1f 91       	pop	r17
    3c7c:	08 95       	ret

00003c7e <__divmodhi4>:
    3c7e:	97 fb       	bst	r25, 7
    3c80:	09 2e       	mov	r0, r25
    3c82:	07 26       	eor	r0, r23
    3c84:	0a d0       	rcall	.+20     	; 0x3c9a <__divmodhi4_neg1>
    3c86:	77 fd       	sbrc	r23, 7
    3c88:	04 d0       	rcall	.+8      	; 0x3c92 <__divmodhi4_neg2>
    3c8a:	49 d0       	rcall	.+146    	; 0x3d1e <__udivmodhi4>
    3c8c:	06 d0       	rcall	.+12     	; 0x3c9a <__divmodhi4_neg1>
    3c8e:	00 20       	and	r0, r0
    3c90:	1a f4       	brpl	.+6      	; 0x3c98 <__divmodhi4_exit>

00003c92 <__divmodhi4_neg2>:
    3c92:	70 95       	com	r23
    3c94:	61 95       	neg	r22
    3c96:	7f 4f       	sbci	r23, 0xFF	; 255

00003c98 <__divmodhi4_exit>:
    3c98:	08 95       	ret

00003c9a <__divmodhi4_neg1>:
    3c9a:	f6 f7       	brtc	.-4      	; 0x3c98 <__divmodhi4_exit>
    3c9c:	90 95       	com	r25
    3c9e:	81 95       	neg	r24
    3ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca2:	08 95       	ret

00003ca4 <__udivmodsi4>:
    3ca4:	a1 e2       	ldi	r26, 0x21	; 33
    3ca6:	1a 2e       	mov	r1, r26
    3ca8:	aa 1b       	sub	r26, r26
    3caa:	bb 1b       	sub	r27, r27
    3cac:	fd 01       	movw	r30, r26
    3cae:	0d c0       	rjmp	.+26     	; 0x3cca <__udivmodsi4_ep>

00003cb0 <__udivmodsi4_loop>:
    3cb0:	aa 1f       	adc	r26, r26
    3cb2:	bb 1f       	adc	r27, r27
    3cb4:	ee 1f       	adc	r30, r30
    3cb6:	ff 1f       	adc	r31, r31
    3cb8:	a2 17       	cp	r26, r18
    3cba:	b3 07       	cpc	r27, r19
    3cbc:	e4 07       	cpc	r30, r20
    3cbe:	f5 07       	cpc	r31, r21
    3cc0:	20 f0       	brcs	.+8      	; 0x3cca <__udivmodsi4_ep>
    3cc2:	a2 1b       	sub	r26, r18
    3cc4:	b3 0b       	sbc	r27, r19
    3cc6:	e4 0b       	sbc	r30, r20
    3cc8:	f5 0b       	sbc	r31, r21

00003cca <__udivmodsi4_ep>:
    3cca:	66 1f       	adc	r22, r22
    3ccc:	77 1f       	adc	r23, r23
    3cce:	88 1f       	adc	r24, r24
    3cd0:	99 1f       	adc	r25, r25
    3cd2:	1a 94       	dec	r1
    3cd4:	69 f7       	brne	.-38     	; 0x3cb0 <__udivmodsi4_loop>
    3cd6:	60 95       	com	r22
    3cd8:	70 95       	com	r23
    3cda:	80 95       	com	r24
    3cdc:	90 95       	com	r25
    3cde:	9b 01       	movw	r18, r22
    3ce0:	ac 01       	movw	r20, r24
    3ce2:	bd 01       	movw	r22, r26
    3ce4:	cf 01       	movw	r24, r30
    3ce6:	08 95       	ret

00003ce8 <__divmodsi4>:
    3ce8:	97 fb       	bst	r25, 7
    3cea:	09 2e       	mov	r0, r25
    3cec:	05 26       	eor	r0, r21
    3cee:	0e d0       	rcall	.+28     	; 0x3d0c <__divmodsi4_neg1>
    3cf0:	57 fd       	sbrc	r21, 7
    3cf2:	04 d0       	rcall	.+8      	; 0x3cfc <__divmodsi4_neg2>
    3cf4:	d7 df       	rcall	.-82     	; 0x3ca4 <__udivmodsi4>
    3cf6:	0a d0       	rcall	.+20     	; 0x3d0c <__divmodsi4_neg1>
    3cf8:	00 1c       	adc	r0, r0
    3cfa:	38 f4       	brcc	.+14     	; 0x3d0a <__divmodsi4_exit>

00003cfc <__divmodsi4_neg2>:
    3cfc:	50 95       	com	r21
    3cfe:	40 95       	com	r20
    3d00:	30 95       	com	r19
    3d02:	21 95       	neg	r18
    3d04:	3f 4f       	sbci	r19, 0xFF	; 255
    3d06:	4f 4f       	sbci	r20, 0xFF	; 255
    3d08:	5f 4f       	sbci	r21, 0xFF	; 255

00003d0a <__divmodsi4_exit>:
    3d0a:	08 95       	ret

00003d0c <__divmodsi4_neg1>:
    3d0c:	f6 f7       	brtc	.-4      	; 0x3d0a <__divmodsi4_exit>
    3d0e:	90 95       	com	r25
    3d10:	80 95       	com	r24
    3d12:	70 95       	com	r23
    3d14:	61 95       	neg	r22
    3d16:	7f 4f       	sbci	r23, 0xFF	; 255
    3d18:	8f 4f       	sbci	r24, 0xFF	; 255
    3d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d1c:	08 95       	ret

00003d1e <__udivmodhi4>:
    3d1e:	aa 1b       	sub	r26, r26
    3d20:	bb 1b       	sub	r27, r27
    3d22:	51 e1       	ldi	r21, 0x11	; 17
    3d24:	07 c0       	rjmp	.+14     	; 0x3d34 <__udivmodhi4_ep>

00003d26 <__udivmodhi4_loop>:
    3d26:	aa 1f       	adc	r26, r26
    3d28:	bb 1f       	adc	r27, r27
    3d2a:	a6 17       	cp	r26, r22
    3d2c:	b7 07       	cpc	r27, r23
    3d2e:	10 f0       	brcs	.+4      	; 0x3d34 <__udivmodhi4_ep>
    3d30:	a6 1b       	sub	r26, r22
    3d32:	b7 0b       	sbc	r27, r23

00003d34 <__udivmodhi4_ep>:
    3d34:	88 1f       	adc	r24, r24
    3d36:	99 1f       	adc	r25, r25
    3d38:	5a 95       	dec	r21
    3d3a:	a9 f7       	brne	.-22     	; 0x3d26 <__udivmodhi4_loop>
    3d3c:	80 95       	com	r24
    3d3e:	90 95       	com	r25
    3d40:	bc 01       	movw	r22, r24
    3d42:	cd 01       	movw	r24, r26
    3d44:	08 95       	ret

00003d46 <__prologue_saves__>:
    3d46:	2f 92       	push	r2
    3d48:	3f 92       	push	r3
    3d4a:	4f 92       	push	r4
    3d4c:	5f 92       	push	r5
    3d4e:	6f 92       	push	r6
    3d50:	7f 92       	push	r7
    3d52:	8f 92       	push	r8
    3d54:	9f 92       	push	r9
    3d56:	af 92       	push	r10
    3d58:	bf 92       	push	r11
    3d5a:	cf 92       	push	r12
    3d5c:	df 92       	push	r13
    3d5e:	ef 92       	push	r14
    3d60:	ff 92       	push	r15
    3d62:	0f 93       	push	r16
    3d64:	1f 93       	push	r17
    3d66:	cf 93       	push	r28
    3d68:	df 93       	push	r29
    3d6a:	cd b7       	in	r28, 0x3d	; 61
    3d6c:	de b7       	in	r29, 0x3e	; 62
    3d6e:	ca 1b       	sub	r28, r26
    3d70:	db 0b       	sbc	r29, r27
    3d72:	0f b6       	in	r0, 0x3f	; 63
    3d74:	f8 94       	cli
    3d76:	de bf       	out	0x3e, r29	; 62
    3d78:	0f be       	out	0x3f, r0	; 63
    3d7a:	cd bf       	out	0x3d, r28	; 61
    3d7c:	09 94       	ijmp

00003d7e <__epilogue_restores__>:
    3d7e:	2a 88       	ldd	r2, Y+18	; 0x12
    3d80:	39 88       	ldd	r3, Y+17	; 0x11
    3d82:	48 88       	ldd	r4, Y+16	; 0x10
    3d84:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d86:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d88:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d90:	b9 84       	ldd	r11, Y+9	; 0x09
    3d92:	c8 84       	ldd	r12, Y+8	; 0x08
    3d94:	df 80       	ldd	r13, Y+7	; 0x07
    3d96:	ee 80       	ldd	r14, Y+6	; 0x06
    3d98:	fd 80       	ldd	r15, Y+5	; 0x05
    3d9a:	0c 81       	ldd	r16, Y+4	; 0x04
    3d9c:	1b 81       	ldd	r17, Y+3	; 0x03
    3d9e:	aa 81       	ldd	r26, Y+2	; 0x02
    3da0:	b9 81       	ldd	r27, Y+1	; 0x01
    3da2:	ce 0f       	add	r28, r30
    3da4:	d1 1d       	adc	r29, r1
    3da6:	0f b6       	in	r0, 0x3f	; 63
    3da8:	f8 94       	cli
    3daa:	de bf       	out	0x3e, r29	; 62
    3dac:	0f be       	out	0x3f, r0	; 63
    3dae:	cd bf       	out	0x3d, r28	; 61
    3db0:	ed 01       	movw	r28, r26
    3db2:	08 95       	ret

00003db4 <_exit>:
    3db4:	f8 94       	cli

00003db6 <__stop_program>:
    3db6:	ff cf       	rjmp	.-2      	; 0x3db6 <__stop_program>
